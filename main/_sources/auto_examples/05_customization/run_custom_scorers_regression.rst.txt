
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/05_customization/run_custom_scorers_regression.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_05_customization_run_custom_scorers_regression.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_05_customization_run_custom_scorers_regression.py:


Custom Scoring Function for Regression
======================================

This example uses the ``diabetes`` data from ``sklearn datasets`` and performs
a regression analysis using a Ridge Regression model. As scorers, it uses
``scikit-learn``, ``julearn`` and a custom metric defined by the user.

.. GENERATED FROM PYTHON SOURCE LINES 10-24

.. code-block:: default

    # Authors: Shammi More <s.more@fz-juelich.de>
    #          Federico Raimondo <f.raimondo@fz-juelich.de>
    # License: AGPL

    import pandas as pd
    import scipy
    from sklearn.datasets import load_diabetes

    from sklearn.metrics import make_scorer
    from julearn.scoring import register_scorer

    from julearn import run_cross_validation
    from julearn.utils import configure_logging








.. GENERATED FROM PYTHON SOURCE LINES 25-26

Set the logging level to info to see extra information.

.. GENERATED FROM PYTHON SOURCE LINES 26-28

.. code-block:: default

    configure_logging(level="INFO")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/julearn/julearn/julearn/utils/logging.py:66: UserWarning: The '__version__' attribute is deprecated and will be removed in MarkupSafe 3.1. Use feature detection, or `importlib.metadata.version("markupsafe")`, instead.
      vstring = str(getattr(module, "__version__", None))
    2025-07-07 11:53:26,016 - julearn - INFO - ===== Lib Versions =====
    2025-07-07 11:53:26,016 - julearn - INFO - numpy: 1.26.4
    2025-07-07 11:53:26,016 - julearn - INFO - scipy: 1.15.3
    2025-07-07 11:53:26,016 - julearn - INFO - sklearn: 1.5.2
    2025-07-07 11:53:26,016 - julearn - INFO - pandas: 2.2.3
    2025-07-07 11:53:26,016 - julearn - INFO - julearn: 0.3.5.dev28
    2025-07-07 11:53:26,016 - julearn - INFO - ========================




.. GENERATED FROM PYTHON SOURCE LINES 29-30

load the diabetes data from ``sklearn`` as a ``pandas.DataFrame``.

.. GENERATED FROM PYTHON SOURCE LINES 30-32

.. code-block:: default

    features, target = load_diabetes(return_X_y=True, as_frame=True)








.. GENERATED FROM PYTHON SOURCE LINES 33-37

Dataset contains ten variables age, sex, body mass index, average blood
pressure, and six blood serum measurements (s1-s6) diabetes patients and
a quantitative measure of disease progression one year after baseline which
is the target we are interested in predicting.

.. GENERATED FROM PYTHON SOURCE LINES 37-40

.. code-block:: default

    print("Features: \n", features.head())
    print("Target: \n", target.describe())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Features: 
             age       sex       bmi  ...        s4        s5        s6
    0  0.038076  0.050680  0.061696  ... -0.002592  0.019907 -0.017646
    1 -0.001882 -0.044642 -0.051474  ... -0.039493 -0.068332 -0.092204
    2  0.085299  0.050680  0.044451  ... -0.002592  0.002861 -0.025930
    3 -0.089063 -0.044642 -0.011595  ...  0.034309  0.022688 -0.009362
    4  0.005383 -0.044642 -0.036385  ... -0.002592 -0.031988 -0.046641

    [5 rows x 10 columns]
    Target: 
     count    442.000000
    mean     152.133484
    std       77.093005
    min       25.000000
    25%       87.000000
    50%      140.500000
    75%      211.500000
    max      346.000000
    Name: target, dtype: float64




.. GENERATED FROM PYTHON SOURCE LINES 41-43

Let's combine features and target together in one dataframe and define X
and y.

.. GENERATED FROM PYTHON SOURCE LINES 43-48

.. code-block:: default

    data_diabetes = pd.concat([features, target], axis=1)  # type: ignore

    X = ["age", "sex", "bmi", "bp", "s1", "s2", "s3", "s4", "s5", "s6"]
    y = "target"








.. GENERATED FROM PYTHON SOURCE LINES 49-51

Train a ridge regression model on train dataset and use mean absolute error
for scoring.

.. GENERATED FROM PYTHON SOURCE LINES 51-62

.. code-block:: default

    scores, model = run_cross_validation(
        X=X,
        y=y,
        data=data_diabetes,
        preprocess="zscore",
        problem_type="regression",
        model="ridge",
        return_estimator="final",
        scoring="neg_mean_absolute_error",
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2025-07-07 11:53:26,031 - julearn - INFO - ==== Input Data ====
    2025-07-07 11:53:26,031 - julearn - INFO - Using dataframe as input
    2025-07-07 11:53:26,031 - julearn - INFO -      Features: ['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6']
    2025-07-07 11:53:26,031 - julearn - INFO -      Target: target
    2025-07-07 11:53:26,031 - julearn - INFO -      Expanded features: ['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6']
    2025-07-07 11:53:26,031 - julearn - INFO -      X_types:{}
    2025-07-07 11:53:26,031 - julearn - WARNING - The following columns are not defined in X_types: ['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6']. They will be treated as continuous.
    /home/runner/work/julearn/julearn/julearn/prepare.py:509: RuntimeWarning: The following columns are not defined in X_types: ['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6']. They will be treated as continuous.
      warn_with_log(
    2025-07-07 11:53:26,032 - julearn - INFO - ====================
    2025-07-07 11:53:26,032 - julearn - INFO - 
    2025-07-07 11:53:26,032 - julearn - INFO - Adding step zscore that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2025-07-07 11:53:26,032 - julearn - INFO - Step added
    2025-07-07 11:53:26,032 - julearn - INFO - Adding step ridge that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2025-07-07 11:53:26,032 - julearn - INFO - Step added
    2025-07-07 11:53:26,033 - julearn - INFO - = Model Parameters =
    2025-07-07 11:53:26,033 - julearn - INFO - ====================
    2025-07-07 11:53:26,033 - julearn - INFO - 
    2025-07-07 11:53:26,033 - julearn - INFO - = Data Information =
    2025-07-07 11:53:26,033 - julearn - INFO -      Problem type: regression
    2025-07-07 11:53:26,033 - julearn - INFO -      Number of samples: 442
    2025-07-07 11:53:26,033 - julearn - INFO -      Number of features: 10
    2025-07-07 11:53:26,033 - julearn - INFO - ====================
    2025-07-07 11:53:26,033 - julearn - INFO - 
    2025-07-07 11:53:26,033 - julearn - INFO -      Target type: float64
    2025-07-07 11:53:26,033 - julearn - INFO - Using outer CV scheme KFold(n_splits=5, random_state=None, shuffle=False) (incl. final model)




.. GENERATED FROM PYTHON SOURCE LINES 63-64

The scores dataframe has all the values for each CV split.

.. GENERATED FROM PYTHON SOURCE LINES 64-66

.. code-block:: default

    scores.head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>fit_time</th>
          <th>score_time</th>
          <th>test_score</th>
          <th>n_train</th>
          <th>n_test</th>
          <th>repeat</th>
          <th>fold</th>
          <th>cv_mdsum</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>0.004609</td>
          <td>0.002341</td>
          <td>-43.104359</td>
          <td>353</td>
          <td>89</td>
          <td>0</td>
          <td>0</td>
          <td>b10eef89b4192178d482d7a1587a248a</td>
        </tr>
        <tr>
          <th>1</th>
          <td>0.004575</td>
          <td>0.002340</td>
          <td>-44.861364</td>
          <td>353</td>
          <td>89</td>
          <td>0</td>
          <td>1</td>
          <td>b10eef89b4192178d482d7a1587a248a</td>
        </tr>
        <tr>
          <th>2</th>
          <td>0.004666</td>
          <td>0.002523</td>
          <td>-47.981407</td>
          <td>354</td>
          <td>88</td>
          <td>0</td>
          <td>2</td>
          <td>b10eef89b4192178d482d7a1587a248a</td>
        </tr>
        <tr>
          <th>3</th>
          <td>0.005174</td>
          <td>0.002562</td>
          <td>-42.956254</td>
          <td>354</td>
          <td>88</td>
          <td>0</td>
          <td>3</td>
          <td>b10eef89b4192178d482d7a1587a248a</td>
        </tr>
        <tr>
          <th>4</th>
          <td>0.004564</td>
          <td>0.002353</td>
          <td>-42.419886</td>
          <td>354</td>
          <td>88</td>
          <td>0</td>
          <td>4</td>
          <td>b10eef89b4192178d482d7a1587a248a</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 67-68

Mean value of mean absolute error across CV.

.. GENERATED FROM PYTHON SOURCE LINES 68-70

.. code-block:: default

    print(scores["test_score"].mean() * -1)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    44.264653948271885




.. GENERATED FROM PYTHON SOURCE LINES 71-73

Now do the same thing, but use mean absolute error and Pearson product-moment
correlation coefficient (squared) as scoring functions.

.. GENERATED FROM PYTHON SOURCE LINES 73-84

.. code-block:: default

    scores, model = run_cross_validation(
        X=X,
        y=y,
        data=data_diabetes,
        preprocess="zscore",
        problem_type="regression",
        model="ridge",
        return_estimator="final",
        scoring=["neg_mean_absolute_error", "r2_corr"],
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2025-07-07 11:53:26,083 - julearn - INFO - ==== Input Data ====
    2025-07-07 11:53:26,083 - julearn - INFO - Using dataframe as input
    2025-07-07 11:53:26,083 - julearn - INFO -      Features: ['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6']
    2025-07-07 11:53:26,083 - julearn - INFO -      Target: target
    2025-07-07 11:53:26,083 - julearn - INFO -      Expanded features: ['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6']
    2025-07-07 11:53:26,083 - julearn - INFO -      X_types:{}
    2025-07-07 11:53:26,083 - julearn - WARNING - The following columns are not defined in X_types: ['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6']. They will be treated as continuous.
    /home/runner/work/julearn/julearn/julearn/prepare.py:509: RuntimeWarning: The following columns are not defined in X_types: ['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6']. They will be treated as continuous.
      warn_with_log(
    2025-07-07 11:53:26,084 - julearn - INFO - ====================
    2025-07-07 11:53:26,084 - julearn - INFO - 
    2025-07-07 11:53:26,084 - julearn - INFO - Adding step zscore that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2025-07-07 11:53:26,084 - julearn - INFO - Step added
    2025-07-07 11:53:26,084 - julearn - INFO - Adding step ridge that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2025-07-07 11:53:26,084 - julearn - INFO - Step added
    2025-07-07 11:53:26,085 - julearn - INFO - = Model Parameters =
    2025-07-07 11:53:26,085 - julearn - INFO - ====================
    2025-07-07 11:53:26,085 - julearn - INFO - 
    2025-07-07 11:53:26,085 - julearn - INFO - = Data Information =
    2025-07-07 11:53:26,085 - julearn - INFO -      Problem type: regression
    2025-07-07 11:53:26,085 - julearn - INFO -      Number of samples: 442
    2025-07-07 11:53:26,085 - julearn - INFO -      Number of features: 10
    2025-07-07 11:53:26,085 - julearn - INFO - ====================
    2025-07-07 11:53:26,085 - julearn - INFO - 
    2025-07-07 11:53:26,085 - julearn - INFO -      Target type: float64
    2025-07-07 11:53:26,085 - julearn - INFO - Using outer CV scheme KFold(n_splits=5, random_state=None, shuffle=False) (incl. final model)




.. GENERATED FROM PYTHON SOURCE LINES 85-88

Now the scores dataframe has all the values for each CV split, but two scores
unders the column names ``"test_neg_mean_absolute_error"`` and
``"test_r2_corr"``.

.. GENERATED FROM PYTHON SOURCE LINES 88-90

.. code-block:: default

    print(scores[["test_neg_mean_absolute_error", "test_r2_corr"]].mean())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    test_neg_mean_absolute_error   -44.264654
    test_r2_corr                     0.486498
    dtype: float64




.. GENERATED FROM PYTHON SOURCE LINES 91-94

If we want to define a custom scoring metric, we need to define a function
that takes the predicted and the actual values as input and returns a value.
In this case, we want to compute Pearson correlation coefficient (r).

.. GENERATED FROM PYTHON SOURCE LINES 94-100

.. code-block:: default



    def pearson_scorer(y_true, y_pred):
        return scipy.stats.pearsonr(y_true.squeeze(), y_pred.squeeze())[0]









.. GENERATED FROM PYTHON SOURCE LINES 101-103

Before using it, we need to convert it to a ``sklearn scorer`` and register it
with ``julearn``.

.. GENERATED FROM PYTHON SOURCE LINES 103-106

.. code-block:: default


    register_scorer(scorer_name="pearsonr", scorer=make_scorer(pearson_scorer))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2025-07-07 11:53:26,134 - julearn - INFO - registering scorer named pearsonr




.. GENERATED FROM PYTHON SOURCE LINES 107-108

Now we can use it as another scoring metric.

.. GENERATED FROM PYTHON SOURCE LINES 108-118

.. code-block:: default

    scores, model = run_cross_validation(
        X=X,
        y=y,
        data=data_diabetes,
        preprocess="zscore",
        problem_type="regression",
        model="ridge",
        return_estimator="final",
        scoring=["neg_mean_absolute_error", "r2_corr", "pearsonr"],
    )




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2025-07-07 11:53:26,135 - julearn - INFO - ==== Input Data ====
    2025-07-07 11:53:26,135 - julearn - INFO - Using dataframe as input
    2025-07-07 11:53:26,135 - julearn - INFO -      Features: ['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6']
    2025-07-07 11:53:26,135 - julearn - INFO -      Target: target
    2025-07-07 11:53:26,135 - julearn - INFO -      Expanded features: ['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6']
    2025-07-07 11:53:26,135 - julearn - INFO -      X_types:{}
    2025-07-07 11:53:26,135 - julearn - WARNING - The following columns are not defined in X_types: ['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6']. They will be treated as continuous.
    /home/runner/work/julearn/julearn/julearn/prepare.py:509: RuntimeWarning: The following columns are not defined in X_types: ['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6']. They will be treated as continuous.
      warn_with_log(
    2025-07-07 11:53:26,136 - julearn - INFO - ====================
    2025-07-07 11:53:26,136 - julearn - INFO - 
    2025-07-07 11:53:26,136 - julearn - INFO - Adding step zscore that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2025-07-07 11:53:26,136 - julearn - INFO - Step added
    2025-07-07 11:53:26,136 - julearn - INFO - Adding step ridge that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2025-07-07 11:53:26,136 - julearn - INFO - Step added
    2025-07-07 11:53:26,136 - julearn - INFO - = Model Parameters =
    2025-07-07 11:53:26,137 - julearn - INFO - ====================
    2025-07-07 11:53:26,137 - julearn - INFO - 
    2025-07-07 11:53:26,137 - julearn - INFO - = Data Information =
    2025-07-07 11:53:26,137 - julearn - INFO -      Problem type: regression
    2025-07-07 11:53:26,137 - julearn - INFO -      Number of samples: 442
    2025-07-07 11:53:26,137 - julearn - INFO -      Number of features: 10
    2025-07-07 11:53:26,137 - julearn - INFO - ====================
    2025-07-07 11:53:26,137 - julearn - INFO - 
    2025-07-07 11:53:26,137 - julearn - INFO -      Target type: float64
    2025-07-07 11:53:26,137 - julearn - INFO - Using outer CV scheme KFold(n_splits=5, random_state=None, shuffle=False) (incl. final model)





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.177 seconds)


.. _sphx_glr_download_auto_examples_05_customization_run_custom_scorers_regression.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: run_custom_scorers_regression.py <run_custom_scorers_regression.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: run_custom_scorers_regression.ipynb <run_custom_scorers_regression.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
