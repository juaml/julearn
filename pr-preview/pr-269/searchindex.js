Search.setIndex({"docnames": ["api/base", "api/generated/julearn.PipelineCreator", "api/generated/julearn.TargetPipelineCreator", "api/generated/julearn.base.ColumnTypes", "api/generated/julearn.base.ColumnTypesLike", "api/generated/julearn.base.JuBaseEstimator", "api/generated/julearn.base.JuTransformer", "api/generated/julearn.base.WrapModel", "api/generated/julearn.base.change_column_type", "api/generated/julearn.base.ensure_column_types", "api/generated/julearn.base.get_column_type", "api/generated/julearn.base.make_type_selector", "api/generated/julearn.inspect.FoldsInspector", "api/generated/julearn.inspect.Inspector", "api/generated/julearn.inspect.preprocess", "api/generated/julearn.model_selection.ContinuousStratifiedGroupKFold", "api/generated/julearn.model_selection.ContinuousStratifiedKFold", "api/generated/julearn.model_selection.RepeatedContinuousStratifiedGroupKFold", "api/generated/julearn.model_selection.RepeatedContinuousStratifiedKFold", "api/generated/julearn.model_selection.StratifiedBootstrap", "api/generated/julearn.model_selection.get_searcher", "api/generated/julearn.model_selection.list_searchers", "api/generated/julearn.model_selection.register_searcher", "api/generated/julearn.model_selection.reset_searcher_register", "api/generated/julearn.models.dynamic.DynamicSelection", "api/generated/julearn.models.get_model", "api/generated/julearn.models.list_models", "api/generated/julearn.models.register_model", "api/generated/julearn.models.reset_model_register", "api/generated/julearn.pipeline.JuTargetPipeline", "api/generated/julearn.pipeline.pipeline_creator.Step", "api/generated/julearn.prepare.check_consistency", "api/generated/julearn.prepare.prepare_input_data", "api/generated/julearn.run_cross_validation", "api/generated/julearn.scoring.check_scoring", "api/generated/julearn.scoring.get_scorer", "api/generated/julearn.scoring.list_scorers", "api/generated/julearn.scoring.metrics.r2_corr", "api/generated/julearn.scoring.metrics.r_corr", "api/generated/julearn.scoring.register_scorer", "api/generated/julearn.scoring.reset_scorer_register", "api/generated/julearn.stats.corrected_ttest", "api/generated/julearn.transformers.CBPM", "api/generated/julearn.transformers.ChangeColumnTypes", "api/generated/julearn.transformers.DropColumns", "api/generated/julearn.transformers.FilterColumns", "api/generated/julearn.transformers.JuColumnTransformer", "api/generated/julearn.transformers.SetColumnTypes", "api/generated/julearn.transformers.confound_remover.ConfoundRemover", "api/generated/julearn.transformers.get_transformer", "api/generated/julearn.transformers.list_transformers", "api/generated/julearn.transformers.register_transformer", "api/generated/julearn.transformers.reset_transformer_register", "api/generated/julearn.transformers.target.JuTargetTransformer", "api/generated/julearn.transformers.target.JuTransformedTargetModel", "api/generated/julearn.transformers.target.TargetConfoundRemover", "api/generated/julearn.transformers.target.TransformedTargetWarning", "api/generated/julearn.transformers.target.get_target_transformer", "api/generated/julearn.transformers.target.list_target_transformers", "api/generated/julearn.transformers.target.register_target_transformer", "api/generated/julearn.transformers.target.reset_target_transformer_register", "api/generated/julearn.utils.configure_logging", "api/generated/julearn.utils.logger", "api/generated/julearn.utils.raise_error", "api/generated/julearn.utils.typing.EstimatorLike", "api/generated/julearn.utils.typing.EstimatorLikeFit1", "api/generated/julearn.utils.typing.EstimatorLikeFit2", "api/generated/julearn.utils.typing.EstimatorLikeFity", "api/generated/julearn.utils.typing.JuEstimatorLike", "api/generated/julearn.utils.warn_with_log", "api/generated/julearn.viz.plot_scores", "api/index", "api/inspect", "api/main", "api/model_selection", "api/models", "api/pipeline", "api/prepare", "api/scoring", "api/stats", "api/transformers", "api/utils", "api/viz", "auto_examples/00_starting/index", "auto_examples/00_starting/plot_cm_acc_multiclass", "auto_examples/00_starting/plot_example_regression", "auto_examples/00_starting/plot_stratified_kfold_reg", "auto_examples/00_starting/run_combine_pandas", "auto_examples/00_starting/run_grouped_cv", "auto_examples/00_starting/run_simple_binary_classification", "auto_examples/00_starting/sg_execution_times", "auto_examples/01_model_comparison/index", "auto_examples/01_model_comparison/plot_simple_model_comparison", "auto_examples/01_model_comparison/sg_execution_times", "auto_examples/02_inspection/index", "auto_examples/02_inspection/plot_groupcv_inspect_svm", "auto_examples/02_inspection/plot_inspect_random_forest", "auto_examples/02_inspection/plot_preprocess", "auto_examples/02_inspection/run_binary_inspect_folds", "auto_examples/02_inspection/sg_execution_times", "auto_examples/03_complex_models/index", "auto_examples/03_complex_models/run_apply_to_target", "auto_examples/03_complex_models/run_example_pca_featsets", "auto_examples/03_complex_models/run_generate_target", "auto_examples/03_complex_models/run_hyperparameter_multiple_grids", "auto_examples/03_complex_models/run_hyperparameter_tuning", "auto_examples/03_complex_models/run_hyperparameter_tuning_bayessearch", "auto_examples/03_complex_models/run_stacked_models", "auto_examples/03_complex_models/sg_execution_times", "auto_examples/04_confounds/index", "auto_examples/04_confounds/plot_confound_removal_classification", "auto_examples/04_confounds/run_return_confounds", "auto_examples/04_confounds/sg_execution_times", "auto_examples/05_customization/index", "auto_examples/05_customization/run_custom_scorers_regression", "auto_examples/05_customization/sg_execution_times", "available_pipeline_steps", "configuration", "contributing", "examples", "faq", "getting_started", "index", "maintaining", "selected_deeper_topics/CBPM", "selected_deeper_topics/confound_removal", "selected_deeper_topics/cross_validation_splitter", "selected_deeper_topics/hyperparameter_tuning", "selected_deeper_topics/index", "selected_deeper_topics/model_inspect", "selected_deeper_topics/stacked_models", "selected_deeper_topics/target_transformers", "what_really_need_know/cross_validation", "what_really_need_know/data", "what_really_need_know/index", "what_really_need_know/model_comparison", "what_really_need_know/model_evaluation", "what_really_need_know/pipeline", "whats_new"], "filenames": ["api/base.rst", "api/generated/julearn.PipelineCreator.rst", "api/generated/julearn.TargetPipelineCreator.rst", "api/generated/julearn.base.ColumnTypes.rst", "api/generated/julearn.base.ColumnTypesLike.rst", "api/generated/julearn.base.JuBaseEstimator.rst", "api/generated/julearn.base.JuTransformer.rst", "api/generated/julearn.base.WrapModel.rst", "api/generated/julearn.base.change_column_type.rst", "api/generated/julearn.base.ensure_column_types.rst", "api/generated/julearn.base.get_column_type.rst", "api/generated/julearn.base.make_type_selector.rst", "api/generated/julearn.inspect.FoldsInspector.rst", "api/generated/julearn.inspect.Inspector.rst", "api/generated/julearn.inspect.preprocess.rst", "api/generated/julearn.model_selection.ContinuousStratifiedGroupKFold.rst", "api/generated/julearn.model_selection.ContinuousStratifiedKFold.rst", "api/generated/julearn.model_selection.RepeatedContinuousStratifiedGroupKFold.rst", "api/generated/julearn.model_selection.RepeatedContinuousStratifiedKFold.rst", "api/generated/julearn.model_selection.StratifiedBootstrap.rst", "api/generated/julearn.model_selection.get_searcher.rst", "api/generated/julearn.model_selection.list_searchers.rst", "api/generated/julearn.model_selection.register_searcher.rst", "api/generated/julearn.model_selection.reset_searcher_register.rst", "api/generated/julearn.models.dynamic.DynamicSelection.rst", "api/generated/julearn.models.get_model.rst", "api/generated/julearn.models.list_models.rst", "api/generated/julearn.models.register_model.rst", "api/generated/julearn.models.reset_model_register.rst", "api/generated/julearn.pipeline.JuTargetPipeline.rst", "api/generated/julearn.pipeline.pipeline_creator.Step.rst", "api/generated/julearn.prepare.check_consistency.rst", "api/generated/julearn.prepare.prepare_input_data.rst", "api/generated/julearn.run_cross_validation.rst", "api/generated/julearn.scoring.check_scoring.rst", "api/generated/julearn.scoring.get_scorer.rst", "api/generated/julearn.scoring.list_scorers.rst", "api/generated/julearn.scoring.metrics.r2_corr.rst", "api/generated/julearn.scoring.metrics.r_corr.rst", "api/generated/julearn.scoring.register_scorer.rst", "api/generated/julearn.scoring.reset_scorer_register.rst", "api/generated/julearn.stats.corrected_ttest.rst", "api/generated/julearn.transformers.CBPM.rst", "api/generated/julearn.transformers.ChangeColumnTypes.rst", "api/generated/julearn.transformers.DropColumns.rst", "api/generated/julearn.transformers.FilterColumns.rst", "api/generated/julearn.transformers.JuColumnTransformer.rst", "api/generated/julearn.transformers.SetColumnTypes.rst", "api/generated/julearn.transformers.confound_remover.ConfoundRemover.rst", "api/generated/julearn.transformers.get_transformer.rst", "api/generated/julearn.transformers.list_transformers.rst", "api/generated/julearn.transformers.register_transformer.rst", "api/generated/julearn.transformers.reset_transformer_register.rst", "api/generated/julearn.transformers.target.JuTargetTransformer.rst", "api/generated/julearn.transformers.target.JuTransformedTargetModel.rst", "api/generated/julearn.transformers.target.TargetConfoundRemover.rst", "api/generated/julearn.transformers.target.TransformedTargetWarning.rst", "api/generated/julearn.transformers.target.get_target_transformer.rst", "api/generated/julearn.transformers.target.list_target_transformers.rst", "api/generated/julearn.transformers.target.register_target_transformer.rst", "api/generated/julearn.transformers.target.reset_target_transformer_register.rst", "api/generated/julearn.utils.configure_logging.rst", "api/generated/julearn.utils.logger.rst", "api/generated/julearn.utils.raise_error.rst", "api/generated/julearn.utils.typing.EstimatorLike.rst", "api/generated/julearn.utils.typing.EstimatorLikeFit1.rst", "api/generated/julearn.utils.typing.EstimatorLikeFit2.rst", "api/generated/julearn.utils.typing.EstimatorLikeFity.rst", "api/generated/julearn.utils.typing.JuEstimatorLike.rst", "api/generated/julearn.utils.warn_with_log.rst", "api/generated/julearn.viz.plot_scores.rst", "api/index.rst", "api/inspect.rst", "api/main.rst", "api/model_selection.rst", "api/models.rst", "api/pipeline.rst", "api/prepare.rst", "api/scoring.rst", "api/stats.rst", "api/transformers.rst", "api/utils.rst", "api/viz.rst", "auto_examples/00_starting/index.rst", "auto_examples/00_starting/plot_cm_acc_multiclass.rst", "auto_examples/00_starting/plot_example_regression.rst", "auto_examples/00_starting/plot_stratified_kfold_reg.rst", "auto_examples/00_starting/run_combine_pandas.rst", "auto_examples/00_starting/run_grouped_cv.rst", "auto_examples/00_starting/run_simple_binary_classification.rst", "auto_examples/00_starting/sg_execution_times.rst", "auto_examples/01_model_comparison/index.rst", "auto_examples/01_model_comparison/plot_simple_model_comparison.rst", "auto_examples/01_model_comparison/sg_execution_times.rst", "auto_examples/02_inspection/index.rst", "auto_examples/02_inspection/plot_groupcv_inspect_svm.rst", "auto_examples/02_inspection/plot_inspect_random_forest.rst", "auto_examples/02_inspection/plot_preprocess.rst", "auto_examples/02_inspection/run_binary_inspect_folds.rst", "auto_examples/02_inspection/sg_execution_times.rst", "auto_examples/03_complex_models/index.rst", "auto_examples/03_complex_models/run_apply_to_target.rst", "auto_examples/03_complex_models/run_example_pca_featsets.rst", "auto_examples/03_complex_models/run_generate_target.rst", "auto_examples/03_complex_models/run_hyperparameter_multiple_grids.rst", "auto_examples/03_complex_models/run_hyperparameter_tuning.rst", "auto_examples/03_complex_models/run_hyperparameter_tuning_bayessearch.rst", "auto_examples/03_complex_models/run_stacked_models.rst", "auto_examples/03_complex_models/sg_execution_times.rst", "auto_examples/04_confounds/index.rst", "auto_examples/04_confounds/plot_confound_removal_classification.rst", "auto_examples/04_confounds/run_return_confounds.rst", "auto_examples/04_confounds/sg_execution_times.rst", "auto_examples/05_customization/index.rst", "auto_examples/05_customization/run_custom_scorers_regression.rst", "auto_examples/05_customization/sg_execution_times.rst", "available_pipeline_steps.rst", "configuration.rst", "contributing.rst", "examples.rst", "faq.rst", "getting_started.rst", "index.rst", "maintaining.rst", "selected_deeper_topics/CBPM.rst", "selected_deeper_topics/confound_removal.rst", "selected_deeper_topics/cross_validation_splitter.rst", "selected_deeper_topics/hyperparameter_tuning.rst", "selected_deeper_topics/index.rst", "selected_deeper_topics/model_inspect.rst", "selected_deeper_topics/stacked_models.rst", "selected_deeper_topics/target_transformers.rst", "what_really_need_know/cross_validation.rst", "what_really_need_know/data.rst", "what_really_need_know/index.rst", "what_really_need_know/model_comparison.rst", "what_really_need_know/model_evaluation.rst", "what_really_need_know/pipeline.rst", "whats_new.rst"], "titles": ["<span class=\"section-number\">9.4. </span>Base", "julearn.PipelineCreator", "julearn.TargetPipelineCreator", "julearn.base.ColumnTypes", "julearn.base.ColumnTypesLike", "julearn.base.JuBaseEstimator", "julearn.base.JuTransformer", "julearn.base.WrapModel", "julearn.base.change_column_type", "julearn.base.ensure_column_types", "julearn.base.get_column_type", "julearn.base.make_type_selector", "julearn.inspect.FoldsInspector", "julearn.inspect.Inspector", "julearn.inspect.preprocess", "julearn.model_selection.ContinuousStratifiedGroupKFold", "julearn.model_selection.ContinuousStratifiedKFold", "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold", "julearn.model_selection.RepeatedContinuousStratifiedKFold", "julearn.model_selection.StratifiedBootstrap", "julearn.model_selection.get_searcher", "julearn.model_selection.list_searchers", "julearn.model_selection.register_searcher", "julearn.model_selection.reset_searcher_register", "julearn.models.dynamic.DynamicSelection", "julearn.models.get_model", "julearn.models.list_models", "julearn.models.register_model", "julearn.models.reset_model_register", "julearn.pipeline.JuTargetPipeline", "julearn.pipeline.pipeline_creator.Step", "julearn.prepare.check_consistency", "julearn.prepare.prepare_input_data", "julearn.run_cross_validation", "julearn.scoring.check_scoring", "julearn.scoring.get_scorer", "julearn.scoring.list_scorers", "julearn.scoring.metrics.r2_corr", "julearn.scoring.metrics.r_corr", "julearn.scoring.register_scorer", "julearn.scoring.reset_scorer_register", "julearn.stats.corrected_ttest", "julearn.transformers.CBPM", "julearn.transformers.ChangeColumnTypes", "julearn.transformers.DropColumns", "julearn.transformers.FilterColumns", "julearn.transformers.JuColumnTransformer", "julearn.transformers.SetColumnTypes", "julearn.transformers.confound_remover.ConfoundRemover", "julearn.transformers.get_transformer", "julearn.transformers.list_transformers", "julearn.transformers.register_transformer", "julearn.transformers.reset_transformer_register", "julearn.transformers.target.JuTargetTransformer", "julearn.transformers.target.JuTransformedTargetModel", "julearn.transformers.target.TargetConfoundRemover", "julearn.transformers.target.TransformedTargetWarning", "julearn.transformers.target.get_target_transformer", "julearn.transformers.target.list_target_transformers", "julearn.transformers.target.register_target_transformer", "julearn.transformers.target.reset_target_transformer_register", "julearn.utils.configure_logging", "julearn.utils.logger", "julearn.utils.raise_error", "julearn.utils.typing.EstimatorLike", "julearn.utils.typing.EstimatorLikeFit1", "julearn.utils.typing.EstimatorLikeFit2", "julearn.utils.typing.EstimatorLikeFity", "julearn.utils.typing.JuEstimatorLike", "julearn.utils.warn_with_log", "julearn.viz.plot_scores", "<span class=\"section-number\">9. </span>API Reference", "<span class=\"section-number\">9.5. </span>Inspect", "<span class=\"section-number\">9.1. </span>Main API", "<span class=\"section-number\">9.3. </span>Model Selection", "<span class=\"section-number\">9.6. </span>Models", "<span class=\"section-number\">9.2. </span>Pipeline", "<span class=\"section-number\">9.14. </span>Prepare", "<span class=\"section-number\">9.8. </span>Scoring", "<span class=\"section-number\">9.15. </span>Stats", "<span class=\"section-number\">9.10. </span>Transformers", "<span class=\"section-number\">9.12. </span>Utils", "<span class=\"section-number\">9.16. </span>Visualization", "<span class=\"section-number\">8.1. </span>Starting with <code class=\"docutils literal notranslate\"><span class=\"pre\">julearn</span></code>", "Multiclass Classification", "Regression Analysis", "Stratified K-fold CV for regression analysis", "Working with <code class=\"docutils literal notranslate\"><span class=\"pre\">pandas</span></code>", "Grouped CV", "Simple Binary Classification", "Computation times", "<span class=\"section-number\">8.2. </span>Model Comparison", "Simple Model Comparison", "Computation times", "<span class=\"section-number\">8.3. </span>Inspection", "Inspecting SVM models", "Inspecting Random Forest models", "Preprocessing with variance threshold, zscore and PCA", "Inspecting the fold-wise predictions", "Computation times", "<span class=\"section-number\">8.4. </span>Complex Models", "Transforming target variable with z-score", "Regression Analysis", "Target Generation", "Tuning Multiple Hyperparameters Grids", "Tuning Hyperparameters", "Tuning Hyperparameters using Bayesian Search", "Stacking Classification", "Computation times", "<span class=\"section-number\">8.5. </span>Confounds", "Confound Removal (model comparison)", "Return Confounds in Confound Removal", "Computation times", "<span class=\"section-number\">8.6. </span>Customization", "Custom Scoring Function for Regression", "Computation times", "<span class=\"section-number\">7. </span>Overview of available Pipeline Steps", "<span class=\"section-number\">10. </span>Configuring <code class=\"docutils literal notranslate\"><span class=\"pre\">julearn</span></code>", "<span class=\"section-number\">11. </span>Contributing", "<span class=\"section-number\">8. </span>Examples", "<span class=\"section-number\">13. </span>FAQs", "<span class=\"section-number\">1. </span>Getting started", "Welcome to julearn\u2019s documentation!", "<span class=\"section-number\">12. </span>Maintaining", "<span class=\"section-number\">6.7. </span>Connectome-based Predictive Modeling (CBPM)", "<span class=\"section-number\">6.2. </span>Cross-validation consistent Confound Removal", "<span class=\"section-number\">6.5. </span>Cross-validation splitters", "<span class=\"section-number\">6.3. </span>Hyperparameter Tuning", "<span class=\"section-number\">6. </span>Selected deeper topics", "<span class=\"section-number\">6.4. </span>Inspecting Models", "<span class=\"section-number\">6.6. </span>Stacking Models", "<span class=\"section-number\">6.1. </span>Applying preprocessing to the target", "<span class=\"section-number\">5.1. </span>Why cross validation?", "<span class=\"section-number\">5.2. </span>Data", "<span class=\"section-number\">5. </span>What you really need to know", "<span class=\"section-number\">5.5. </span>Model Comparison", "<span class=\"section-number\">5.4. </span>Model Evaluation", "<span class=\"section-number\">5.3. </span>Model Building", "<span class=\"section-number\">14. </span>What\u2019s new"], "terms": {"provid": [0, 1, 3, 5, 13, 15, 16, 19, 24, 33, 54, 75, 87, 111, 117, 122, 125, 126, 127, 129, 130, 132, 133, 135, 136, 137, 138], "import": [0, 29, 53, 84, 85, 86, 87, 88, 89, 92, 95, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 118, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137], "modul": [0, 33, 75, 82, 111, 117, 121, 122, 131, 132], "thi": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 75, 82, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 116, 117, 118, 120, 121, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137], "page": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 122, 125, 126, 136], "i": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 82, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 101, 102, 103, 104, 105, 106, 110, 111, 114, 116, 117, 118, 121, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138], "refer": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 97, 116, 118, 122, 127, 134], "document": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 82, 86, 92, 96, 116, 126, 127, 135, 136, 137], "It": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 95, 104, 105, 106, 121, 122, 124, 126, 127, 129, 136, 137], "onli": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 86, 95, 97, 103, 104, 110, 111, 124, 125, 126, 127, 129, 130, 131, 132, 133, 135, 136, 137, 138], "explain": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 126, 137], "class": [1, 2, 3, 4, 5, 6, 7, 12, 13, 15, 16, 17, 18, 19, 20, 22, 24, 27, 29, 30, 33, 42, 43, 44, 45, 46, 47, 48, 51, 53, 54, 55, 56, 59, 62, 63, 64, 65, 66, 67, 68, 69, 84, 86, 88, 89, 92, 95, 96, 98, 104, 105, 106, 107, 110, 111, 116, 125, 126, 127, 129, 135, 136, 137], "signatur": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70], "how": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 83, 88, 89, 92, 94, 95, 96, 100, 102, 111, 116, 118, 121, 122, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138], "pleas": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 75, 82, 97, 111, 118, 122, 136, 137], "what": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 87, 88, 95, 102, 105, 111, 116, 125, 126, 127, 129, 130, 131, 133, 136, 137], "you": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 84, 87, 92, 97, 111, 117, 118, 120, 121, 122, 123, 124, 125, 126, 129, 130, 132, 133, 135, 136, 137], "realli": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 110, 122], "need": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 87, 88, 89, 92, 95, 101, 103, 110, 111, 114, 118, 120, 121, 122, 124, 125, 126, 127, 129, 131, 132, 135, 136, 137, 138], "know": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 102, 105, 122, 126, 129, 132, 135, 137], "section": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 126, 133, 135, 136, 137, 138], "big": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70], "pictur": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70], "problem_typ": [1, 25, 31, 33, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 124, 125, 127, 129, 130, 131, 135, 136, 137], "apply_to": [1, 5, 6, 7, 30, 43, 44, 45, 46, 47, 48, 54, 97, 101, 102, 103, 107, 110, 111, 125, 129, 130, 131, 137], "continu": [1, 7, 30, 43, 45, 47, 48, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 104, 105, 106, 110, 111, 114, 124, 126, 127, 129, 130, 131, 133, 135, 136, 137, 138], "creat": [1, 2, 3, 42, 84, 86, 87, 89, 95, 97, 101, 102, 103, 107, 116, 118, 120, 123, 124, 125, 126, 127, 129, 130, 131, 135, 136, 137], "pipelin": [1, 2, 5, 6, 7, 14, 15, 24, 31, 32, 33, 34, 42, 43, 44, 45, 46, 47, 48, 53, 54, 71, 77, 95, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 122, 124, 125, 127, 129, 130, 131, 132, 133, 134, 135, 136, 138], "As": [1, 87, 89, 92, 98, 103, 107, 110, 111, 114, 118, 120, 124, 125, 126, 127, 129, 130, 135, 136, 137], "creation": 1, "bit": [1, 104, 121, 127, 130, 136], "more": [1, 3, 33, 41, 84, 85, 86, 87, 88, 89, 92, 95, 97, 102, 110, 114, 118, 121, 122, 125, 126, 128, 129, 130, 132, 134, 135, 136, 137, 138], "complic": [1, 132], "than": [1, 33, 41, 86, 87, 95, 122, 125, 126, 128, 137], "just": [1, 118, 122, 126, 129, 134, 137], "ad": [1, 6, 33, 42, 43, 44, 45, 46, 47, 48, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 122, 124, 125, 127, 129, 130, 131, 133, 135, 136, 137, 138], "step": [1, 2, 14, 29, 33, 41, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 118, 122, 124, 125, 127, 129, 130, 131, 132, 133, 135, 136, 137], "helper": 1, "so": [1, 5, 6, 7, 24, 39, 42, 43, 44, 45, 46, 47, 48, 54, 86, 87, 89, 92, 97, 105, 116, 118, 120, 121, 126, 127, 131, 133, 136, 137], "user": [1, 5, 6, 7, 15, 16, 17, 18, 19, 22, 24, 27, 33, 39, 42, 43, 44, 45, 46, 47, 48, 51, 54, 56, 59, 61, 97, 111, 114, 117, 121, 122, 125, 127, 132, 137, 138], "can": [1, 3, 15, 16, 17, 18, 19, 22, 24, 27, 29, 31, 33, 39, 41, 42, 46, 48, 51, 54, 59, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 110, 111, 114, 116, 117, 118, 120, 122, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138], "easili": [1, 124, 126], "complex": [1, 87, 95, 107, 119, 122, 125, 126, 127, 129, 137], "sklearn": [1, 3, 5, 7, 11, 15, 24, 29, 46, 48, 55, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 124, 125, 126, 127, 129, 130, 131, 135, 136], "object": [1, 2, 5, 6, 7, 15, 16, 17, 18, 19, 24, 25, 31, 33, 35, 39, 42, 43, 44, 45, 46, 47, 48, 49, 51, 54, 57, 84, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 120, 125, 127, 129, 130, 131, 136, 137, 138], "paramet": [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 53, 54, 55, 57, 59, 61, 63, 65, 66, 67, 68, 69, 70, 77, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 116, 117, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138], "classif": [1, 27, 31, 33, 61, 83, 88, 90, 92, 95, 96, 98, 100, 104, 105, 106, 108, 110, 118, 126, 127, 129, 130, 135, 136, 137], "regress": [1, 14, 15, 16, 27, 31, 33, 39, 61, 83, 90, 97, 100, 101, 103, 107, 108, 111, 113, 115, 116, 124, 127, 128, 130, 131, 135, 136, 137, 138], "transform": [1, 2, 6, 29, 33, 34, 61, 71, 87, 97, 100, 103, 106, 108, 111, 122, 124, 125, 127, 129, 131, 132, 137, 138], "The": [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 27, 29, 30, 31, 32, 33, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 53, 54, 55, 57, 59, 61, 63, 65, 66, 67, 68, 69, 70, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 129, 130, 133, 134, 135, 137, 138], "problem": [1, 15, 16, 17, 18, 19, 25, 27, 31, 33, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 117, 124, 125, 126, 127, 129, 130, 131, 132, 135, 136, 137, 138], "type": [1, 3, 5, 6, 7, 8, 10, 11, 14, 25, 27, 29, 30, 31, 32, 33, 43, 44, 45, 46, 47, 48, 54, 55, 71, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 116, 117, 118, 122, 124, 125, 127, 128, 129, 131, 132, 134, 135, 136], "which": [1, 5, 6, 15, 16, 22, 27, 30, 33, 42, 43, 44, 45, 46, 47, 48, 51, 55, 59, 82, 85, 86, 88, 89, 95, 97, 101, 102, 103, 104, 105, 106, 110, 111, 114, 118, 124, 125, 126, 127, 129, 130, 131, 132, 134, 136, 137, 138], "should": [1, 5, 6, 15, 19, 22, 24, 27, 30, 39, 42, 43, 44, 45, 46, 47, 48, 51, 59, 86, 97, 102, 103, 110, 111, 116, 118, 123, 124, 126, 127, 128, 131, 132, 136, 137], "columntypeslik": [1, 30, 43, 44, 45, 46, 48, 111], "option": [1, 2, 6, 7, 13, 14, 15, 22, 24, 27, 30, 33, 39, 41, 42, 43, 44, 45, 46, 47, 48, 51, 55, 59, 61, 63, 65, 66, 67, 68, 69, 70, 75, 82, 86, 87, 96, 110, 111, 120, 122, 123, 126, 127, 133, 136, 138], "To": [1, 46, 48, 95, 97, 104, 111, 118, 120, 122, 124, 126, 127, 130, 132, 133, 135, 136, 137], "appli": [1, 2, 5, 6, 7, 30, 33, 42, 43, 44, 45, 46, 47, 48, 54, 55, 68, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 122, 124, 125, 127, 128, 129, 130, 135, 136, 137], "specifi": [1, 19, 20, 22, 32, 33, 45, 48, 55, 57, 87, 95, 96, 102, 104, 111, 116, 121, 122, 124, 125, 130, 131, 132, 133, 134, 136, 137, 138], "add": [1, 2, 3, 22, 27, 51, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 118, 124, 125, 126, 127, 129, 130, 131, 133, 135, 136, 137, 138], "method": [1, 5, 6, 7, 15, 16, 17, 18, 24, 41, 42, 43, 44, 45, 46, 47, 48, 54, 86, 87, 97, 104, 111, 117, 121, 124, 126, 127, 129, 137], "default": [1, 2, 5, 6, 7, 13, 14, 15, 16, 17, 18, 19, 22, 24, 27, 28, 30, 33, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 54, 55, 59, 61, 63, 65, 66, 67, 68, 69, 70, 92, 95, 97, 104, 105, 107, 110, 111, 116, 120, 121, 124, 125, 127, 135, 136, 137, 138], "__init__": [1, 2, 3, 5, 6, 7, 12, 13, 15, 16, 17, 18, 19, 24, 29, 30, 42, 43, 44, 45, 46, 47, 48, 53, 54, 55, 56, 65, 66, 67, 68], "properti": [1, 3, 7, 13, 29, 54, 55, 126], "no_model_ok": 1, "bool": [1, 5, 6, 7, 14, 15, 16, 22, 24, 27, 29, 30, 33, 34, 39, 42, 43, 44, 45, 46, 47, 48, 51, 54, 59, 61, 65, 66, 67, 68, 111], "whether": [1, 14, 15, 16, 22, 27, 33, 39, 42, 48, 51, 59, 65, 66, 67, 68, 88, 92, 95, 111, 118, 125, 136], "without": [1, 22, 27, 39, 51, 59, 86, 88, 105, 110, 111, 116, 132], "model": [1, 6, 7, 13, 14, 19, 33, 36, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 61, 70, 71, 78, 84, 85, 86, 88, 89, 93, 94, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 109, 111, 112, 114, 117, 119, 122, 125, 126, 128, 131, 132, 134, 138], "name": [1, 2, 5, 6, 7, 8, 14, 15, 20, 21, 22, 24, 25, 26, 27, 30, 33, 35, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 57, 58, 59, 61, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 116, 117, 118, 125, 127, 129, 130, 131, 132, 133, 135, 136, 137], "none": [1, 2, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 22, 24, 27, 29, 30, 31, 32, 33, 39, 41, 42, 43, 44, 45, 46, 47, 48, 51, 55, 59, 61, 63, 85, 86, 87, 88, 89, 92, 95, 96, 97, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 124, 125, 127, 129, 130, 131, 135, 136, 137], "row_select_col_typ": [1, 6, 30, 43, 44, 45, 46, 47, 48, 111], "row_select_v": [1, 6, 30, 43, 44, 45, 46, 47, 48, 111], "param": [1, 2, 5, 6, 7, 24, 42, 43, 44, 45, 46, 47, 48, 49, 54, 57, 65, 66, 67, 68, 103, 121, 124, 125, 127, 129, 131, 137], "estimatorlik": [1, 34, 46], "an": [1, 2, 6, 15, 16, 17, 18, 19, 24, 31, 33, 35, 42, 43, 44, 45, 46, 47, 48, 84, 87, 88, 89, 92, 95, 96, 97, 105, 110, 117, 118, 122, 124, 125, 126, 127, 129, 130, 131, 132, 133, 135, 136, 137, 138], "available_transform": 1, "available_model": 1, "str": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 57, 58, 59, 61, 63, 69, 84, 85, 102, 111, 136, 137], "compat": [1, 15, 16, 17, 18, 19, 20, 22, 24, 33, 43, 44, 45, 46, 47, 48, 49, 55, 111, 121, 124, 136, 137, 138], "If": [1, 2, 5, 6, 7, 13, 14, 19, 20, 22, 24, 27, 31, 32, 33, 42, 43, 44, 45, 46, 47, 48, 51, 54, 57, 59, 61, 87, 89, 95, 97, 110, 111, 114, 117, 118, 121, 122, 125, 126, 127, 133, 134, 136, 137], "obtain": [1, 2, 7, 54, 96, 125, 132], "from": [1, 2, 3, 5, 24, 29, 32, 33, 42, 43, 48, 51, 53, 55, 59, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 116, 118, 121, 122, 123, 124, 126, 127, 129, 130, 131, 133, 135, 136, 137, 138], "repres": [1, 3, 19, 30, 48, 55, 86, 111, 126, 136], "column": [1, 3, 5, 6, 7, 8, 10, 11, 14, 24, 30, 32, 33, 43, 44, 45, 46, 47, 48, 54, 55, 68, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 110, 111, 114, 116, 117, 124, 125, 127, 129, 130, 131, 133, 135, 136, 137, 138], "list": [1, 3, 4, 5, 6, 7, 13, 14, 21, 26, 29, 30, 32, 33, 36, 43, 44, 45, 46, 47, 48, 50, 55, 58, 104, 106, 111, 116, 117, 127, 129, 133, 136, 137, 138], "attribut": [1, 5, 7, 9, 22, 24, 42, 54, 129], "set": [1, 3, 4, 5, 6, 7, 13, 15, 16, 17, 18, 19, 22, 24, 29, 30, 33, 39, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 65, 66, 67, 68, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 117, 119, 122, 123, 124, 125, 126, 127, 129, 130, 132, 134, 135, 136, 138], "columntyp": [1, 4, 5, 6, 7, 9, 30, 43, 44, 45, 46, 47, 48, 54, 55, 68, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 124, 125, 127, 129, 130, 131, 135, 136, 137], "select": [1, 6, 7, 11, 24, 30, 43, 44, 45, 46, 47, 48, 71, 97, 103, 111, 122, 124, 126, 127, 129, 133, 134, 135], "row": [1, 6, 30, 43, 44, 45, 46, 47, 48, 85, 86, 87, 88, 92, 95, 97, 98, 101, 102, 111, 114, 129, 131, 135, 136, 137], "int": [1, 6, 13, 15, 16, 17, 18, 19, 24, 30, 31, 32, 33, 41, 42, 43, 44, 45, 46, 47, 48, 61, 70, 111, 136], "valu": [1, 5, 6, 7, 19, 24, 30, 33, 37, 38, 42, 43, 44, 45, 46, 47, 48, 54, 55, 84, 85, 86, 87, 88, 89, 95, 96, 97, 101, 102, 104, 105, 106, 110, 111, 114, 116, 117, 124, 126, 127, 129, 133, 136, 137], "": [1, 5, 6, 7, 15, 16, 24, 30, 33, 42, 43, 44, 45, 46, 47, 48, 54, 55, 61, 84, 85, 86, 87, 88, 95, 97, 101, 102, 104, 105, 110, 111, 114, 116, 117, 118, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137], "train": [1, 6, 15, 16, 17, 18, 19, 24, 30, 33, 42, 43, 44, 45, 46, 47, 48, 55, 84, 85, 86, 88, 95, 97, 101, 102, 110, 111, 114, 125, 126, 127, 129, 131, 132, 135, 136, 137], "mostli": [1, 2, 126], "includ": [1, 2, 14, 19, 96, 97, 111, 117, 118, 121, 127, 132], "hyperparamet": [1, 2, 22, 33, 61, 92, 97, 100, 102, 103, 107, 108, 110, 111, 122, 124, 125, 128, 129, 130, 134, 135, 138], "ani": [1, 2, 6, 7, 22, 24, 27, 29, 30, 31, 32, 33, 39, 43, 44, 45, 46, 47, 48, 51, 53, 59, 86, 117, 124, 126, 127, 129, 137], "other": [1, 2, 15, 22, 24, 27, 51, 82, 87, 89, 102, 105, 111, 118, 120, 124, 125, 126, 127, 134, 135, 137], "initi": [1, 2, 22, 23, 41, 51, 52, 59, 60, 110, 125, 130, 137], "multipl": [1, 15, 16, 17, 18, 19, 33, 61, 97, 100, 108, 126, 127, 136, 137, 138], "lead": [1, 121, 125, 126, 132, 137], "search": [1, 21, 22, 33, 61, 97, 100, 104, 105, 108, 122, 127, 129, 130], "return": [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 29, 32, 33, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 65, 66, 67, 68, 86, 95, 96, 109, 112, 114, 137], "its": [1, 5, 23, 52, 60, 118, 127, 129, 130, 132, 134, 137], "last": [1, 97, 102, 111, 123, 125, 137], "rais": [1, 13, 15, 20, 22, 24, 27, 31, 32, 39, 51, 57, 59, 61, 63, 133, 138], "valueerror": [1, 13, 20, 22, 27, 31, 32, 39, 51, 57, 59, 63], "valid": [1, 2, 13, 15, 16, 17, 18, 19, 31, 32, 33, 77, 84, 85, 96, 102, 103, 110, 111, 116, 122, 124, 127, 128, 129, 133, 134, 135, 137, 138], "targetpipelinecr": [1, 101, 116, 125, 131], "target": [1, 2, 6, 7, 13, 15, 16, 17, 18, 19, 24, 29, 31, 32, 33, 34, 42, 43, 44, 45, 46, 47, 48, 61, 65, 66, 67, 68, 71, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 100, 102, 104, 105, 106, 107, 108, 110, 111, 114, 116, 122, 124, 126, 127, 128, 129, 130, 133, 135, 136, 137, 138], "get": [1, 3, 5, 6, 7, 10, 15, 16, 17, 18, 19, 20, 24, 25, 29, 35, 42, 43, 44, 45, 46, 47, 48, 49, 54, 55, 57, 65, 66, 67, 68, 84, 85, 88, 95, 96, 97, 102, 103, 111, 122, 124, 129, 130, 135, 136], "have": [1, 5, 6, 7, 15, 16, 24, 32, 42, 43, 44, 45, 46, 47, 48, 54, 84, 87, 88, 89, 92, 95, 97, 104, 105, 106, 110, 111, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137], "been": [1, 56, 124, 126, 129, 138], "has_model": 1, "ha": [1, 15, 24, 33, 42, 56, 84, 85, 86, 87, 88, 89, 92, 95, 96, 98, 102, 107, 110, 114, 117, 118, 124, 125, 126, 127, 129, 132, 136, 137, 138], "copi": [1, 3, 86, 111, 118, 129], "classmethod": 1, "from_list": 1, "model_param": [1, 33, 92, 138], "union": [1, 4, 29, 34, 64], "dict": [1, 3, 5, 6, 7, 24, 25, 30, 32, 33, 42, 43, 44, 45, 46, 47, 48, 49, 54, 65, 66, 67, 68], "kei": [1, 32, 33, 43, 47, 87, 97, 133], "being": [1, 118, 121, 136, 137, 138], "pieplin": 1, "split": [1, 15, 16, 17, 18, 19, 24, 33, 84, 85, 86, 89, 92, 95, 101, 102, 114, 125, 126, 127, 129, 132, 136], "least": [1, 15, 16, 17, 18, 33, 86, 110, 116, 126], "two": [1, 41, 86, 87, 89, 92, 95, 96, 97, 98, 102, 104, 107, 110, 111, 114, 118, 124, 125, 126, 127, 130, 132, 135, 137], "same": [1, 15, 16, 33, 47, 61, 89, 92, 95, 104, 105, 106, 110, 114, 118, 122, 124, 125, 126, 127, 130, 132, 135, 136, 137], "consid": [1, 111, 117, 118, 123, 125, 127, 133, 136], "point": [1, 110, 118, 125, 126, 132, 134, 135, 136, 137], "tune": [1, 30, 33, 61, 100, 103, 108, 122, 124, 125, 128, 129, 130, 131, 137, 138], "function": [1, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 49, 50, 51, 52, 54, 57, 58, 59, 60, 61, 63, 69, 70, 83, 89, 92, 95, 96, 97, 109, 111, 113, 115, 117, 118, 120, 121, 122, 124, 125, 127, 132, 133, 134, 135, 136, 137, 138], "one": [1, 29, 33, 41, 43, 44, 45, 47, 53, 85, 86, 87, 88, 95, 97, 101, 102, 104, 105, 106, 107, 111, 114, 116, 118, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138], "each": [1, 5, 6, 7, 15, 16, 17, 18, 19, 24, 32, 33, 42, 43, 44, 45, 46, 47, 48, 54, 55, 84, 85, 86, 87, 88, 95, 96, 97, 98, 102, 110, 111, 114, 116, 118, 124, 125, 126, 127, 128, 129, 132, 135, 136, 137], "recurs": 1, "thu": [1, 5, 95, 132], "mani": [1, 42, 88, 95, 125, 126, 127, 136, 137], "all": [1, 3, 14, 21, 22, 26, 33, 36, 42, 43, 47, 48, 50, 55, 58, 84, 85, 88, 89, 95, 96, 97, 98, 102, 110, 111, 114, 116, 118, 121, 123, 124, 125, 127, 128, 129, 131, 132, 133, 134, 136, 137, 138], "configur": [1, 6, 42, 43, 44, 45, 46, 47, 48, 61, 103, 122, 125, 129, 130, 137], "A": [1, 5, 6, 7, 13, 15, 16, 17, 18, 19, 21, 24, 26, 32, 33, 42, 43, 44, 45, 46, 47, 48, 50, 54, 58, 86, 87, 88, 89, 95, 104, 105, 106, 107, 111, 124, 125, 126, 127, 132, 133, 137], "repeat": [1, 17, 18, 84, 85, 102, 111, 114, 125, 126, 127, 129, 132, 136], "to_pipelin": [1, 2], "x_type": [1, 3, 32, 33, 43, 44, 45, 47, 48, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 117, 124, 125, 127, 129, 130, 131, 133, 135, 136, 137], "search_param": [1, 33, 104, 105, 106, 127, 138], "data": [1, 5, 6, 7, 14, 15, 16, 17, 18, 19, 24, 29, 31, 32, 33, 42, 43, 44, 45, 46, 47, 48, 53, 54, 55, 77, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 116, 122, 124, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 137], "inspect": [1, 33, 61, 71, 97, 99, 102, 111, 119, 122, 128, 132, 133, 135, 136], "fold": [1, 13, 15, 16, 17, 18, 33, 61, 83, 84, 85, 90, 94, 95, 96, 99, 101, 102, 110, 111, 114, 125, 126, 127, 129, 131, 132, 136, 137], "wise": [1, 13, 33, 61, 94, 99, 132], "predict": [1, 7, 12, 13, 24, 32, 33, 37, 38, 42, 48, 54, 55, 61, 84, 85, 86, 87, 88, 89, 92, 94, 95, 99, 101, 102, 103, 107, 111, 114, 116, 122, 125, 126, 128, 129, 130, 131, 132, 135, 136, 137], "preprocess": [1, 2, 33, 61, 84, 85, 86, 88, 89, 92, 94, 95, 96, 99, 102, 110, 111, 114, 122, 124, 128, 133, 134, 136], "varianc": [1, 14, 33, 61, 94, 99, 116, 126, 129, 137], "threshold": [1, 14, 33, 42, 48, 55, 61, 94, 99, 111, 116, 124], "zscore": [1, 14, 33, 61, 84, 85, 86, 88, 89, 92, 94, 95, 96, 98, 99, 101, 103, 104, 105, 106, 107, 110, 114, 116, 127, 129, 131, 135, 136, 137], "pca": [1, 14, 33, 61, 94, 99, 102, 103, 111, 116, 127, 137], "gener": [1, 15, 16, 17, 18, 19, 33, 46, 61, 83, 84, 85, 86, 87, 88, 89, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 118, 123, 126, 131, 132, 136, 137, 138], "variabl": [1, 2, 15, 16, 17, 18, 19, 31, 32, 33, 61, 85, 86, 88, 95, 100, 102, 103, 108, 111, 114, 125, 126, 127, 129, 131, 136, 137, 138], "z": [1, 2, 33, 61, 95, 100, 108, 123, 129, 131, 136, 137], "score": [1, 2, 7, 12, 13, 24, 33, 41, 54, 61, 70, 71, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 100, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 115, 122, 124, 125, 127, 129, 130, 131, 134, 137, 138], "bayesian": [1, 33, 61, 100, 108, 127], "grid": [1, 33, 61, 95, 100, 105, 108, 128, 129, 130, 138], "stack": [1, 33, 61, 100, 108, 110, 116, 122, 128], "analysi": [1, 14, 16, 33, 61, 83, 90, 100, 101, 108, 114, 116, 126, 137], "confound": [1, 2, 14, 19, 33, 43, 48, 55, 61, 87, 112, 116, 119, 122, 128, 135, 138], "remov": [1, 2, 14, 19, 33, 43, 48, 55, 61, 86, 96, 97, 109, 112, 116, 118, 122, 126, 128, 135, 138], "comparison": [1, 19, 33, 41, 61, 70, 93, 109, 112, 119, 122, 134], "connectom": [1, 33, 42, 116, 122, 128], "base": [1, 13, 15, 16, 19, 29, 33, 41, 42, 53, 71, 116, 120, 122, 125, 127, 128, 129, 132, 133, 134, 137], "cbpm": [1, 33, 116, 122, 128, 138], "evalu": [1, 7, 33, 36, 54, 78, 89, 95, 103, 122, 126, 129, 132, 133, 134, 135, 137], "build": [1, 33, 84, 88, 95, 100, 122, 123, 124, 130, 131, 132, 134, 135], "cross": [1, 2, 13, 15, 16, 17, 18, 19, 31, 33, 84, 85, 96, 102, 103, 110, 111, 116, 122, 124, 127, 128, 129, 133, 134, 135, 137, 138], "consist": [1, 2, 24, 31, 33, 117, 122, 124, 126, 128, 132, 133, 135, 137, 138], "analog": 2, "pipelinecr": [2, 33, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 116, 124, 125, 127, 129, 130, 131, 134, 135, 136, 138], "allow": [2, 15, 22, 24, 27, 39, 51, 59, 89, 110, 117, 120, 124, 125, 127, 133, 134, 137, 138], "target_pipelin": [2, 125, 131], "jutargetpipelin": [2, 54, 101, 125, 131], "easi": [2, 87, 122, 125, 127, 129, 130, 134, 135], "wai": [2, 89, 92, 120, 122, 125, 126, 127, 129, 130, 132, 135, 136, 137], "out": [2, 20, 21, 48, 58, 92, 111, 116, 122, 125, 126, 127, 129, 130, 134, 135, 136], "us": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 75, 82, 83, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 114, 116, 117, 118, 119, 121, 122, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138], "column_typ": [3, 129], "hold": [3, 22, 136], "regard": [3, 133, 136], "pd": [3, 5, 6, 7, 13, 14, 24, 29, 33, 41, 43, 44, 45, 46, 47, 48, 53, 54, 55, 65, 68, 70, 84, 85, 86, 87, 95, 96, 97, 101, 102, 110, 114, 124, 125, 126, 130, 131, 135], "datafram": [3, 5, 6, 7, 13, 14, 24, 29, 32, 33, 41, 42, 43, 44, 45, 46, 47, 48, 53, 54, 55, 70, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 117, 122, 124, 125, 127, 129, 130, 131, 132, 133, 135, 136, 137, 138], "One": [3, 24, 87, 125, 127, 130, 137], "instead": [3, 15, 16, 19, 22, 24, 27, 39, 42, 51, 59, 86, 96, 110, 125, 126, 127, 130, 138], "also": [3, 84, 86, 89, 92, 97, 102, 104, 111, 117, 118, 120, 122, 124, 125, 127, 129, 130, 132, 133, 135, 136, 137], "itself": [3, 130], "self": [3, 5, 6, 15, 24, 29, 42, 43, 44, 45, 46, 47, 48, 54, 56], "updat": [3, 5, 6, 7, 15, 24, 42, 43, 44, 45, 46, 47, 48, 54, 118, 121, 138], "pattern": [3, 11, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 124, 125, 127, 129, 130, 131, 135, 136, 137], "regex": 3, "match": [3, 46, 87], "to_type_selector": 3, "selector": [3, 11], "usabl": [3, 137], "compos": [3, 11], "columntransform": [3, 11, 129], "callabl": [3, 34, 35, 39, 42, 138], "filter": [3, 5, 6, 7, 43, 44, 45, 46, 47, 48, 54, 116, 122, 137, 138], "alia": [4, 15, 24, 62, 64], "needed_typ": [5, 6, 7, 29, 30, 46, 55], "estim": [5, 6, 7, 15, 24, 30, 33, 34, 35, 39, 42, 43, 44, 45, 46, 47, 48, 54, 65, 66, 67, 68, 95, 96, 97, 103, 104, 105, 106, 107, 110, 111, 122, 124, 125, 126, 127, 128, 129, 131, 132, 134, 135, 137], "everi": [5, 27, 32, 33, 51, 123, 129, 133, 137], "awar": [5, 121], "thei": [5, 7, 24, 54, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 104, 105, 106, 110, 114, 120, 124, 127, 129, 130, 136, 137], "abl": [5, 117, 132, 135], "main": [5, 71, 110, 118, 122, 123, 125, 126, 132], "differ": [5, 15, 16, 17, 18, 19, 27, 86, 87, 89, 92, 97, 102, 104, 105, 107, 110, 111, 120, 121, 124, 125, 126, 127, 129, 130, 132, 133, 135, 136, 137], "between": [5, 19, 31, 85, 110, 118, 124, 125, 126, 130, 132, 135, 137], "baseestim": [5, 138], "purpos": [5, 86, 87, 136], "That": [5, 124, 125, 126, 127, 129, 137], "ar": [5, 6, 7, 15, 16, 17, 18, 22, 24, 27, 29, 33, 39, 41, 42, 43, 44, 45, 46, 47, 48, 51, 53, 54, 55, 59, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 104, 105, 106, 110, 111, 114, 116, 118, 119, 120, 121, 123, 124, 125, 126, 127, 129, 130, 132, 133, 134, 135, 136, 137, 138], "get_needed_typ": [5, 6, 7, 43, 44, 45, 46, 47, 48, 54, 68], "get_apply_to": [5, 6, 7, 43, 44, 45, 46, 47, 48, 54, 68], "filter_column": [5, 6, 7, 43, 44, 45, 46, 47, 48, 54, 107, 116, 130], "x": [5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 24, 29, 32, 33, 35, 39, 42, 43, 44, 45, 46, 47, 48, 53, 54, 55, 65, 66, 68, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 117, 123, 124, 125, 126, 127, 129, 130, 131, 133, 135, 136, 137, 138], "panda": [5, 6, 7, 31, 32, 33, 42, 43, 44, 45, 46, 47, 48, 54, 83, 84, 85, 86, 88, 89, 90, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 114, 121, 122, 124, 125, 129, 130, 131, 133, 135, 136], "get_metadata_rout": [5, 6, 7, 15, 16, 17, 18, 19, 24, 42, 43, 44, 45, 46, 47, 48, 54, 111], "metadata": [5, 6, 7, 15, 16, 17, 18, 19, 24, 42, 43, 44, 45, 46, 47, 48, 54, 87, 111], "rout": [5, 6, 7, 15, 16, 17, 18, 19, 24, 42, 43, 44, 45, 46, 47, 48, 54, 111], "check": [5, 6, 7, 9, 15, 16, 17, 18, 19, 24, 29, 31, 34, 42, 43, 44, 45, 46, 47, 48, 54, 81, 87, 88, 95, 97, 110, 111, 117, 118, 122, 123, 127, 136, 138], "guid": [5, 6, 7, 15, 16, 17, 18, 19, 24, 42, 43, 44, 45, 46, 47, 48, 54, 111, 118], "mechan": [5, 6, 7, 15, 16, 17, 18, 19, 24, 42, 43, 44, 45, 46, 47, 48, 54, 111, 132], "work": [5, 6, 7, 15, 16, 17, 18, 19, 24, 29, 42, 43, 44, 45, 46, 47, 48, 53, 54, 83, 84, 85, 86, 88, 89, 90, 92, 95, 96, 97, 98, 101, 104, 105, 106, 110, 111, 114, 118, 124, 125, 126, 127, 129, 130, 135, 138], "metadatarequest": [5, 6, 7, 15, 16, 17, 18, 19, 24, 42, 43, 44, 45, 46, 47, 48, 54, 111], "encapsul": [5, 6, 7, 15, 16, 17, 18, 19, 24, 42, 43, 44, 45, 46, 47, 48, 54, 111], "inform": [5, 6, 7, 15, 16, 17, 18, 19, 24, 29, 33, 42, 43, 44, 45, 46, 47, 48, 53, 54, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 117, 118, 124, 125, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138], "get_param": [5, 6, 7, 24, 42, 43, 44, 45, 46, 47, 48, 54, 65, 66, 67, 68, 129], "deep": [5, 6, 7, 24, 42, 43, 44, 45, 46, 47, 48, 54, 65, 66, 67, 68, 125], "true": [5, 6, 7, 15, 16, 22, 24, 27, 29, 33, 37, 38, 39, 42, 43, 44, 45, 46, 47, 48, 51, 54, 59, 65, 66, 67, 68, 84, 85, 86, 89, 95, 96, 98, 101, 102, 103, 110, 111, 114, 117, 125, 126, 127, 129, 131, 132, 136, 137], "contain": [5, 6, 7, 24, 32, 33, 36, 41, 42, 43, 44, 45, 46, 47, 48, 54, 70, 84, 85, 86, 89, 101, 102, 114, 126, 129, 133, 136], "subobject": [5, 6, 7, 24, 42, 43, 44, 45, 47, 48, 54], "map": [5, 6, 7, 24, 42, 43, 44, 45, 46, 47, 48, 54, 85, 111], "set_param": [5, 6, 7, 24, 42, 43, 44, 45, 46, 47, 48, 54, 65, 66, 67, 68], "simpl": [5, 6, 7, 24, 33, 41, 42, 43, 44, 45, 46, 47, 48, 54, 61, 70, 83, 90, 91, 93, 95, 96, 97, 98, 104, 105, 106, 110, 111, 116, 118, 122, 124, 126, 127, 129, 130, 132, 137], "well": [5, 6, 7, 24, 42, 43, 44, 45, 46, 47, 48, 54, 117, 124, 125, 126, 127, 129, 130, 132, 133, 134, 135, 137], "nest": [5, 6, 7, 24, 42, 43, 44, 45, 46, 47, 48, 54, 103, 124, 127, 129, 132], "latter": [5, 6, 7, 24, 42, 43, 44, 45, 46, 47, 48, 54], "form": [5, 6, 7, 24, 42, 43, 44, 45, 46, 47, 48, 54, 133, 137], "compon": [5, 6, 7, 24, 42, 43, 44, 45, 46, 47, 48, 54, 97, 102, 103, 116, 137], "__": [5, 6, 7, 24, 42, 43, 44, 45, 46, 47, 48, 54, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 124, 125, 127, 130, 131, 135, 136, 137], "possibl": [5, 6, 7, 22, 24, 27, 39, 42, 43, 44, 45, 46, 47, 48, 51, 54, 59, 87, 122, 126, 127, 132, 136, 137], "instanc": [5, 6, 7, 13, 15, 16, 17, 18, 19, 24, 42, 43, 44, 45, 46, 47, 48, 54, 125, 129, 137], "fit": [6, 7, 24, 29, 33, 42, 43, 44, 45, 46, 47, 48, 53, 54, 55, 65, 66, 67, 68, 84, 85, 86, 88, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 111, 114, 116, 124, 125, 127, 128, 129, 132, 136, 137], "y": [6, 7, 12, 13, 15, 16, 17, 18, 19, 24, 29, 31, 32, 33, 35, 39, 42, 43, 44, 45, 46, 47, 48, 53, 54, 55, 65, 66, 67, 68, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 116, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 135, 136, 137], "fit_param": [6, 7, 42, 43, 44, 45, 46, 47, 48, 54], "datalik": [6, 7, 24, 29, 43, 44, 45, 46, 47, 48, 53, 54, 55, 65, 66, 67, 68], "addit": [6, 7, 24, 33, 42, 43, 44, 45, 46, 47, 48, 54, 121, 122, 124, 129, 130, 132, 135, 136], "pass": [6, 7, 15, 16, 17, 18, 19, 24, 43, 44, 45, 46, 47, 48, 54, 104, 116, 118, 127, 131, 136, 137], "fit_transform": [6, 29, 42, 43, 44, 45, 46, 47, 48, 53, 55], "version": [6, 15, 19, 24, 42, 43, 44, 45, 46, 47, 48, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 114, 118, 121, 122, 126, 129, 130, 138], "arrai": [6, 7, 15, 16, 17, 18, 19, 33, 42, 43, 44, 45, 46, 47, 48, 54, 84, 129], "like": [6, 7, 15, 16, 17, 18, 19, 27, 42, 43, 44, 45, 46, 47, 48, 51, 54, 65, 66, 67, 68, 92, 102, 118, 121, 126, 127, 129, 132, 133, 136, 137], "shape": [6, 7, 15, 16, 17, 18, 19, 42, 43, 44, 45, 46, 47, 48, 54, 84, 95], "n_sampl": [6, 7, 15, 16, 17, 18, 19, 42, 43, 44, 45, 46, 47, 48, 54, 97, 124, 130], "n_featur": [6, 15, 16, 17, 18, 19, 42, 43, 44, 45, 46, 47, 48, 97, 124, 125, 130], "input": [6, 29, 31, 32, 42, 43, 44, 45, 46, 47, 48, 53, 54, 55, 77, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 124, 125, 127, 129, 130, 131, 134, 135, 136, 137], "sampl": [6, 7, 15, 16, 17, 18, 19, 24, 32, 41, 42, 43, 44, 45, 46, 47, 48, 54, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 124, 125, 126, 127, 129, 130, 131, 135, 136, 137], "n_output": [6, 42, 43, 44, 45, 46, 47, 48], "unsupervis": [6, 42, 43, 44, 45, 46, 47, 48], "x_new": [6, 42, 43, 44, 45, 46, 47, 48], "ndarrai": [6, 7, 15, 16, 17, 18, 19, 24, 42, 43, 44, 45, 46, 47, 48, 54], "n_features_new": [6, 42, 43, 44, 45, 46, 47, 48], "set_output": [6, 42, 43, 44, 45, 46, 47, 48], "output": [6, 14, 15, 16, 17, 18, 19, 33, 41, 42, 43, 44, 45, 46, 47, 48, 61, 70, 86, 110, 118, 129, 132, 133, 134, 137], "see": [6, 15, 16, 17, 24, 25, 32, 33, 42, 43, 44, 45, 46, 47, 48, 61, 75, 82, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 116, 117, 118, 120, 125, 126, 127, 129, 130, 132, 133, 134, 135, 136, 137], "introduc": [6, 42, 43, 44, 45, 46, 47, 48, 125], "api": [6, 42, 43, 44, 45, 46, 47, 48, 116, 118, 122, 130, 134, 137], "exampl": [6, 42, 43, 44, 45, 46, 47, 48, 83, 84, 85, 86, 87, 88, 89, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 117, 120, 121, 122, 124, 125, 126, 127, 129, 130, 131, 132, 133, 135, 136, 137, 138], "format": [6, 42, 43, 44, 45, 46, 47, 48, 61, 85, 87, 102, 104, 105, 106, 110, 118, 123, 125, 127, 138], "polar": [6, 42, 43, 44, 45, 46, 47, 48], "unchang": [6, 15, 24, 42, 43, 44, 45, 46, 47, 48], "new": [6, 8, 15, 24, 42, 43, 44, 45, 46, 47, 48, 95, 111, 118, 122, 132, 137], "1": [6, 7, 15, 19, 24, 32, 33, 42, 43, 44, 45, 46, 47, 48, 54, 65, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 133, 135, 136, 137], "4": [6, 42, 43, 44, 45, 46, 47, 48, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 122, 124, 125, 126, 127, 129, 130, 131, 133, 135, 136, 137], "wa": [6, 42, 43, 44, 45, 46, 47, 48, 88, 95, 96, 97, 111, 124, 126, 127, 129, 136], "wrap": [7, 34, 54, 103, 138], "make": [7, 11, 15, 16, 17, 18, 19, 24, 85, 87, 88, 95, 97, 102, 104, 105, 106, 110, 118, 121, 123, 124, 125, 126, 127, 129, 130, 131, 133, 135, 136, 137, 138], "modellik": [7, 24, 25, 27, 48, 54, 55, 111], "float": [7, 19, 24, 32, 33, 37, 38, 42, 48, 54, 55, 70, 84, 106, 111, 127], "predict_proba": [7, 12, 24, 54], "comput": [7, 24, 33, 37, 38, 42, 54, 89, 102, 114, 117, 127, 132, 137], "probabl": [7, 24, 33, 54, 129], "outcom": [7, 24, 54, 137], "np": [7, 15, 16, 17, 18, 19, 24, 42, 54, 84, 85, 88, 95, 102, 104, 105, 106, 124, 125, 126, 129, 130], "correspond": [7, 24, 33, 54, 129], "sort": [7, 24, 54, 88, 95, 116], "order": [7, 15, 16, 24, 54, 87, 88, 95, 110, 111, 117, 118, 125, 127, 130, 132, 137, 138], "appear": [7, 24, 54, 136], "classes_": [7, 24, 54], "decision_funct": [7, 12, 54, 95, 138], "decis": [7, 54, 87, 88, 95, 104, 105, 106, 125, 129], "n_class": [7, 54], "2": [7, 15, 16, 17, 18, 19, 24, 54, 66, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 121, 122, 125, 126, 127, 129, 130, 131, 133, 135, 136, 137], "predict_log_proba": [7, 12], "kwarg": [7, 24, 25, 46, 53, 56, 65, 66, 67, 68], "new_typ": 8, "chang": [8, 15, 19, 24, 43, 82, 105, 110, 116, 118, 121, 123, 126, 127, 136], "attr": 9, "ensur": [9, 43, 45, 47, 48, 84, 103, 126, 129], "cv": [12, 13, 15, 16, 17, 18, 19, 24, 31, 32, 33, 61, 83, 84, 85, 89, 90, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 116, 124, 125, 126, 127, 129, 130, 131, 135, 136, 137, 138], "func": 12, "group": [12, 13, 15, 16, 17, 18, 19, 31, 32, 33, 61, 83, 86, 90, 95, 102, 122, 124, 128, 136], "featur": [13, 14, 15, 16, 17, 18, 19, 29, 32, 33, 42, 43, 44, 45, 46, 47, 48, 53, 55, 65, 66, 68, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 117, 118, 121, 122, 124, 127, 128, 129, 131, 132, 134, 135, 136], "label": [13, 15, 16, 17, 18, 19, 32, 33, 84, 89, 132, 133, 136, 137], "case": [13, 15, 16, 17, 18, 24, 32, 33, 42, 86, 87, 95, 101, 114, 118, 124, 125, 126, 133, 136, 137], "number": [13, 15, 16, 17, 18, 19, 33, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 123, 124, 125, 126, 127, 129, 130, 131, 132, 135, 136, 137], "pipelineinspector": [13, 98], "foldsinspector": [13, 129], "until": [14, 95, 97, 102, 111, 121, 133, 135, 138], "with_column_typ": [14, 95], "fals": [14, 15, 16, 22, 24, 27, 33, 39, 44, 48, 51, 54, 59, 61, 85, 86, 88, 89, 92, 95, 96, 97, 101, 102, 103, 104, 105, 106, 107, 111, 114, 124, 125, 127, 129, 130, 131, 136, 137], "certain": [14, 117, 133, 136, 137], "inclus": [14, 111], "svm": [14, 33, 61, 84, 89, 92, 94, 98, 99, 104, 105, 106, 107, 116, 127, 129, 130, 131, 135, 136, 137], "n_bin": [15, 16, 17, 18, 86, 126], "bin": [15, 16, 17, 18, 86, 126], "n_split": [15, 16, 17, 18, 19, 24, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 124, 125, 126, 127, 129, 130, 131, 135, 136, 137], "5": [15, 16, 17, 18, 19, 33, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 104, 105, 107, 110, 111, 114, 121, 122, 124, 125, 126, 127, 129, 130, 131, 132, 133, 135, 136, 137], "shuffl": [15, 16, 19, 85, 86, 88, 89, 92, 95, 96, 97, 101, 102, 103, 104, 105, 106, 107, 111, 114, 124, 125, 126, 127, 129, 130, 131, 136, 137], "random_st": [15, 16, 17, 18, 19, 24, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 124, 125, 126, 127, 129, 130, 131, 135, 136, 137], "stratifi": [15, 16, 17, 18, 19, 33, 61, 83, 84, 90, 126, 136, 138], "k": [15, 16, 17, 18, 33, 61, 83, 84, 85, 88, 90, 95, 101, 102, 110, 116, 126, 127, 132, 136], "where": [15, 16, 17, 18, 19, 87, 123, 126, 127, 129, 137, 138], "stratif": [15, 16, 19, 86, 88, 128], "done": [15, 16, 19, 104, 118, 121, 123, 129, 130, 135, 136, 137], "discret": [15, 16, 126, 137], "fix": [15, 16, 118, 126, 138], "quantil": [15, 16, 17, 18, 126], "either": [15, 16, 17, 18, 41, 95, 97, 116, 118, 125, 127, 137], "In": [15, 16, 17, 18, 42, 86, 87, 88, 89, 95, 96, 110, 111, 114, 118, 122, 124, 125, 126, 129, 130, 132, 133, 135, 136, 137], "first": [15, 16, 17, 18, 41, 63, 69, 84, 88, 89, 92, 95, 97, 101, 102, 103, 104, 105, 110, 111, 118, 124, 125, 127, 130, 131, 133, 134, 135, 136, 137], "second": [15, 16, 17, 18, 41, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 124, 125, 126, 127, 129, 130, 131, 133, 135, 136, 137], "must": [15, 16, 17, 18, 41, 46, 70, 87, 88, 95, 102, 118, 126, 127, 133, 137], "befor": [15, 16, 33, 54, 84, 86, 87, 96, 110, 114, 118, 121, 123, 126, 127, 136, 137, 138], "batch": [15, 16], "note": [15, 16, 17, 18, 19, 24, 33, 97, 110, 118, 125, 127, 130], "within": [15, 16, 103, 118, 124, 125, 130, 132, 133, 136], "implement": [15, 16, 42, 117, 122, 124, 125, 126, 130, 138], "approxim": [15, 16], "distribut": [15, 16, 19, 41, 84, 86, 88, 89, 92, 95, 96, 98, 104, 105, 106, 107, 110, 116, 125, 126, 129, 135, 136, 137, 138], "global": [15, 16, 117], "perform": [15, 16, 29, 33, 41, 84, 85, 86, 88, 89, 91, 92, 95, 96, 97, 98, 101, 102, 104, 105, 106, 107, 110, 114, 118, 124, 125, 126, 127, 129, 132, 134, 135, 136, 137], "randomst": [15, 16, 17, 18, 19], "when": [15, 16, 24, 86, 110, 116, 117, 118, 120, 124, 125, 126, 127, 131, 133, 136, 137, 138], "affect": [15, 16, 129], "indic": [15, 16, 17, 18, 19, 33, 44, 48, 95, 103, 116, 118, 126, 129, 136, 137], "control": [15, 16, 17, 18, 19, 87, 88, 95, 104, 105, 106, 113, 125, 127, 130, 132], "random": [15, 16, 17, 18, 19, 24, 33, 61, 88, 89, 92, 94, 97, 99, 104, 105, 106, 110, 116, 125, 126, 127, 129, 130, 135, 137], "otherwis": [15, 16, 19, 24, 54, 61], "leav": [15, 16, 102, 126], "reproduc": [15, 16, 17, 18, 19, 24, 33, 136], "across": [15, 16, 17, 18, 19, 85, 96, 101, 102, 114, 126, 129, 136], "call": [15, 16, 17, 18, 19, 22, 35, 39, 117, 120, 125, 126, 127, 129, 130, 133, 137, 138], "splitter": [15, 16, 17, 18, 19, 24, 33, 122, 128, 134, 135], "mai": [15, 16, 17, 18, 19, 82, 124, 125, 129, 130], "result": [15, 16, 17, 18, 19, 29, 33, 53, 87, 95, 110, 111, 117, 125, 126, 129, 132, 133, 135, 136, 138], "ident": [15, 16, 17, 18, 19, 106, 126, 127], "integ": [15, 16, 17, 18, 19, 127, 136], "test": [15, 16, 17, 18, 19, 24, 33, 41, 55, 84, 85, 86, 92, 95, 101, 102, 103, 105, 110, 122, 125, 126, 127, 129, 132, 135, 136, 138], "suffici": [15, 16, 19, 86], "henc": [15, 16, 19], "zero": [15, 16, 17, 18, 19, 97], "placehold": [15, 16, 17, 18, 19], "actual": [15, 16, 19, 42, 48, 84, 85, 102, 111, 114, 129], "supervis": [15, 16, 17, 18, 19, 137], "learn": [15, 16, 17, 18, 19, 20, 22, 33, 42, 43, 45, 46, 47, 48, 49, 53, 87, 89, 95, 96, 114, 116, 118, 121, 122, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138], "while": [15, 16, 17, 18, 19, 33, 96, 104, 110, 117, 122, 125, 126, 127, 130, 131, 132, 137, 138], "dataset": [15, 16, 17, 18, 19, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 118, 124, 125, 126, 127, 129, 130, 131, 132, 133, 135, 136, 137], "yield": [15, 16, 17, 18, 19, 33, 117, 129, 136], "get_n_split": [15, 16, 17, 18, 19], "iter": [15, 16, 17, 18, 19, 33, 97, 106, 110, 124, 127, 129, 136, 138], "alwai": [15, 16, 17, 18, 19, 89, 104, 105, 106, 110, 118, 125, 127, 130, 135, 136, 137], "ignor": [15, 16, 17, 18, 19, 24, 103, 111, 114, 127], "exist": [15, 16, 17, 18, 19, 24, 39, 61], "set_split_request": 15, "request": [15, 24, 98, 122], "relev": [15, 24, 129], "enable_metadata_rout": [15, 24], "set_config": [15, 24, 117], "meta": [15, 24], "error": [15, 22, 24, 27, 32, 33, 39, 51, 59, 61, 63, 84, 85, 87, 101, 102, 114, 117, 118, 126, 132, 135, 138], "given": [15, 24, 48, 95, 110, 111, 116, 117, 125, 133, 136, 137], "origin": [15, 24, 42, 63, 118, 123], "util": [15, 24, 71, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 114, 118, 122, 129, 130], "metadata_rout": [15, 24], "retain": [15, 24], "some": [15, 24, 86, 87, 88, 95, 96, 103, 118, 121, 124, 125, 126, 127, 129, 130, 132, 133], "3": [15, 24, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 118, 121, 122, 124, 125, 126, 127, 129, 130, 131, 133, 135, 136, 137], "sub": [15, 24, 134], "e": [15, 24, 27, 42, 48, 55, 61, 111, 116, 118, 121, 123, 124, 125, 126, 127, 129, 136, 137], "g": [15, 24, 27, 61, 102, 116, 121, 126, 127, 136], "insid": [15, 24, 27, 137], "effect": [15, 24, 125, 129], "glossari": [16, 17], "n_repeat": [17, 18, 84, 92, 98, 129, 135, 136], "10": [17, 18, 42, 84, 85, 86, 87, 88, 89, 95, 96, 98, 101, 102, 104, 106, 110, 111, 114, 122, 125, 126, 127, 129, 130, 131, 135, 136], "continuousstratifiedgroupkfold": [17, 126], "n": [17, 18, 84, 85, 86, 97, 101, 102, 114, 116, 123, 126, 131, 137], "time": [17, 18, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 135, 136, 137], "repetit": [17, 18, 84, 85, 102], "state": [17, 18, 23, 24, 28, 40, 52, 60, 125], "contion": 18, "continuousstratifiedkfold": [18, 86, 126, 138], "test_siz": [19, 84, 85, 95, 101, 102, 110], "0": [19, 24, 32, 33, 42, 48, 55, 70, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 133, 135, 136, 137], "train_siz": [19, 95, 98, 110], "bootstrap": [19, 110, 126], "resampl": 19, "replac": [19, 42, 96, 110, 123, 129], "respect": [19, 42, 116, 118, 133, 135, 136, 137], "re": [19, 118, 137], "proport": 19, "round": [19, 135], "up": [19, 33, 41, 63, 97, 104, 105, 106, 111, 122, 124, 129, 134, 137], "absolut": [19, 85, 101, 102, 114, 116], "complement": [19, 116], "size": [19, 124, 125, 126, 135], "21": [19, 87, 122, 124, 130, 135], "remain": [19, 126, 132], "unspecifi": 19, "automat": [19, 118, 121, 123, 137], "produc": [19, 127], "n_label": 19, "searcher": [20, 21, 22, 23, 33, 121, 128, 138], "scikit": [20, 22, 33, 42, 43, 45, 46, 47, 48, 49, 53, 89, 95, 96, 114, 116, 121, 122, 124, 125, 126, 127, 130, 131, 132, 135, 136, 137, 138], "avail": [20, 21, 22, 26, 33, 35, 36, 41, 50, 57, 58, 121, 122, 136, 137, 138], "algorithm": [21, 22, 24, 33, 96, 127, 132, 135, 137, 138], "searcher_nam": 22, "params_attr": 22, "overwrit": [22, 27, 39, 51, 59, 61, 138], "regist": [22, 23, 27, 28, 33, 39, 40, 51, 52, 59, 60, 114, 138], "after": [22, 29, 48, 53, 55, 85, 86, 95, 97, 101, 102, 110, 111, 114, 118, 129], "referenc": [22, 27, 51, 59, 138], "obj": 22, "space": [22, 127], "decid": [22, 27, 39, 59], "warn": [22, 27, 31, 32, 39, 51, 56, 59, 61, 69, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 104, 105, 106, 110, 114, 124, 126, 129, 130, 133, 135, 138], "alreadi": [22, 27, 39, 51, 59, 95, 97, 118, 125, 126, 130, 134, 135, 137], "reset": [23, 28, 40, 52, 60, 87], "ensembl": [24, 130], "ds_split": 24, "random_state_algorithm": 24, "deslib": [24, 71, 116, 121, 122], "randomforest": 24, "metad": 24, "singlebest": 24, "staticselect": 24, "stackedclassifi": 24, "knorau": 24, "knora": 24, "desp": 24, "ola": 24, "mcb": 24, "knop": 24, "sample_weight": 24, "weight": [24, 127, 137], "set_score_request": 24, "run_cross_valid": [25, 27, 41, 70, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 117, 118, 124, 125, 127, 129, 130, 131, 134, 135, 138], "extra": [25, 46, 65, 66, 68, 75, 82, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 114, 116, 117, 118, 130, 131, 137], "keyword": [25, 46, 65, 66, 68, 97, 124], "argument": [25, 46, 65, 66, 68, 97, 111, 126], "model_nam": 27, "classification_cl": 27, "regression_cl": 27, "afterward": [27, 51, 130], "behav": [27, 51], "runtimewarn": [27, 31, 32, 51, 59, 69, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 104, 105, 106, 110, 114, 124, 129, 130, 135], "unlik": [29, 53, 132], "both": [29, 42, 53, 86, 88, 95, 110, 111, 125, 126, 127, 130, 131, 136, 137], "requir": [29, 53, 75, 82, 118, 122, 127, 129, 131, 134, 137, 138], "targetconfoundremov": [29, 53, 125], "encod": [29, 53], "present": [29, 53, 111, 117, 118, 124, 126, 138], "leakag": [29, 53, 122, 125, 137], "drop": [29, 42, 44, 53, 86, 89, 92, 97, 111, 116, 129], "tupl": [29, 42, 127], "jutargettransform": [29, 57, 59], "transformerlik": [29, 33, 137], "inverse_transform": 29, "invers": [29, 54, 138], "can_inverse_transform": [29, 54], "factori": 30, "params_to_tun": 30, "juestimatorlik": 30, "estimatorlikefit1": [30, 64, 68], "estimatorlikefit2": [30, 64], "estimatorlikef": [30, 64], "seri": [31, 32, 55, 65, 68], "inconsist": [31, 32], "might": [31, 32, 82, 87, 89, 92, 96, 104, 105, 106, 117, 120, 121, 125, 126, 127, 129, 131, 134, 136, 137, 138], "still": [31, 87, 111, 121, 126, 136, 138], "run": [31, 33, 42, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 133, 135, 136, 137], "df": [32, 41, 97, 127, 133, 135, 136, 137], "pos_label": [32, 33, 89], "detail": [32, 33, 118, 132], "interpret": [32, 33, 61, 110, 129], "posit": [32, 33, 42, 85, 89, 103, 124], "element": [32, 33, 61, 84, 87, 97, 117, 137, 138], "convert": [32, 33, 86, 87, 96, 110, 114, 126], "equal": [32, 33, 86, 116, 126], "dictionari": [32, 33, 43, 47, 97, 111, 125, 127, 129, 133, 138], "df_x": 32, "df_y": 32, "df_group": 32, "return_estim": [33, 84, 85, 86, 88, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 110, 111, 114, 124, 127, 129, 130, 136], "return_inspector": [33, 98, 129], "return_train_scor": [33, 129, 136], "seed": [33, 89, 92, 97, 104, 105, 106, 110, 129, 130], "n_job": [33, 42, 103, 129, 138], "verbos": [33, 42, 129, 138], "string": [33, 61, 103, 116, 133, 135, 136, 137, 138], "kind": [33, 84, 85, 88, 89, 92, 95, 96, 98, 104, 105, 106, 107, 110, 127, 133, 136], "categor": [33, 102, 111, 116, 127, 131], "multiple_class": 33, "binari": [33, 61, 83, 88, 90, 92, 95, 96, 98, 104, 105, 106, 107, 110, 116, 118, 126, 127, 129, 135], "ordin": 33, "final": [33, 84, 85, 86, 87, 88, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 118, 124, 126, 127, 129, 130, 136, 137], "inspector": [33, 98, 129], "strategi": [33, 136], "kfold": [33, 85, 86, 88, 89, 92, 95, 96, 97, 101, 102, 103, 104, 105, 106, 107, 111, 114, 124, 125, 126, 127, 129, 130, 131, 136, 137], "scorerlik": [33, 34, 35, 39], "metric": [33, 71, 84, 85, 87, 89, 92, 102, 110, 114, 122, 132, 134, 135], "http": [33, 42, 61, 86, 92, 118, 122, 126, 132, 135, 138], "org": [33, 42, 61, 86, 92, 122, 132, 135, 136], "stabl": [33, 86, 121, 122, 132], "model_evalu": 33, "html": [33, 61, 86, 92, 118, 122, 132, 135, 136], "comprehens": [33, 117], "scorer": [33, 35, 36, 39, 40, 114, 135, 136, 138], "defin": [33, 41, 46, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 114, 124, 125, 126, 127, 129, 130, 136, 137, 138], "follow": [33, 41, 42, 46, 61, 63, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 104, 105, 106, 110, 111, 114, 116, 118, 119, 121, 122, 123, 124, 127, 129, 130, 133, 134, 135, 136, 137], "step__paramet": 33, "sever": [33, 87, 88, 95, 117, 118, 126, 127, 132, 136], "svm__probabl": 33, "gridsearchcv": [33, 127], "randomizedsearchcv": [33, 127], "bay": [33, 106, 121, 127, 138], "bayessearchcv": [33, 121, 127, 138], "optuna": [33, 121, 127, 138], "optunasearchcv": [33, 121, 127, 138], "register_search": 33, "go": [33, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 122, 129, 134, 137], "oper": [33, 84, 86, 96, 110, 111, 126], "job": [33, 42], "parallel": [33, 42, 118, 138], "over": [33, 84, 85, 89, 92, 97, 102, 124, 125, 129, 130, 135], "mean": [33, 41, 42, 48, 55, 82, 85, 86, 88, 89, 95, 97, 101, 102, 104, 105, 106, 110, 111, 114, 116, 125, 126, 127, 129, 131, 132, 135, 136, 137], "unless": 33, "joblib": [33, 42], "parallel_backend": 33, "context": [33, 87, 88, 95, 104, 105, 106, 129], "processor": 33, "level": [33, 61, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 114, 118, 124, 129, 130], "outer": [33, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 124, 125, 127, 129, 130, 131, 135, 136, 137, 138], "convernt": 33, "print": [33, 61, 84, 85, 86, 88, 89, 92, 95, 97, 98, 101, 102, 103, 104, 105, 106, 107, 111, 114, 117, 124, 125, 127, 129, 131, 135, 136, 137], "larger": 33, "50": [33, 85, 86, 89, 92, 96, 97, 98, 101, 102, 107, 110, 111, 114, 127, 130, 131, 136, 137], "standard": [33, 42, 97, 125, 130, 137, 138], "standrad": 33, "addition": [33, 61, 89, 92, 122, 123, 125, 137], "fit_tim": [33, 84, 85, 98, 101, 102, 111, 114, 125, 131, 136, 137], "And": [33, 88, 95, 110, 126, 127], "final_estim": 33, "multiclass": [33, 61, 83, 90, 116], "forest": [33, 61, 88, 92, 94, 97, 99, 110, 116, 130, 135, 137], "custom": [33, 39, 61, 115, 119, 122, 124, 136, 137], "wrap_scor": 34, "doe": [34, 95, 132, 137], "handl": 34, "non_invers": 34, "scalar": [35, 39, 84], "greater": [35, 39, 41, 129], "better": [35, 39, 104, 105, 106, 127, 129, 135], "Will": [35, 39, 135], "y_true": [37, 38, 84, 85, 89, 102, 114], "y_pred": [37, 38, 84, 85, 89, 102, 114], "squar": [37, 114, 116], "pearson": [37, 38, 114, 124], "product": [37, 38, 114], "moment": [37, 38, 114], "correl": [37, 38, 42, 85, 114, 124], "coeffici": [37, 38, 85, 114, 136, 137], "arraylik": [37, 38], "scorer_nam": [39, 114], "access": [39, 87], "want": [39, 48, 84, 87, 88, 89, 95, 97, 110, 111, 114, 118, 120, 121, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137], "userwarn": [39, 86, 89, 126], "bonferroni": 41, "altern": [41, 110, 138], "side": 41, "correct": [41, 92, 130, 135, 138], "t": [41, 87, 92, 95, 126, 127, 135, 136, 137, 138], "degre": [41, 129], "freedom": 41, "adjust": 41, "pvalu": 41, "full": [41, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 118, 129], "letter": 41, "sidak": 41, "holm": 41, "down": 41, "sime": 41, "hochberg": 41, "independ": [41, 48, 55, 95, 110, 111, 116, 126], "hommel": 41, "close": [41, 123], "non": [41, 42], "neg": [41, 42, 124], "fdr_bh": 41, "benjamini": 41, "fdr_by": 41, "yekuti": 41, "fdr_tsbh": 41, "stage": 41, "fdr": [41, 116], "fdr_tsbky": 41, "less": [41, 86, 97, 122, 126, 132], "hypothesi": [41, 110], "underli": [41, 116, 125, 129], "unequ": 41, "significance_threshold": [42, 124], "05": [42, 97, 102, 103, 110, 122, 124, 127, 129], "corr_method": [42, 124], "pearsonr": [42, 114, 136], "agg_method": [42, 124], "sum": [42, 84, 124, 138], "corr_sign": [42, 124], "posneg": [42, 124], "aggreg": [42, 124], "significantli": 42, "signific": [42, 92, 124, 129], "aggregate": 42, "separ": [42, 95, 97, 132, 136, 137], "ones": [42, 127], "choos": [42, 89, 92, 126, 127, 135, 137], "procedur": [42, 103, 126, 132], "describ": [42, 85, 86, 97, 101, 102, 111, 114, 118, 131, 136], "p": [42, 84, 92, 110, 124, 135], "scipi": [42, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 114, 124, 129, 130], "stat": [42, 71, 92, 114, 122, 124, 126, 135], "convent": [42, 118, 127], "axi": [42, 84, 85, 86, 101, 102, 114, 126, 131], "po": [42, 124], "correlation_valu": 42, "found": [42, 104, 105, 106, 136], "used_corr_sign_": 42, "log": [42, 61, 63, 69, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 114, 118, 127, 138], "shen": [42, 124], "finn": [42, 124], "scheinost": 42, "d": [42, 84, 87, 88, 95, 104, 105, 106, 116, 123, 124, 126, 127], "et": [42, 116, 124, 125, 137], "al": [42, 124, 125], "individu": [42, 124, 129, 136], "behavior": [42, 87, 124, 125, 129, 138], "brain": [42, 88, 95, 122, 124, 125], "connect": [42, 124, 125], "nat": [42, 124], "protoc": [42, 124], "12": [42, 85, 87, 88, 95, 97, 98, 102, 107, 108, 121, 124, 125, 130], "506": [42, 124], "518": [42, 124], "2017": [42, 124, 125], "doi": [42, 122, 125], "1038": 42, "nprot": 42, "2016": [42, 87, 88, 95, 104, 105, 106, 124], "178": [42, 127], "y_mean_": 42, "show": [42, 83, 92, 100, 109, 113, 120, 126, 127, 135, 136, 138], "x_y_correlations_": 42, "significant_mask_": 42, "had": [42, 105, 136, 138], "pos_mask_": 42, "pos_significant_mask_": 42, "neg_significant_mask_": 42, "used_significant_mask_": 42, "threhsold": 42, "mask": [42, 44, 48], "per": [42, 84, 88, 95, 102, 118, 126], "get_feature_names_out": [42, 43, 44, 45, 46, 47, 48], "input_featur": [42, 43, 44, 45, 46, 47, 48], "x_types_renam": 43, "Not": [43, 44, 45, 46, 47, 110], "here": [43, 44, 45, 47, 86, 87, 88, 95, 97, 111, 117, 118, 122, 130, 135, 136, 137], "kept": [43, 45, 46, 47, 48, 111], "jutransform": [43, 44, 45, 46, 47, 48], "get_support": [44, 48], "support": [44, 48, 54, 75, 84, 88, 89, 95, 98, 104, 105, 106, 118, 126, 127, 129, 130, 136, 137, 138], "support_mask": [44, 48], "numpi": [44, 48, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 114, 121, 124, 125, 126, 129, 130], "keep": [45, 87, 89, 92, 96, 98, 102, 103, 107, 110, 111, 118, 121, 122, 127, 130, 137], "wrapper": [46, 54, 138], "around": 46, "directli": [46, 87, 122, 131], "feature_names_in_": 46, "undefin": [46, 117], "x0": 46, "x1": 46, "n_features_in_": 46, "model_confound": [48, 55, 111, 125], "keep_confound": [48, 111], "specif": [48, 89, 95, 97, 111, 125, 127, 128, 129, 132, 133, 134], "subtract": [48, 55, 111, 116], "regular": [48, 104, 105, 111, 116, 127, 133], "express": [48, 111, 133], "syntax": [48, 111], "linearregress": [48, 55, 103, 111, 116, 124, 125], "By": [48, 55, 95, 96, 97, 111, 116, 124, 127, 129, 136], "residu": [48, 55, 111, 125], "fall": [48, 55, 111, 124, 136], "under": [48, 55, 111, 114, 120, 121, 136, 137], "togeth": [48, 85, 86, 101, 102, 111, 114, 116], "deconfound": [48, 111], "transformer_nam": [51, 59], "transformer_cl": [51, 59], "arg": [53, 56, 65, 66, 67, 68], "_model_": 54, "transform_target": 54, "confoundremov": [55, 111, 116, 125, 138], "notifi": [56, 61], "with_traceback": 56, "except": [56, 63, 118, 121], "tb": 56, "__traceback__": 56, "fname": 61, "output_format": 61, "debug": [61, 103, 132], "info": [61, 62, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 118, 124, 125, 127, 129, 130, 131, 135, 136, 137], "messag": [61, 63, 69, 118, 124, 138], "pathlib": 61, "path": 61, "filenam": [61, 118], "stdout": 61, "file": [61, 87, 90, 93, 99, 108, 112, 115, 118], "statement": 61, "append": [61, 96, 110, 123, 126, 129], "entri": [61, 137], "doc": [61, 86, 118, 123, 138], "python": [61, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 118, 121, 123, 126, 127, 138], "dev": [61, 118, 123], "howto": 61, "asctim": 61, "levelnam": 61, "msg": [63, 69], "klass": [63, 127], "subclass": [63, 69], "fashion": [65, 66, 67, 68, 125], "juestim": 68, "categori": 69, "width": [70, 89, 92, 98, 103, 107, 110], "800": 70, "height": 70, "600": [70, 86], "ci": [70, 110, 123], "95": [70, 89, 92, 97, 98, 102, 107, 110, 126, 127], "plot": [70, 84, 85, 86, 92, 95, 96, 97, 102, 110, 122, 126, 135], "panel": [70, 92, 120, 121, 135], "dashboard": 70, "confid": [70, 110, 129], "interv": [70, 110], "dynam": [71, 121, 122], "prepar": [71, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 104, 105, 106, 110, 114, 122, 124, 125, 129, 130], "visual": [71, 95, 121, 122, 126, 132, 134], "julearn": [73, 75, 82, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 116, 118, 119, 120, 121, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137], "depend": [75, 82, 87, 88, 95, 104, 105, 106, 118, 122, 126, 129, 135, 138], "instal": [75, 82, 118, 120, 122, 123, 135, 138], "protocol": 81, "experiment": [82, 127], "futur": [82, 84, 86, 96, 110, 126, 127], "complet": [82, 118], "particularli": [82, 126, 136], "reli": 82, "beta": 82, "releas": [82, 121, 122, 138], "packag": [82, 86, 89, 96, 110, 118, 120, 121, 126, 127, 130], "viz": [82, 92, 121, 122, 135], "basic": [83, 118, 127, 133, 134, 136, 137, 138], "galleri": [83, 84, 85, 86, 87, 88, 89, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 118], "sphinx": [83, 84, 85, 86, 87, 88, 89, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 118, 138], "end": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 121], "download": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114], "code": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 118, 122, 125, 137, 138], "iri": [84, 89, 92, 96, 98, 103, 107, 110, 118, 127, 133, 136, 137], "vector": [84, 88, 89, 95, 98, 104, 105, 106, 118, 127, 129, 130, 136, 137], "machin": [84, 87, 88, 89, 95, 98, 104, 105, 106, 118, 122, 124, 125, 127, 129, 132, 133, 134, 135, 137], "classifi": [84, 88, 89, 95, 96, 98, 104, 105, 106, 107, 110, 118, 129, 136, 137], "heatmap": [84, 85, 102], "accuraci": [84, 89, 105, 110, 125, 126, 135, 136], "confus": [84, 97, 136, 137], "matrix": 84, "author": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 118, 124], "shammi": [84, 85, 86, 88, 95, 97, 102, 110, 114, 122, 125, 138], "fz": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 124], "juelich": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 124], "de": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 124, 125], "federico": [84, 85, 86, 87, 88, 89, 92, 95, 96, 98, 102, 103, 104, 105, 106, 107, 110, 114, 122], "raimondo": [84, 85, 86, 87, 88, 89, 92, 95, 96, 98, 102, 103, 104, 105, 106, 107, 110, 114, 122, 138], "f": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 102, 103, 104, 105, 106, 107, 110, 114, 124, 125, 127, 130], "licens": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 118, 124], "agpl": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 124], "seaborn": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 102, 103, 104, 105, 106, 107, 110, 118, 121, 122, 126, 127, 129, 133, 136, 137], "sn": [84, 85, 86, 95, 96, 97, 102, 110, 126, 129], "matplotlib": [84, 85, 86, 95, 96, 97, 102, 110, 122, 126], "pyplot": [84, 85, 86, 95, 96, 97, 102, 110, 126], "plt": [84, 85, 86, 95, 96, 97, 102, 110, 126], "load_dataset": [84, 87, 88, 89, 92, 95, 96, 98, 103, 104, 105, 106, 107, 110, 118, 127, 129, 133, 136, 137], "model_select": [84, 85, 86, 88, 92, 95, 98, 101, 102, 110, 126, 129, 135, 136, 138], "train_test_split": [84, 85, 101, 102], "repeatedkfold": [84, 129], "confusion_matrix": 84, "configure_log": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 114, 118, 129, 130], "2024": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 122, 124, 125, 127, 129, 130, 131, 135, 136, 137], "07": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 122, 124, 125, 127, 129, 130, 131, 135, 136, 137], "30": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 122, 124, 125, 127, 129, 130, 131, 135, 136, 137], "13": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 121, 124, 125, 127, 129, 130, 131, 135, 136, 137], "53": [84, 85, 86, 88, 89, 92], "55": [84, 88], "619": 84, "lib": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 114, 126, 127, 129, 130], "26": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 114, 129, 130, 131], "14": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 114, 125, 126, 127, 129, 130, 135], "dev10": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 114, 122, 129, 130], "load": [84, 85, 86, 101, 102, 104, 105, 106, 110, 111, 114, 118, 127, 131, 133, 136], "df_iri": [84, 89, 92, 96, 98, 103, 107, 110, 118], "sepal_length": [84, 89, 92, 96, 98, 103, 107, 110, 127, 133, 136, 137], "sepal_width": [84, 89, 92, 96, 98, 103, 107, 110, 127, 133, 136, 137], "petal_length": [84, 89, 92, 96, 98, 103, 107, 110, 127, 133, 136, 137], "speci": [84, 89, 92, 96, 98, 103, 107, 110, 118, 127, 129, 133, 136, 137], "train_iri": 84, "test_iri": 84, "200": [84, 97, 98, 110, 124, 126, 129, 130], "we": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 117, 118, 120, 121, 122, 125, 126, 127, 129, 130, 131, 132, 133, 135, 136, 137], "model_iri": [84, 96], "623": [84, 114], "expand": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 117, 124, 125, 127, 129, 130, 131, 135, 136, 137], "treat": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 104, 105, 106, 110, 114, 124, 129, 130], "home": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 104, 105, 106, 110, 114, 124, 127, 129, 130, 135], "runner": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 104, 105, 106, 110, 114, 124, 127, 129, 130, 135], "py": [84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 118, 124, 126, 127, 129, 130, 135], "509": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 104, 105, 106, 110, 114, 124, 129, 130], "warn_with_log": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 104, 105, 106, 110, 114, 124, 129, 130, 135], "624": [84, 114], "__continu": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 104, 105, 106, 110, 111, 114, 124, 127, 129, 131, 135, 136, 137], "625": [84, 114], "120": 84, "626": 84, "versicolor": [84, 89, 92, 96, 98, 107, 110, 118, 127, 136, 137], "40": [84, 85, 86], "virginica": [84, 89, 92, 96, 98, 107, 110, 118, 127, 136, 137], "setosa": [84, 133, 136, 137], "count": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 104, 105, 106, 107, 110, 111, 114, 126, 127, 129, 131, 135, 136, 137], "dtype": [84, 85, 86, 88, 89, 92, 95, 96, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 127, 129, 131, 135, 136, 137], "int64": [84, 88, 89, 92, 95, 96, 98, 104, 105, 106, 107, 110, 127, 129, 135, 136, 137], "scheme": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 124, 125, 127, 129, 130, 131, 132, 135, 136, 137, 138], "multi": [84, 87, 135, 136, 137], "detect": [84, 88, 89, 92, 95, 96, 98, 104, 105, 106, 107, 110, 117, 127, 129, 132, 135, 136, 137, 138], "818": [84, 103], "head": [84, 85, 86, 87, 88, 95, 101, 102, 104, 105, 106, 110, 111, 114, 131, 133, 135, 137], "score_tim": [84, 85, 98, 101, 102, 111, 114, 125, 131, 136, 137], "test_accuraci": [84, 89, 110, 135], "n_train": [84, 85, 111, 114, 125], "n_test": [84, 85, 111, 114, 125], "cv_mdsum": [84, 85, 98, 101, 102, 111, 114, 125, 131, 136, 137], "004987": 84, "002687": 84, "916667": 84, "96": [84, 97, 98, 138], "24": [84, 121, 138], "fa5ab7a2b930761687a8e82d9971ebca": 84, "004555": 84, "002619": 84, "833333": 84, "004528": 84, "002584": 84, "958333": 84, "004620": 84, "002586": 84, "004504": 84, "002566": 84, "now": [84, 85, 86, 87, 89, 92, 95, 96, 98, 101, 102, 103, 104, 105, 106, 110, 111, 114, 118, 125, 126, 127, 129, 130, 133, 135, 136, 137], "df_accuraci": 84, "set_index": [84, 85, 87, 102, 110], "unstack": [84, 85, 102], "index": [84, 85, 86, 87, 88, 95, 97, 101, 102, 103, 104, 105, 106, 110, 114, 118, 122, 129], "875000": 84, "750000": 84, "000000": [84, 85, 86, 92, 97, 101, 102, 110, 111, 114, 131, 135], "791667": 84, "font_scal": [84, 85], "fig": [84, 85, 86, 95, 96, 97, 102, 126], "ax": [84, 85, 86, 95, 96, 97, 102, 126], "subplot": [84, 85, 86, 95, 96, 97, 102, 126], "figsiz": [84, 85, 86, 95, 96, 97, 102, 126], "7": [84, 85, 86, 87, 88, 95, 98, 102, 118, 122, 126, 130, 132, 133, 136, 138], "cmap": [84, 85, 102], "ylgnbu": [84, 85, 102], "titl": [84, 85, 102, 118], "text": [84, 85, 95, 97, 102, 118, 126], "our": [84, 87, 88, 89, 95, 97, 103, 107, 111, 118, 122, 125, 126, 127, 129, 130, 132, 133, 135, 136, 137], "annot": [84, 85], "cm": 84, "uniqu": [84, 88, 95, 127, 129], "9": [84, 85, 87, 88, 95, 97, 98, 102, 111, 125, 127, 133, 136, 137], "8": [84, 87, 88, 95, 98, 101, 102, 121, 125, 126, 127, 131, 132, 136, 137, 138], "let": [84, 85, 86, 87, 88, 95, 97, 101, 102, 104, 105, 110, 111, 114, 125, 126, 127, 129, 130, 131, 133, 137], "anoth": [84, 87, 97, 114, 126, 130, 137], "cm_sum": 84, "keepdim": 84, "cm_perc": 84, "astyp": 84, "100": [84, 89, 92, 96, 97, 98, 107, 110, 125, 127], "empty_lik": 84, "nrow": 84, "ncol": 84, "rang": [84, 87, 97, 116, 124, 130], "j": [84, 125], "c": [84, 87, 88, 95, 104, 105, 106, 120, 121, 127, 129, 130, 137], "els": 84, "1f": [84, 85], "00_start": [84, 86], "plot_cm_acc_multiclass": [84, 90], "104": 84, "deprecationwarn": 84, "convers": 84, "ndim": 84, "deprec": [84, 86, 96, 110, 118, 126, 138], "extract": [84, 87, 88, 95, 129], "singl": [84, 117, 129, 135], "your": [84, 87, 118, 121, 122, 124, 125, 126, 129, 134, 137], "25": [84, 85, 86, 87, 97, 101, 102, 111, 114, 131, 135], "fmt": [84, 85], "total": [84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 124, 125, 126, 127, 129, 130, 131, 133, 135, 136, 137], "script": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 118, 123, 124, 125, 126, 127, 129, 130, 131, 133, 135, 136, 137], "minut": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 124, 125, 126, 127, 129, 130, 131, 133, 135, 136, 137], "532": [84, 87, 88, 90, 95, 104, 105, 106], "sourc": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114], "jupyt": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 120, 136], "notebook": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 120, 136], "ipynb": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114], "diabet": [85, 86, 101, 102, 114, 131], "ridg": [85, 101, 102, 114, 116], "load_diabet": [85, 86, 101, 102, 111, 114, 131], "mean_absolute_error": [85, 102], "57": [85, 86, 127, 130, 135], "314": 85, "315": [85, 102], "return_x_i": [85, 86, 101, 102, 111, 114, 131], "as_fram": [85, 86, 101, 102, 111, 114, 131], "ten": [85, 86, 101, 102, 114], "ag": [85, 86, 87, 101, 102, 111, 114, 131], "sex": [85, 86, 101, 102, 111, 114, 125, 129, 131], "bodi": [85, 86, 101, 102, 114], "mass": [85, 86, 101, 102, 114], "averag": [85, 86, 101, 102, 111, 114, 124, 126, 135], "blood": [85, 86, 101, 102, 111, 114], "pressur": [85, 86, 101, 102, 111, 114], "six": [85, 86, 101, 102, 114], "serum": [85, 86, 101, 102, 114], "measur": [85, 86, 101, 102, 111, 114, 125, 126, 127, 129], "s1": [85, 86, 87, 88, 95, 101, 102, 111, 114, 131], "s6": [85, 86, 87, 88, 95, 101, 102, 111, 114, 131], "patient": [85, 86, 101, 102, 114], "quantit": [85, 86, 101, 102, 114], "diseas": [85, 86, 101, 102, 114], "progress": [85, 86, 101, 102, 114, 118], "year": [85, 86, 101, 102, 114], "baselin": [85, 86, 101, 102, 114], "interest": [85, 86, 89, 101, 102, 110, 114, 134, 136, 137], "bmi": [85, 86, 101, 102, 111, 114, 131], "s4": [85, 86, 87, 88, 95, 101, 102, 111, 114, 131], "s5": [85, 86, 87, 88, 95, 101, 102, 104, 105, 106, 111, 114, 131], "038076": [85, 86, 101, 102, 111, 114, 131], "050680": [85, 86, 101, 102, 111, 114, 131], "061696": [85, 86, 101, 102, 111, 114, 131], "002592": [85, 86, 101, 102, 111, 114, 131], "019907": [85, 86, 101, 102, 111, 114, 131], "017646": [85, 86, 101, 102, 111, 114, 131], "001882": [85, 86, 101, 102, 111, 114, 131], "044642": [85, 86, 101, 102, 111, 114, 131], "051474": [85, 86, 101, 102, 111, 114, 131], "039493": [85, 86, 101, 102, 111, 114, 131], "068332": [85, 86, 101, 102, 111, 114, 131], "092204": [85, 86, 101, 102, 111, 114, 131], "085299": [85, 86, 101, 102, 111, 114, 131], "044451": [85, 86, 101, 102, 111, 114, 131], "002861": [85, 86, 101, 102, 111, 114, 131], "025930": [85, 86, 101, 102, 111, 114, 131], "089063": [85, 86, 101, 102, 111, 114, 131], "011595": [85, 86, 101, 102, 111, 114, 131], "034309": [85, 86, 101, 102, 111, 114, 131], "022688": [85, 86, 101, 102, 111, 114, 131], "009362": [85, 86, 101, 102, 111, 114, 131], "005383": [85, 86, 101, 102, 111, 114, 131], "036385": [85, 86, 101, 102, 111, 114, 131], "031988": [85, 86, 101, 102, 111, 114, 131], "046641": [85, 86, 101, 102, 111, 114, 131], "442": [85, 86, 101, 102, 111, 114, 131], "152": [85, 86, 101, 102, 111, 114, 131, 137, 138], "133484": [85, 86, 101, 102, 111, 114, 131], "std": [85, 86, 97, 101, 102, 111, 114, 125, 131], "77": [85, 86, 101, 102, 111, 114, 131, 135, 138], "093005": [85, 86, 101, 102, 111, 114, 131], "min": [85, 86, 97, 101, 102, 111, 114, 131], "87": [85, 86, 101, 102, 111, 114, 131], "140": [85, 86, 88, 101, 102, 111, 114, 131], "500000": [85, 86, 101, 102, 111, 114, 131], "75": [85, 86, 89, 92, 97, 101, 102, 111, 114, 131], "211": [85, 86, 101, 102, 111, 114, 131], "max": [85, 86, 97, 101, 102, 111, 114, 116, 131], "346": [85, 86, 101, 102, 111, 114, 131], "float64": [85, 86, 89, 92, 97, 101, 102, 103, 107, 111, 114, 124, 125, 130, 131], "combin": [85, 86, 87, 101, 102, 110, 114, 127, 137], "data_diabet": [85, 101, 102, 114, 131], "concat": [85, 86, 96, 101, 102, 110, 114, 131], "bp": [85, 86, 101, 102, 111, 114, 131], "s2": [85, 86, 87, 88, 95, 101, 102, 111, 114, 131], "s3": [85, 86, 87, 88, 95, 101, 102, 111, 114, 131], "calcul": 85, "heat": 85, "corr": [85, 102], "xticklabel": 85, "yticklabel": 85, "train_diabet": [85, 101, 102], "test_diabet": [85, 101, 102], "neg_mean_absolute_error": [85, 86, 97, 101, 114, 136], "513": 85, "514": 85, "515": 85, "309": [85, 101, 102, 105, 107], "516": 85, "553": 85, "test_scor": [85, 86, 88, 89, 92, 95, 101, 102, 103, 104, 105, 106, 107, 111, 114, 125, 127, 136], "004922": 85, "002351": 85, "48": [85, 87, 125, 130], "783874": 85, "247": [85, 127, 138], "62": 85, "b10eef89b4192178d482d7a1587a248a": [85, 101, 102, 111, 114, 125, 131, 136, 137], "004410": 85, "002306": 85, "47": [85, 114, 135, 138], "573568": 85, "004404": [85, 98], "002296": 85, "37": 85, "617474": 85, "004512": [85, 136], "002368": 85, "686852": 85, "004424": 85, "002323": 85, "45": [85, 135, 136, 137], "558655": 85, "248": [85, 106, 127], "61": 85, "444084441470615": 85, "mae": [85, 102], "df_mae": [85, 102], "coef_": [85, 111], "sort_valu": 85, "ascend": 85, "inplac": 85, "barh": 85, "color": [85, 86, 95, 110, 126], "blue": 85, "red": 85, "xlabel": [85, 102], "249999999999986": 85, "scatterplot": [85, 95, 97, 102], "v": [85, 102, 123, 126, 128, 137], "2f": [85, 102], "corrcoef": [85, 102], "set_styl": [85, 86, 102], "darkgrid": [85, 86, 102], "scatter": [85, 97, 102], "xmin": [85, 102], "xmax": [85, 102], "get_xlim": [85, 95, 102], "ymin": [85, 102], "ymax": [85, 102], "get_ylim": [85, 95, 102], "ylabel": [85, 102, 126], "01": [85, 90, 92, 97, 98, 99, 102, 104, 105, 108, 122, 124, 127, 129, 130], "verticalalign": [85, 102], "top": [85, 102, 122, 136], "horizontalalign": [85, 102], "right": [85, 102, 104, 105, 106, 126, 127], "fontsiz": [85, 102], "scale": [85, 102, 104, 105, 116, 127, 129, 137], "649999999999999": 85, "347": [85, 96, 99], "35": [85, 87], "667": [85, 90], "plot_example_regress": [85, 90], "leonard": [86, 97, 110, 122, 124], "sass": [86, 97, 110, 122, 124], "l": [86, 87, 88, 95, 97, 101, 104, 105, 106, 110, 124], "56": [86, 130], "331": [86, 124], "outlier": 86, "data_df": 86, "new_df": 86, "145": [86, 102], "150": [86, 103, 125, 136, 137], "590": 86, "580": [86, 114], "597": 86, "595": 86, "reset_index": [86, 87, 88, 95, 104, 105, 106, 110], "plot_stratified_kfold_reg": [86, 90], "51": [86, 101], "settingwithcopywarn": 86, "try": [86, 88, 89, 92, 95, 98, 103, 105, 107, 126, 127, 136], "slice": 86, "loc": 86, "row_index": 86, "col_index": 86, "caveat": 86, "pydata": 86, "user_guid": 86, "view": [86, 118], "versu": 86, "idea": [86, 132], "chosen": 86, "coupl": 86, "histrogram": 86, "displot": 86, "60": 86, "20": [86, 89, 92, 98, 110, 111, 124, 125, 126, 127, 130, 135, 137], "opt": [86, 89, 96, 110, 126, 127], "hostedtoolcach": [86, 89, 96, 110, 126, 127], "x64": [86, 89, 96, 110, 126, 127], "python3": [86, 89, 96, 110, 126, 127], "site": [86, 89, 96, 110, 126, 127], "_oldcor": [86, 96, 110, 126], "1119": [86, 96, 110, 126], "futurewarn": [86, 96, 110, 126], "use_inf_as_na": [86, 96, 110, 126], "inf": [86, 96, 110, 126], "nan": [86, 96, 110, 126, 129], "option_context": [86, 96, 110, 126], "mode": [86, 96, 110, 126], "axisgrid": 86, "facetgrid": 86, "0x7fef2dbdf160": 86, "histogram": 86, "abov": [86, 110, 125, 127, 129, 136], "uniformli": [86, 126], "skew": 86, "toward": 86, "lower": [86, 126], "even": [86, 111, 127, 136, 137], "low": [86, 97, 106, 116, 124, 127], "give": [86, 116, 125, 127, 134, 135, 136], "good": [86, 89, 105, 121, 126, 134, 135], "granular": 86, "cv_stratifi": [86, 88], "linear": [86, 92, 104, 105, 106, 111, 124, 125, 127, 129, 130, 137], "scores_strat": 86, "linreg": [86, 103, 111, 116, 124, 125], "926": 86, "927": 86, "928": 86, "929": 86, "449": [86, 111], "_split": [86, 126], "737": [86, 126], "popul": [86, 110, 126], "member": [86, 126], "969": 86, "974": [86, 130, 131], "975": [86, 130, 131], "976": [86, 130], "977": [86, 130], "978": [86, 130], "015": [86, 127], "compar": [86, 92, 110, 122, 125, 127, 132, 135, 136], "With": [86, 126, 129, 136], "df_score": 86, "boxplot": [86, 110], "higher": [86, 110, 126], "were": [86, 87, 88, 95, 96, 110, 129, 136], "swarmplot": [86, 96], "855": [86, 89, 90], "fmri": [87, 88, 95, 104, 105, 106], "waskom": [87, 88, 95, 104, 105, 106], "m": [87, 88, 95, 104, 105, 106, 118, 123, 137], "frank": [87, 88, 95, 104, 105, 106], "wagner": [87, 88, 95, 104, 105, 106], "adapt": [87, 88, 95, 104, 105, 106], "engag": [87, 88, 95, 104, 105, 106], "cognit": [87, 88, 95, 104, 105, 106], "cerebr": [87, 88, 95, 104, 105, 106], "cortex": [87, 88, 95, 104, 105, 106], "similar": [87, 127, 130, 136, 137], "excel": [87, 126], "spreadsheet": 87, "csv": 87, "ideal": 87, "everyth": [87, 134], "tabul": 87, "organis": [87, 125], "demograph": [87, 125], "diagnost": 87, "manual": [87, 120, 135, 137], "edit": 87, "sure": [87, 95, 118, 123, 125, 126, 127], "readi": [87, 135, 137], "do": [87, 95, 97, 102, 104, 105, 110, 111, 114, 116, 118, 122, 123, 125, 126, 127, 130, 132, 133, 134, 135, 136, 137], "howev": [87, 92, 95, 96, 97, 111, 117, 120, 121, 125, 126, 127, 130, 131, 132, 135, 136, 137, 138], "prone": [87, 132, 135], "fortun": [87, 126, 127], "tool": [87, 117, 121, 129, 135], "deal": [87, 124, 133], "task": [87, 95, 111, 127, 131], "collect": [87, 110, 129], "start": [87, 118, 119, 122, 126, 127, 129, 130, 131, 134, 135, 137], "df_fmri": [87, 88, 95, 104, 105, 106], "subject": [87, 88, 95, 104, 105, 106, 126], "timepoint": [87, 88, 95, 104, 105, 106], "event": [87, 88, 95, 104, 105, 106], "region": [87, 88, 95, 104, 105, 106], "signal": [87, 88, 95, 104, 105, 106], "s13": [87, 88, 95, 104, 105, 106], "18": [87, 88, 95, 98, 102, 104, 105, 106, 124, 125], "stim": [87, 88, 95, 104, 105, 106], "pariet": [87, 88, 95, 104, 105, 106], "017552": [87, 88, 95, 104, 105, 106], "080883": [87, 88, 95, 104, 105, 106], "s12": [87, 88, 95, 104, 105, 106], "081033": [87, 88, 95, 104, 105, 106], "s11": [87, 88, 95, 104, 105, 106], "046134": [87, 88, 95, 104, 105, 106], "s10": [87, 88, 95, 104, 105, 106], "037970": [87, 88, 95, 104, 105, 106], "long": [87, 110], "wide": 87, "seen": [87, 137], "pivot": [87, 88, 95, 104, 105, 106], "reshap": [87, 95], "tabl": [87, 88, 95], "becom": [87, 132, 137], "identifi": [87, 89, 124, 125, 129, 135], "rule": [87, 116, 126, 137], "duplic": [87, 117], "frontal": [87, 88, 95, 104, 105, 106], "s0": [87, 88, 95, 104, 105, 106], "cue": [87, 88, 95, 104, 105, 106], "007766": [87, 104, 105, 106], "006899": [87, 104, 105, 106], "021452": [87, 104, 105, 106], "039327": [87, 104, 105, 106], "016440": [87, 104, 105, 106], "000300": [87, 104, 105, 106], "021054": [87, 104, 105, 106], "035735": [87, 104, 105, 106], "024296": [87, 104, 105, 106], "033220": [87, 104, 105, 106], "subtl": 87, "For": [87, 89, 92, 97, 102, 111, 116, 117, 118, 120, 121, 124, 126, 127, 129, 130, 131, 133, 136, 137], "place": 87, "scan": 87, "ll": [87, 102], "23": [87, 122, 125], "31": [87, 135], "29": [87, 127, 135], "43": [87, 114], "28": 87, "34": [87, 127, 135], "scanner": 87, "6": [87, 88, 92, 95, 96, 97, 98, 106, 110, 111, 124, 126, 129, 132, 133, 136], "b": [87, 118, 127, 137], "df_meta": 87, "s7": [87, 88, 95], "s8": [87, 88, 95], "s9": [87, 88, 95], "11": [87, 88, 95, 98, 104, 124, 125, 129, 130, 135, 136], "16": [87, 88, 95, 97, 98, 105, 122, 127, 129], "036739": 87, "131641": 87, "17": [87, 88, 95, 97, 98, 105, 127, 129, 135], "004900": 87, "036362": 87, "030099": 87, "121574": 87, "000643": 87, "051040": 87, "009959": 87, "103513": 87, "frame": 87, "suppos": [87, 89, 125], "dure": [87, 88, 95, 121, 124, 125, 127, 129], "There": [87, 126, 132, 134, 137], "009038": 87, "009642": 87, "047859": 87, "026727": 87, "085040": 87, "086399": 87, "069775": 87, "070558": 87, "115321": 87, "154058": 87, "010535": 87, "061817": 87, "034386": 87, "130267": 87, "15": [87, 88, 95, 97, 98, 121, 125, 127, 129], "002170": 87, "048007": 87, "038257": 87, "134828": 87, "004290": 87, "035395": 87, "266": [87, 88, 95, 104, 105, 106], "sinc": [87, 92, 97, 101, 104, 122, 127, 137], "previou": [87, 92, 96, 97, 103, 118, 130, 135, 136, 137, 138], "multiindex": 87, "trick": 87, "underscor": 87, "_": [87, 96, 110, 118], "frontal_cu": 87, "frontal_stim": 87, "parietal_cu": 87, "parietal_stim": 87, "627": [87, 90, 111, 112], "run_combine_panda": [87, 90], "groupkfold": 88, "kimia": 88, "nazarzadeh": 88, "necessari": [88, 120, 125, 130], "librari": [88, 120, 122, 127], "stratifiedgroupkfold": 88, "54": [88, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 124, 125, 127, 129, 130, 131, 135, 136, 137], "114": 88, "infer": [88, 95], "studi": [88, 95, 125, 126, 127], "condit": [88, 95], "groupbi": [88, 95], "1064": [88, 95], "exactli": [88, 95, 129, 137], "rf": [88, 92, 96, 97, 107, 110, 116, 127, 130, 135], "133": 88, "134": 88, "135": [88, 135, 138], "136": 88, "6841826838300122": 88, "773": [88, 95], "774": [88, 127], "775": [88, 127], "776": [88, 127], "009": 88, "6898496240601504": 88, "137": 88, "138": 88, "139": 88, "368": [88, 105, 137], "6879699248120301": 88, "385": [88, 90, 105], "run_grouped_cv": [88, 90], "670": 89, "three": [89, 92, 96, 98, 107, 110, 118, 122, 127, 135, 136], "isin": [89, 92, 96, 98, 107, 110, 118, 127], "sepal": [89, 92, 98, 103, 107, 110, 133, 137], "length": [89, 92, 98, 103, 107, 110], "petal": [89, 92, 98, 103, 107, 110, 133, 137], "854": 89, "856": 89, "857": [89, 102], "858": [89, 103], "859": 89, "90": [89, 92, 135], "70": [89, 92], "assess": [89, 92, 125, 129], "unbalanc": [89, 92], "df_unbalanc": [89, 92], "value_count": [89, 92], "account": [89, 125], "imbal": 89, "suitabl": [89, 121], "balanced_accuraci": [89, 92, 136], "balanced_accuracy_scor": 89, "42": [89, 92, 95, 104, 105, 106, 110, 114, 126, 129, 135, 136], "test_balanced_accuraci": [89, 92], "900": 89, "901": 89, "902": 89, "80": [89, 92, 125, 135], "903": 89, "_classif": 89, "2458": 89, "8625": 89, "8678571428571429": 89, "u": [89, 96, 110, 111, 121, 125, 129, 135, 136], "correctli": 89, "precis": [89, 136], "ratio": 89, "tp": 89, "precision_scor": 89, "949": 89, "950": 89, "951": 89, "952": 89, "332": [89, 90, 127, 137], "run_simple_binary_classif": [89, 90], "00": [90, 93, 97, 99, 107, 108, 112, 115, 127, 129, 130, 135], "04": [90, 97, 108], "398": 90, "execut": [90, 93, 99, 108, 112, 115, 118], "auto_examples_00_start": 90, "mb": [90, 93, 99, 108, 112, 115], "At": [92, 122, 132, 137], "statist": [92, 97, 110, 122, 134, 136], "repeatedstratifiedkfold": [92, 98, 135, 136], "corrected_ttest": [92, 135], "58": [92, 127, 130, 135], "158": [92, 96, 130], "161": [92, 102], "162": 92, "163": 92, "164": 92, "roc_auc": [92, 110, 135, 136], "scores1": [92, 120, 127, 135], "204": [92, 97, 124], "205": 92, "206": [92, 110, 125], "207": [92, 110, 135], "208": [92, 110], "scores2": [92, 120, 127, 135], "495": 92, "496": 92, "497": 92, "498": 92, "third": [92, 136], "kernel": [92, 104, 105, 106, 125, 127, 129, 130, 137], "scores3": [92, 120, 127, 135], "svm__kernel": [92, 105, 127], "svm_linear": 92, "233": [92, 106, 138], "234": [92, 106, 138], "235": [92, 106, 138], "236": [92, 106, 138], "stats_df": [92, 135], "model_2": [92, 130, 135], "val": [92, 135], "175075": 92, "062567": 92, "895662": 92, "151390": 92, "782741": 92, "test_roc_auc": [92, 110, 135], "108944": 92, "835331": 92, "236153": 92, "685092": 92, "669010": 92, "324331": 92, "viewer": 92, "plot_scor": [92, 120, 135], "uncom": [92, 135], "line": [92, 118, 126, 135], "read": [92, 96, 118, 122, 123, 126, 132, 134, 135, 137], "holoviz": [92, 135], "getting_start": [92, 135], "build_app": [92, 135], "deploi": [92, 129, 135], "look": [92, 95, 97, 102, 103, 111, 116, 124, 126, 127, 129, 130, 132, 133, 134, 136, 137], "interact": [92, 95, 122, 129, 135], "zoom": [92, 135], "hover": [92, 135], "button": [92, 135], "488": [92, 93], "plot_simple_model_comparison": [92, 93], "03": [93, 95, 99, 108, 122, 127], "auto_examples_01_model_comparison": 93, "demonstr": [94, 118, 130, 136], "analys": [95, 96, 125], "groupshufflesplit": 95, "635": 95, "654": [95, 111], "655": [95, 111], "656": [95, 111], "657": 95, "7218303650149884": 95, "decod": [95, 125], "claim": [95, 110, 126], "acquir": 95, "randomli": 95, "could": [95, 97, 111, 122, 124, 129, 133, 135, 136, 137], "characterist": 95, "unseen": [95, 126, 132], "whom": 95, "later": [95, 98, 118, 135], "714": 95, "715": [95, 135], "716": [95, 135], "717": [95, 135], "7210526315789474": 95, "part": [95, 120, 122, 124, 126, 132, 135, 137], "raw": [95, 97, 137], "hue": [95, 110], "set_titl": [95, 96, 97, 126], "pre_x": 95, "pre_df": 95, "join": 95, "parietal__": 95, "frontal__": 95, "noth": [95, 127, 136], "standardscal": [95, 103, 106, 116, 127, 129, 131, 136, 137], "seem": [95, 104, 105, 106, 110, 127, 134, 135, 136], "quit": [95, 121, 124, 129], "linearli": 95, "clf": 95, "figur": [95, 118], "xlim": 95, "ylim": 95, "xx": 95, "linspac": [95, 126], "yy": 95, "meshgrid": 95, "xy": 95, "vstack": 95, "ravel": 95, "xy_df": 95, "contour": 95, "alpha": [95, 124, 126], "linestyl": [95, 126], "boundari": [95, 127], "494": [95, 99], "plot_groupcv_inspect_svm": [95, 99], "02": [96, 97, 108, 127, 129, 130], "153": 96, "154": [96, 124], "156": [96, 129], "157": [96, 130], "159": 96, "160": [96, 114, 115], "663": 96, "intern": [96, 129, 130, 136, 137, 138], "caution": [96, 126], "proper": [96, 110, 123, 134], "randomforestclassifi": [96, 116, 127], "understand": [96, 111, 122, 125, 129, 134, 135, 137], "to_plot": 96, "feature_importances_": [96, 110], "barplot": 96, "tight_layout": [96, 110], "review": [96, 118], "wander": 96, "about": [96, 118, 122, 125, 126, 129, 130, 132, 134, 135, 136, 137], "entir": [96, 136, 137], "838": [96, 104, 127], "839": [96, 103, 127], "840": [96, 127], "841": [96, 103, 105, 127], "842": [96, 103, 127], "i_fold": [96, 110], "enumer": [96, 110], "this_import": [96, 110], "plot_inspect_random_forest": [96, 99], "make_regress": [97, 124, 125, 130], "normal": [97, 111, 116, 118, 125, 126, 137, 138], "reduct": 97, "274": [97, 127, 129], "n_inform": 97, "nois": [97, 125], "first_two": 97, "determin": [97, 127, 137], "belong": [97, 111], "x_to_zscor": 97, "summari": [97, 118], "111790": 97, "141618": 97, "023682": 97, "167718": 97, "686170": 97, "977322": 97, "972988": 97, "087946": 97, "895011": 97, "79": [97, 118], "741431": 97, "069985": 97, "772593": 97, "552990": 97, "659172": 97, "293317": 97, "751257": 97, "484100": 97, "759419": 97, "688891": 97, "64": 97, "724008": 97, "206729": 97, "194442": 97, "028152": 97, "174160": 97, "789944": 97, "421885": 97, "724302": 97, "772156": 97, "408321": 97, "392804": 97, "943621": 97, "256723": 97, "383145": 97, "259309": 97, "216": 97, "221085": 97, "explicitli": [97, 104, 125, 127], "declar": 97, "constructor": 97, "special": [97, 103], "cannot": [97, 137], "tree": [97, 116], "pipeline_cr": [97, 102, 103, 107, 111, 125, 127, 129, 130], "select_vari": [97, 116], "n_compon": [97, 102, 103, 127, 137], "n_estim": [97, 130], "becaus": [97, 111, 125, 126, 127, 129, 132, 134, 135, 136, 137], "creator": [97, 98, 101, 102, 103, 104, 105, 110, 111, 124, 127, 131, 136, 137], "simpli": [97, 124, 125, 126, 129, 130, 137], "did": [97, 105], "hand": [97, 118, 124, 125, 130, 133], "r2": [97, 102, 125, 136], "x_after_pca": 97, "earlier": 97, "x_after_zscor": 97, "high": [97, 106, 117, 124, 127], "pca__pca0": [97, 103, 111], "pca__pca1": [97, 111], "289": [97, 127], "__x_to_zscor": 97, "290": 97, "291": 97, "293": 97, "294": 97, "273": [97, 127, 129], "725696": 97, "582295": 97, "314458": 97, "942935": 97, "977336": 97, "463217": 97, "525139": 97, "219493": 97, "618559": 97, "908592": 97, "395105": 97, "743192": 97, "328111": 97, "670912": 97, "97": [97, 98, 110], "573900": 97, "401304": 97, "98": [97, 98, 126], "918034": 97, "137435": 97, "99": [97, 98, 135], "894566": 97, "357729": 97, "1__": 97, "4__": 97, "013728": 97, "426259": 97, "364686": 97, "944446": 97, "118838": 97, "931848": 97, "004437": 97, "030684": 97, "309092": 97, "523891": 97, "206189": 97, "157667": 97, "099154": 97, "028182": 97, "335538": 97, "252795": 97, "049139": 97, "133702": 97, "240085": 97, "443863": 97, "deviat": [97, 125], "000000e": 97, "689893e": 97, "387779e": 97, "005038e": 97, "013728e": 97, "010202e": 97, "576015e": 97, "463286e": 97, "763131e": 97, "456486e": 97, "488094e": 97, "018781e": 97, "113700e": 97, "184776e": 97, "382": [97, 99], "plot_preprocess": [97, 99], "shufflesplit": 98, "785": [98, 127], "788": [98, 127], "789": [98, 127], "790": 98, "791": 98, "792": 98, "942": [98, 105], "004883": 98, "002518": 98, "42489ff0163b2f12752440a6b7ef74c7": 98, "004454": 98, "002464": [98, 136, 137], "004425": 98, "002472": 98, "004448": 98, "002435": 98, "004465": 98, "002443": 98, "004475": 98, "002403": [98, 136], "004385": 98, "002442": 98, "004497": 98, "002450": 98, "004375": 98, "002436": 98, "004364": 98, "002532": 98, "004399": 98, "002411": [98, 136], "004393": 98, "002415": 98, "004413": 98, "004388": 98, "002427": 98, "004381": 98, "002430": 98, "004373": 98, "002414": 98, "004396": 98, "002498": 98, "19": [98, 111, 122, 124, 127, 135], "004397": 98, "002439": [98, 136], "cv_predict": 98, "repeat0_p0": [98, 129], "repeat1_p0": [98, 129], "repeat2_p0": [98, 129], "repeat3_p0": 98, "_pipelin": 98, "0x7fef2d7d72b0": 98, "237": [98, 99, 106], "run_binary_inspect_fold": [98, 99], "460": 99, "auto_examples_02_inspect": 99, "Then": [101, 103, 111, 123, 130, 132, 137], "lya": 101, "paa": 101, "olivero": 101, "sami": [101, 111, 122, 125, 138], "hamdan": [101, 111, 122, 125, 138], "06": [101, 106, 112], "025": 101, "target_cr": [101, 103, 131], "target_pipeline_cr": [101, 125], "0x7fef2e2510c0": 101, "041": 101, "042": 101, "043": 101, "044": 101, "081": 101, "004469": [101, 136], "002308": 101, "004112": 101, "002260": 101, "004157": 101, "002226": 101, "004053": 101, "002234": 101, "004062": 101, "002241": 101, "51357151914367": 101, "071": [101, 108], "run_apply_to_target": [101, 108], "reduc": [102, 111, 137], "dimension": [102, 111, 124, 127, 137], "subset": [102, 127, 132], "georgio": 102, "antonopoulo": 102, "kaustubh": [102, 122, 138], "r": [102, 114, 122], "patil": [102, 122, 138], "assign": [102, 118], "pca1": 102, "pca2": 102, "process": [102, 127, 133, 136, 137], "pca_feats1": 102, "pca_feats2": 102, "872": [102, 103, 111], "__pca1": 102, "__pca2": 102, "873": 102, "__categor": [102, 131], "0x7fef2e2508e0": 102, "874": [102, 103, 111], "875": [102, 103], "876": 102, "877": [102, 103], "982": 102, "013948": 102, "005939": 102, "012808": 102, "005942": 102, "013033": 102, "005865": 102, "012858": 102, "005903": 102, "013137": 102, "005863": 102, "3107976743678922": 102, "untouch": 102, "data_processed1": 102, "pca_feats1__pca0": 102, "063175": 102, "133274": 102, "131461": 102, "039719": 102, "108111": 102, "075741": 102, "085907": 102, "054779": 102, "030464": 102, "001314": 102, "043401": 102, "033246": 102, "015491": 102, "098172": 102, "033216": 102, "032629": 102, "011824": 102, "015999": 102, "050783": 102, "032289": 102, "012577": 102, "034508": 102, "024993": 102, "067737": 102, "013504": 102, "045025": 102, "031454": 102, "020607": 102, "056003": 102, "010903": 102, "001078": 102, "data_processed2": 102, "pca_feats2__pca0": 102, "234716": 102, "012141": 102, "078784": 102, "006290": 102, "026190": 102, "341472": 102, "348168": 102, "269257": 102, "286067": 102, "309025": 102, "362": 102, "417": [102, 107, 108, 137], "run_example_pca_featset": [102, 108], "813": 103, "petal_width": [103, 107, 110, 127, 133, 136, 137], "__generated__": 103, "pick_column": 103, "815": 103, "__petal": [103, 107, 137], "816": 103, "0x7fef2d952950": 103, "generate_target": 103, "817": 103, "pickcolumn": 103, "__sepal": [103, 107, 137], "0x7fef2d9526b0": 103, "819": 103, "820": 103, "821": [103, 111], "wrapmodel": [103, 129], "copy_x": 103, "fit_intercept": 103, "822": 103, "target_gener": 103, "825": 103, "826": 103, "mapper": 103, "sepal_length__": 103, "sepal_width__": 103, "petal_length__": 103, "petal_width__": 103, "831": [103, 127, 135], "832": [103, 127, 135], "pick": 103, "846": [103, 104], "848": [103, 104], "849": [103, 104], "853": 103, "865": 103, "867": [103, 136], "868": [103, 136], "883": 103, "890": 103, "892": 103, "893": [103, 129], "368292": 103, "722797": 103, "087": [103, 108], "run_generate_target": [103, 108], "837": [104, 127], "attempt": [104, 105], "847": 104, "850": [104, 127], "5939164168576971": [104, 105], "gamma": [104, 105, 106, 127, 129], "But": [104, 110, 111, 126, 127, 129, 134, 136, 137], "rbf": [104, 105, 106, 127], "auto": [104, 127], "1e": [104, 105, 106, 127, 129, 130], "speed": [104, 105, 106], "905": 104, "906": 104, "001": [104, 105, 127, 129], "907": 104, "908": 104, "svm__c": [104, 105, 106, 127, 129, 130], "inner": [104, 105, 106, 127, 129, 130, 138], "909": 104, "svm__gamma": [104, 105, 106, 127], "910": 104, "set_column_typ": [104, 106, 127, 129, 136], "setcolumntyp": [104, 106, 127, 129, 136], "svc": [104, 106, 116, 127, 129, 136, 137], "911": 104, "912": 104, "946": 104, "7087109857168048": [104, 105], "best_params_": [104, 105, 106, 127], "best_estimator_": [104, 105], "_gamma": [104, 105], "336": [104, 108, 125], "run_hyperparameter_multiple_grid": [104, 108], "analyz": [105, 106, 129], "298": 105, "307": [105, 107, 124], "308": [105, 107], "310": [105, 107], "optim": [105, 121, 127, 129, 137], "find": [105, 106, 117, 127, 134], "best": [105, 106, 127, 137], "367": 105, "369": [105, 137], "370": [105, 137], "371": [105, 137], "602": 105, "588308940222183": 105, "much": [105, 126, 127, 129, 132], "explor": [105, 111, 129, 130], "too": [105, 127], "poli": 105, "649": 105, "650": 105, "651": 105, "652": [105, 111], "653": [105, 111], "257": 105, "lest": 105, "384": 105, "386": [105, 127, 135], "387": [105, 127], "388": [105, 127], "389": [105, 127], "5188855581026275": 105, "happen": [105, 129, 130], "939": [105, 136], "940": 105, "941": 105, "943": 105, "582": 105, "432": [105, 108, 110], "run_hyperparameter_tun": [105, 108], "logger": [106, 129, 130], "221": 106, "hyperparamt": 106, "creator1": [106, 127, 135], "1e3": 106, "uniform": [106, 116, 126, 127, 138], "creator2": [106, 127, 135], "1e1": 106, "n_iter": [106, 127], "230": 106, "231": [106, 138], "1000": 106, "232": [106, 125, 138], "real": [106, 125, 127, 129], "prior": [106, 127], "238": 106, "239": 106, "240": [106, 127], "249": [106, 138], "250": 106, "08": [106, 127], "759": 106, "6203007518796992": 106, "ordereddict": [106, 127], "193": 106, "62585277239563": 106, "909675645518994": 106, "493": [106, 108], "run_hyperparameter_tuning_bayessearch": [106, 108], "logist": [107, 116, 135, 137], "304": 107, "model_sep": 107, "model_pet": 107, "0x7fef2d8c6e60": 107, "0x7fef2d8c4ee0": 107, "311": 107, "312": 107, "313": 107, "416": [107, 137], "418": [107, 137], "85": 107, "871": [107, 108, 111], "run_stacked_model": [107, 108], "708": 108, "auto_examples_03_complex_model": 108, "relat": [109, 125, 133], "stratifiedbootstrap": 110, "203": 110, "ml": [110, 122], "classic": 110, "frequentist": 110, "contrast": 110, "gap": 110, "approach": [110, 124, 126, 127, 132, 137], "below": [110, 121, 124, 127], "2000": 110, "n_bootstrap": 110, "n_element": 110, "len": [110, 111, 125], "scores_ncr": 110, "209": 110, "210": 110, "next": [110, 121, 123, 131, 133, 137], "again": [110, 125, 126, 127, 129, 132, 137], "tell": [110, 125, 136], "confound_remov": [110, 111, 116, 125], "scores_cr": 110, "22": [110, 125], "428": 110, "__confound": [110, 125], "__featur": [110, 125], "429": 110, "430": 110, "433": 110, "easier": [110, 118, 137, 138], "df_ncr_metric": 110, "df_cr_metric": 110, "df_metric": 110, "933333": 110, "968889": 110, "948889": 110, "catplot": 110, "col": 110, "swarm": 110, "them": [110, 118, 120, 121, 122, 124, 126, 127, 135, 136, 137], "pair": 110, "systemat": 110, "df_diff_metr": 110, "whisker": 110, "box": [110, 122], "whi": 110, "axhlin": 110, "roc": 110, "auc": 110, "term": [110, 126, 133, 137], "mayb": [110, 135], "percentil": [110, 116], "amount": [110, 122, 129], "ncr_fi": 110, "cr_fi": 110, "feature_import": 110, "dodg": [110, 126], "diff_fi": 110, "axvlin": [110, 126], "122": [110, 112, 135, 138], "plot_confound_removal_classif": [110, 112], "most": [111, 121, 124, 125, 126, 129, 132, 137], "remove_confound": 111, "sometim": [111, 125, 129, 130, 131], "discuss": 111, "df_featur": 111, "furthermor": [111, 127], "put": [111, 125], "450": [111, 127], "0x7fef2df378e0": 111, "feature_nam": [111, 135], "451": [111, 127], "452": [111, 127], "453": [111, 127], "454": [111, 127], "616": 111, "df_deconfound": 111, "029271": 111, "057228": 111, "009658": 111, "046011": 111, "042050": 111, "024189": 111, "019424": 111, "012310": 111, "028194": 111, "005874": 111, "047538": 111, "015568": 111, "006874": 111, "012796": 111, "057488": 111, "024667": 111, "061639": 111, "082913": 111, "076494": 111, "039983": 111, "017885": 111, "047387": 111, "041423": 111, "013144": 111, "004736": 111, "036479": 111, "081307": 111, "007659": 111, "025897": 111, "013765": 111, "031358": 111, "052961": 111, "049135": 111, "029380": 111, "000071": 111, "013139": 111, "032449": 111, "032631": 111, "005510": 111, "021964": 111, "008781": 111, "012234": 111, "025295": 111, "037349": 111, "assum": [111, 126], "closer": [111, 116, 136], "achiev": [111, 125, 131, 136, 137], "0x7fef2dae8a60": 111, "df_transform": 111, "pca__pca2": 111, "pca__pca3": 111, "pca__pca4": 111, "pca__pca5": 111, "pca__pca6": 111, "pca__pca7": 111, "pca__pca8": 111, "014051": 111, "075715": 111, "017395": 111, "012591": 111, "046676": 111, "013408": 111, "034497": 111, "008604": 111, "002330": 111, "099883": 111, "062829": 111, "014516": 111, "013673": 111, "048058": 111, "010254": 111, "004124": 111, "024022": 111, "002075": 111, "029015": 111, "053253": 111, "032477": 111, "061933": 111, "049167": 111, "029565": 111, "042031": 111, "001197": 111, "002579": 111, "035162": 111, "001324": 111, "106807": 111, "028981": 111, "020850": 111, "023413": 111, "008421": 111, "006566": 111, "003545": 111, "003951": 111, "025445": 111, "000421": 111, "018411": 111, "039692": 111, "025022": 111, "043086": 111, "002095": 111, "000517": 111, "lastli": [111, 125], "036": 111, "022842": 111, "008429": 111, "429556": 111, "353": [111, 114], "89": [111, 114, 127], "022422": 111, "008393": 111, "522599": 111, "022298": 111, "008413": 111, "482681": 111, "354": [111, 114], "88": [111, 114], "022460": 111, "008360": 111, "426498": 111, "022445": 111, "008466": 111, "550248": 111, "run_return_confound": [111, 112], "749": [112, 127], "auto_examples_04_confound": 112, "extend": [113, 136], "variou": 113, "aspect": [113, 126, 137], "make_scor": 114, "register_scor": 114, "517": 114, "533": 114, "534": [114, 130], "535": [114, 137], "571": 114, "004549": 114, "002249": 114, "104359": 114, "004304": 114, "002194": 114, "44": [114, 129, 136], "861364": 114, "004254": 114, "002232": 114, "981407": 114, "004260": 114, "002227": 114, "956254": 114, "004242": 114, "002181": 114, "419886": 114, "264653948271885": 114, "thing": [114, 132, 137], "r2_corr": [114, 136], "578": 114, "579": 114, "617": 114, "test_neg_mean_absolute_error": 114, "test_r2_corr": 114, "264654": 114, "486498": 114, "take": [114, 126, 129, 137], "def": 114, "pearson_scor": 114, "squeez": 114, "668": [114, 127], "run_custom_scorers_regress": [114, 115], "auto_examples_05_custom": 115, "descript": [116, 117, 118, 137], "short": [116, 118, 125], "link": [116, 118, 134, 137, 138], "unit": [116, 122], "scaler_robust": 116, "median": 116, "iqr": 116, "robustscal": [116, 127], "scaler_minmax": 116, "minmaxscal": 116, "scaler_maxab": 116, "maxabsscal": 116, "scaler_norm": 116, "norm": 116, "scaler_quantil": 116, "robust": [116, 120], "quantiletransform": 116, "scaler_pow": 116, "gaussianis": 116, "powertransform": 116, "select_univari": 116, "genericunivariateselect": 116, "select_percentil": 116, "rank": 116, "selectpercentil": 116, "select_k": [116, 127], "selectkbest": [116, 127], "select_fdr": 116, "selectfdr": 116, "select_fpr": 116, "fpr": 116, "selectfpr": 116, "select_fw": 116, "fwe": 116, "selectfw": 116, "variancethreshold": 116, "drop_column": 116, "dropcolumn": 116, "change_column_typ": 116, "changecolumntyp": 116, "filtercolumn": 116, "princip": [116, 137], "svr": [116, 130, 131], "randomforestregressor": 116, "extratreesclassifi": 116, "extratreesregressor": 116, "adaboost": 116, "adaboostclassifi": 116, "adaboostregressor": 116, "bag": 116, "baggingclassifi": 116, "baggingregressor": 116, "gradientboost": 116, "gradient": 116, "boost": 116, "gradientboostingclassifi": 116, "gradientboostingregressor": 116, "stackingclassifi": [116, 130], "stackingregressor": [116, 130], "gauss": 116, "gaussianprocessclassifi": 116, "gaussianprocessregressor": 116, "logit": [116, 127, 135], "aka": 116, "maxent": 116, "logisticregress": [116, 127], "logitcv": 116, "logisticregressioncv": 116, "l2": [116, 127], "ridgeclassifi": 116, "ridgecv": 116, "built": [116, 122, 130, 135, 136, 137], "ridgeclassifiercv": 116, "sgd": 116, "minim": 116, "empir": [116, 126], "loss": [116, 125], "sgdclassifi": 116, "sgdregressor": 116, "nb_bernoulli": 116, "multivari": 116, "bernoulli": 116, "bernoullinb": 116, "nb_categor": 116, "categoricalnb": 116, "nb_complement": 116, "complementnb": 116, "nb_gaussian": 116, "gaussiannb": 116, "nb_multinomi": 116, "multinomi": 116, "multinomialnb": 116, "dynamicselect": [116, 138], "dummyclassifi": 116, "dummyregressor": 116, "meant": 117, "friendli": [117, 137], "come": [117, 118, 126, 129, 133, 137], "cost": 117, "potenti": [117, 125, 129], "These": [117, 120, 121, 124, 136], "therefor": [117, 121, 124, 125, 136, 137], "flag": [117, 118], "enabl": [117, 138], "disabl": 117, "config": 117, "disable_x_check": 117, "unmatch": 117, "think": [117, 125], "disable_xtypes_check": 117, "miss": [117, 138], "disable_x_verbos": 117, "disable_xtypes_verbos": 117, "fork": 118, "com": [118, 126, 132, 138], "juaml": 118, "repositori": 118, "never": [118, 137], "offici": [118, 121], "clone": 118, "virtual": [118, 121], "pip": [118, 120, 121], "branch": [118, 123], "refactor": [118, 138], "feat": 118, "prefix": 118, "git": [118, 123, 138], "checkout": [118, 123], "pre": [118, 121, 123, 138], "commit": [118, 123, 138], "hook": [118, 138], "help": [118, 121, 122, 125, 129, 135, 137], "regularli": 118, "On": [118, 125, 136], "save": [118, 137], "smaller": 118, "semant": 118, "wip": 118, "verifi": [118, 136], "suit": [118, 129], "tox": 118, "push": [118, 123], "open": 118, "displai": [118, 129, 135], "submit": 118, "templat": 118, "web": 118, "interfac": [118, 127, 130], "meet": 118, "directori": 118, "rare": 118, "circumst": 118, "coverag": 118, "decreas": 118, "report": 118, "codecov": 118, "usag": [118, 121, 132, 137, 138], "draft": [118, 123], "id": 118, "liner": [118, 135], "newsfrag": 118, "bug": [118, 138], "bugfix": 118, "enhanc": 118, "enh": 118, "improv": [118, 121], "miscellan": 118, "misc": 118, "record": 118, "101": 118, "content": 118, "typo": [118, 138], "intro": 118, "biggest": 118, "fan": 118, "yourself": 118, "contributor": 118, "inc": 118, "against": 118, "someon": [118, 126], "core": [118, 132, 135], "team": 118, "success": [118, 127, 132], "pytest": [118, 138], "intend": 118, "cd": 118, "_build": 118, "situat": 118, "clean": [118, 121], "rest": 118, "rst": [118, 123], "plot_": 118, "run_": 118, "block": 118, "comment": 118, "render": [118, 136], "emb": 118, "shall": [118, 126], "preced": 118, "bokeh": [120, 121, 138], "develop": [120, 121, 122, 123, 138], "usual": [120, 127, 137], "through": [120, 137], "manag": [120, 138], "conda": [120, 121], "forg": [120, 121], "standalon": 120, "applic": [120, 124, 125, 129], "browser": 120, "jupyter_bokeh": 120, "servabl": 120, "27": [121, 124, 125, 129], "statsmodel": 121, "nevertheless": [121, 137], "although": 121, "strongli": 121, "recommend": [121, 133], "environ": [121, 122, 136], "promin": 121, "venv": 121, "env": 121, "latest": [121, 123, 138], "often": [121, 125, 132, 137], "newest": 121, "sens": [121, 127], "aim": [121, 122, 137], "pypi": [121, 123], "via": [121, 123, 134], "relas": 121, "yet": [121, 133], "newer": 121, "unmaintain": 121, "skopt": [121, 127], "optuna_integr": 121, "orient": 122, "aml": 122, "institut": 122, "neurosci": [122, 124], "medicin": 122, "behaviour": [122, 127, 136], "inm": 122, "thought": [122, 137], "research": [122, 124, 125, 126], "simpler": 122, "abstract": 122, "power": [122, 129, 130], "minor": [122, 123], "flexibl": [122, 130], "video": 122, "tutori": 122, "offer": [122, 133], "essenti": [122, 129], "benefit": 122, "therebi": 122, "avoid": [122, 125, 126, 127, 138], "nice": [122, 133, 136, 137], "system": [122, 123], "accord": [122, 124, 126, 130, 138], "setup": [122, 134], "suggest": [122, 126], "deeper": [122, 129, 134, 135], "topic": [122, 126, 134, 135], "overview": [122, 129, 135, 137], "contribut": 122, "local": 122, "github": [122, 136, 138], "pull": [122, 123], "guidelin": 122, "write": [122, 137], "maintain": 122, "faq": 122, "issu": [122, 123, 126, 129, 138], "2023": 122, "2022": [122, 125], "scientif": 122, "public": 122, "vera": 122, "komey": 122, "free": 122, "arxiv": [122, 125], "octob": 122, "48550": 122, "2310": 122, "12568": 122, "heavili": 122, "reliant": 122, "cite": 122, "major": [123, 127], "micro": 123, "devn": 123, "distanc": 123, "setuptools_scm": 123, "plugin": 123, "tag": 123, "increment": [123, 137], "segment": 123, "publish": 123, "onc": [123, 129, 132, 134, 137], "mileston": 123, "reach": 123, "towncrier": 123, "proceed": [123, 137], "sync": 123, "rebas": 123, "changelog": 123, "properli": 123, "reflect": [123, 138], "whats_new": 123, "pr": 123, "merg": 123, "vx": 123, "setuptools_scm_debug": 123, "outdir": 123, "dist": 123, "bump": [123, 138], "vd": 123, "neuroimag": [124, 125], "typic": 124, "problemat": 124, "due": [124, 126, 127], "curs": 124, "especi": 124, "recent": 124, "propos": 124, "fluid": 124, "intellig": 124, "sustain": 124, "attent": 124, "nutshel": 124, "summar": 124, "subsequ": 124, "commonli": [124, 137], "principl": 124, "leverag": [124, 129], "workflow": [124, 129, 134, 137], "x_name": [124, 130], "feature_": [124, 125, 130], "cbpm_pipeline_cr": 124, "final_model": [124, 129], "180": 124, "feature_1": [124, 125, 130], "feature_2": [124, 125, 130], "feature_3": [124, 125, 130], "feature_4": [124, 125, 130], "feature_5": [124, 125, 130], "feature_6": [124, 125, 130], "feature_7": [124, 125, 130], "feature_8": [124, 125, 130], "feature_9": [124, 125, 130], "feature_10": [124, 125, 130], "feature_11": [124, 125, 130], "feature_12": [124, 125, 130], "feature_13": [124, 125, 130], "feature_14": [124, 125, 130], "feature_15": [124, 125, 130], "feature_16": [124, 125, 130], "feature_17": [124, 125, 130], "feature_18": [124, 125, 130], "feature_19": [124, 125, 130], "feature_20": [124, 130], "181": 124, "182": 124, "183": 124, "No": [124, 126], "rid": 124, "267": 124, "229": 124, "253": 124, "277": [124, 127], "301": 124, "326": 124, "customis": 124, "increas": 124, "328": 124, "329": 124, "330": 124, "cbpm__significance_threshold": 124, "noteworthi": 124, "sign": 124, "spearmanr": 124, "0x7fef3386e3b0": 124, "0x7fef55950a60": 124, "0x7fef5593f9b0": 124, "guess": 124, "spearman": 124, "xilin": 124, "mar": [124, 125], "emili": 124, "fingerprint": 124, "2015": 124, "nov": 124, "1664": 124, "71": 124, "rosenberg": 124, "monica": 124, "neuromark": 124, "whole": [124, 127], "jan": [124, 125], "165": 124, "ultim": 125, "world": [125, 129], "scenario": [125, 136, 137], "relationship": 125, "un": 125, "observ": 125, "similarli": [125, 129], "rather": 125, "jointli": 125, "prevent": [125, 127], "laid": 125, "rel": [125, 130], "littl": 125, "involv": 125, "simul": 125, "artifici": [125, 130, 137], "normal_dist_conf_on": 125, "normal_dist_conf_two": 125, "noise_conf_on": 125, "rand": [125, 126], "noise_conf_two": 125, "multipli": 125, "factor": 125, "confound_on": 125, "confound_two": 125, "prefer": 125, "human": 125, "readabl": 125, "confound_1": 125, "confound_2": 125, "my_target": 125, "distinguish": [125, 130, 137], "predictor": 125, "accordingli": [125, 132], "crucial": 125, "parametr": [125, 127, 133, 137], "169": [125, 127], "whose": 125, "170": [125, 127, 138], "feature_0": 125, "171": [125, 127], "173": [125, 127], "174": [125, 127], "024445": 125, "006885": 125, "786706": 125, "023729": 125, "006940": 125, "592156": 125, "023651": 125, "006856": 125, "722494": 125, "023553": 125, "006947": 125, "674188": 125, "023678": 125, "007094": 125, "570243": 125, "slightli": 125, "target_confound_remov": 125, "0x7fef2ded9cc0": 125, "insert": 125, "importantli": [125, 126, 129, 132, 133, 137], "0x7fef2dedbc40": 125, "337": 125, "338": 125, "339": 125, "340": 125, "006068": 125, "003976": 125, "253033": 125, "005934": 125, "003975": [125, 136], "059126": 125, "006394": 125, "003933": 125, "256962": 125, "006454": 125, "003920": 125, "096475": 125, "006090": 125, "003830": 125, "534386": 125, "reason": [125, 126], "further": [125, 127, 132], "consider": 125, "why": [125, 126, 127, 134], "mitig": 125, "bia": [125, 126], "accur": 125, "argu": 125, "appropri": 125, "valuabl": [125, 129, 132], "difficult": [125, 127], "challeng": 125, "ineffect": 125, "particular": [125, 129, 137], "fact": [125, 129], "collid": 125, "spuriou": 125, "evid": [125, 126], "leak": [125, 132], "bias": [125, 126], "care": [125, 137], "question": [125, 126], "thorough": 125, "strength": 125, "limit": 125, "techniqu": [125, 126, 127, 129], "rao": 125, "anil": 125, "presenc": 125, "volum": [125, 126], "april": 125, "49": 125, "snoek": 125, "luka": 125, "184": [125, 135], "januari": 125, "2019": 125, "741": [125, 127], "760": 125, "he": 125, "tong": 125, "neural": [125, 137], "network": [125, 137], "februari": 125, "2020": 125, "116276": 125, "practic": [125, 126], "knowledg": [125, 129], "discoveri": 125, "databas": 125, "scienc": [125, 132], "demo": 125, "track": 125, "2021": 125, "12461": 125, "chyzhyk": 125, "darya": 125, "biomark": 125, "gigasci": 125, "holmberg": 125, "mathia": 125, "jama": 125, "327": 125, "1282": 125, "1283": 125, "1001": [125, 135], "1820": 125, "2210": 125, "09232": 125, "revis": 125, "oct": 125, "mention": 126, "don": [126, 127], "almost": 126, "infinit": 126, "unbias": 126, "overestim": 126, "rememb": [126, 129, 136], "surpris": 126, "would": [126, 127, 133, 135, 137], "answer": 126, "imposs": 126, "bengio": 126, "grandvalet": 126, "colleagu": 126, "few": [126, 129, 132, 138], "word": [126, 127], "thumb": [126, 137], "compromis": 126, "loocv": 126, "holdout": 126, "taken": 126, "intens": 126, "unconclus": 126, "intuit": [126, 129, 135], "direct": [126, 127], "thread": 126, "extrem": 126, "choic": 126, "fun": 126, "begin": 126, "variant": 126, "solv": [126, 132], "shed": 126, "light": 126, "poorli": 126, "stratifiedkfold": [126, 136], "rescu": 126, "matter": [126, 132, 135], "quantiz": 126, "divid": 126, "histplot": 126, "train_set": 126, "test_set": 126, "shrink": [126, 129], "suptitl": 126, "gaussian": 126, "discrete_i": 126, "digit": 126, "kdeplot": 126, "layer": 126, "dash": 126, "repeatedcontinuousstratifiedkfold": [126, 138], "repeatedcontinuousstratifiedgroupkfold": 126, "jmlr": 126, "decemb": 126, "2004": 126, "1089": 126, "1105": 126, "stackexchang": 126, "61783": 126, "kohavi": 126, "ijcai": 126, "1137": 126, "1145": 126, "674": [126, 127], "flower": 127, "pprint": [127, 129, 136], "pretti": 127, "tolist": [127, 135], "who": 127, "common": [127, 132], "675": 127, "676": 127, "677": 127, "678": 127, "8099999999999999": 127, "718": [127, 135], "719": [127, 135], "720": 127, "721": 127, "etc": 127, "optimist": 127, "loop": 127, "761": 127, "scores_tun": 127, "model_tun": 127, "762": 127, "763": 127, "764": 127, "765": 127, "564": 127, "9100000000000001": 127, "tri": 127, "conclud": 127, "722": 127, "723": 127, "724": 127, "725": 127, "726": 127, "33": 127, "769": 127, "0001": 127, "390": 127, "391": 127, "38": [127, 130, 135], "915": 127, "39": [127, 130], "830": [127, 135], "select_k__k": 127, "833": [127, 135], "834": [127, 129, 135], "835": [127, 135], "concept": [127, 132], "receiv": 127, "veri": [127, 129, 130, 132, 133], "construct": 127, "_grid_": 127, "diment": 127, "lot": [127, 129], "consum": 127, "constraint": 127, "framework": 127, "286": 127, "287": 127, "288": 127, "59": 127, "780": 127, "271": [127, 129], "272": [127, 129], "275": 127, "276": 127, "77140446796582": 127, "022636153281629743": 127, "accept": 127, "241": 127, "242": 127, "243": 127, "246": 127, "9099999999999999": 127, "8975984906619887": 127, "028707916525659204": 127, "shown": 127, "modifi": [127, 137], "exemplarili": 127, "class_weight": [127, 129], "balanc": 127, "svm__class_weight": 127, "trial": 127, "create_studi": 127, "maxim": 127, "study_nam": 127, "load_if_exist": 127, "0x7fef2d0ba1d0": 127, "1195": 127, "experimentalwarn": 127, "v0": 127, "125": 127, "new_object": 127, "new_object_param": 127, "456": 127, "9299999999999999": 127, "39483292498485895": 127, "02383437046558172": 127, "toolbox": 127, "with_mean": [127, 129, 137], "zscore__with_mean": 127, "777": 127, "categoricaldistribut": 127, "floatdistribut": 127, "intdistribut": 127, "778": 127, "pca__n_compon": 127, "779": 127, "those": [127, 132], "unnecessari": 127, "model1": 127, "781": 127, "782": 127, "783": 127, "784": 127, "786": 127, "787": 127, "93": 127, "forc": 127, "repat": 127, "model2": 127, "455": 127, "457": 127, "377": 127, "inde": [127, 136], "equival": 127, "param_grid": [127, 129], "stop": 127, "creator3": [127, 135], "max_depth": [127, 130], "creator4": 127, "penalti": 127, "l1": 127, "dual": 127, "solver": 127, "liblinear": 127, "model3": 127, "167": 127, "168": [127, 138], "model__c": 127, "model__gamma": 127, "172": 127, "model__max_depth": 127, "model__penalti": 127, "175": [127, 135], "176": 127, "177": 127, "179": 127, "32": 127, "9200000000000002": 127, "beat": 127, "gain": 129, "insight": 129, "impact": 129, "abil": 129, "critic": 129, "influenc": 129, "deploy": 129, "focu": [129, 133], "anomali": 129, "toi": [129, 130], "plai": 129, "penguin": 129, "penguins_df": 129, "island": 129, "queri": 129, "chinstrap": 129, "dropna": 129, "adeli": 129, "gentoo": 129, "467": 129, "fairli": 129, "geomspac": [129, 130], "1e2": [129, 130], "894": 129, "notic": [129, 137], "895": 129, "bill_length_mm": 129, "bill_depth_mm": 129, "flipper_length_mm": 129, "body_mass_g": 129, "896": 129, "898": 129, "899": 129, "151": [129, 138], "123": 129, "079": 129, "quick": 129, "error_scor": 129, "jucolumntransform": 129, "with_std": 129, "break_ti": 129, "cache_s": 129, "coef0": 129, "decision_function_shap": 129, "ovr": 129, "max_it": 129, "tol": 129, "estimator__memori": 129, "estimator__set_column_typ": 129, "estimator__set_column_types__x_typ": 129, "estimator__set_column_types__row_select_col_typ": 129, "estimator__set_column_types__row_select_v": 129, "estimator__step": 129, "estimator__svm": 129, "estimator__svm__c": 129, "estimator__svm__apply_to": 129, "estimator__svm__break_ti": 129, "estimator__svm__cache_s": 129, "estimator__svm__class_weight": 129, "estimator__svm__coef0": 129, "estimator__svm__decision_function_shap": 129, "estimator__svm__degre": 129, "estimator__svm__gamma": 129, "estimator__svm__kernel": 129, "estimator__svm__max_it": 129, "estimator__svm__model": 129, "estimator__svm__needed_typ": 129, "estimator__svm__prob": 129, "estimator__svm__random_st": 129, "estimator__svm__shrink": 129, "estimator__svm__tol": 129, "estimator__svm__verbos": 129, "estimator__verbos": 129, "estimator__zscor": 129, "estimator__zscore__apply_to": 129, "estimator__zscore__copi": 129, "estimator__zscore__nam": 129, "estimator__zscore__needed_typ": 129, "estimator__zscore__row_select_col_typ": 129, "estimator__zscore__row_select_v": 129, "estimator__zscore__transform": 129, "estimator__zscore__with_mean": 129, "estimator__zscore__with_std": 129, "pre_dispatch": 129, "refit": 129, "get_fitted_param": 129, "set_column_types__column_mapper_": 129, "bill_depth_mm__": 129, "bill_length_mm__": 129, "body_mass_g__": 129, "flipper_length_mm__": 129, "set_column_types__feature_names_in_": 129, "svm__model_": 129, "zscore__column_transformer_": 129, "remaind": 129, "passthrough": 129, "make_type_selector": 129, "0x7fef2d98dbd0": 129, "verbose_feature_names_out": 129, "zscore__feature_names_in_": 129, "zscore__mean_": 129, "70291971": 129, "83613139": 129, "202": 129, "17883212": 129, "4318": 129, "06569343": 129, "zscore__n_features_in_": 129, "zscore__n_samples_seen_": 129, "zscore__scale_": 129, "18607683": 129, "00973207": 129, "02045287": 129, "40628575": 129, "zscore__var_": 129, "68953929e": 129, "03902299e": 129, "25614004e": 129, "96233850e": 129, "somewhat": [129, 130], "structur": [129, 133], "made": [129, 134, 135], "handi": [129, 133, 137], "fold_predict": 129, "repeat8_p0": 129, "repeat9_p0": 129, "269": 129, "270": 129, "c_valu": 129, "fold_inspector": 129, "fold_model": 129, "realiz": 129, "ever": 129, "address": 129, "aris": 129, "serv": 129, "asset": 129, "transpar": [129, 132], "reliabl": 129, "capabl": [129, 130, 138], "navig": 129, "har": 129, "customiz": 130, "cours": 130, "mind": 130, "arbitrari": [130, 136], "model_1": [130, 135], "536": [130, 137], "537": [130, 137], "00000000e": 130, "78255940e": 130, "74263683e": 130, "15443469e": 130, "99484250e": 130, "66810054e": 130, "64158883e": 130, "29154967e": 130, "59381366e": 130, "0x7fef2d4ca170": 130, "min_samples_leaf": 130, "min_samples_split": 130, "538": [130, 137], "0x7fef2d4c8c10": 130, "0x7fef2d4c8460": 130, "539": [130, 137], "540": [130, 137], "541": [130, 137], "542": [130, 137], "543": [130, 137], "rf__max_depth": 130, "rf__min_samples_leaf": 130, "rf__min_samples_split": 130, "544": [130, 137], "680": 130, "681": 130, "688": 130, "desir": [130, 137], "type1": 130, "type2": 130, "type1_": 130, "type2_": 130, "970": 130, "971": [130, 131], "__type1": 130, "0x7fef2d98d720": 130, "972": [130, 131], "__type2": 130, "0x7fef2d4c9de0": 130, "973": [130, 131], "type1_1": 130, "type1_2": 130, "type1_3": 130, "type1_4": 130, "type1_5": 130, "type1_6": 130, "type1_7": 130, "type1_8": 130, "type1_9": 130, "type1_10": 130, "type2_1": 130, "type2_2": 130, "type2_3": 130, "type2_4": 130, "type2_5": 130, "type2_6": 130, "type2_7": 130, "type2_8": 130, "type2_9": 130, "type2_10": 130, "979": 130, "887": 130, "flexibli": 130, "Of": 130, "144": [130, 137], "cover": [131, 133, 137], "far": [131, 133, 136, 137], "conist": 131, "manner": [131, 132, 133, 135, 137], "clear": 131, "target_jutargetpipelin": 131, "0x7fef2d63eb60": 131, "009875": 131, "003239": [131, 137], "008629": 131, "003160": 131, "009157": 131, "003180": 131, "008991": 131, "003168": 131, "009070": 131, "003153": 131, "overal": 131, "093": 131, "goal": 132, "beyond": 132, "exact": 132, "domingo": 132, "2012": 132, "resourc": 132, "effici": 132, "disadvantag": 132, "small": 132, "unstabl": 132, "overcom": 132, "accident": 132, "quickli": 132, "obviou": 132, "straightforward": [132, 137], "mistak": 132, "www": 132, "sciencedirect": 132, "articl": 132, "pii": 132, "s105381191630595x": 132, "natur": 132, "s41746": 132, "022": 132, "00592": 132, "s1053811917305311": 132, "cross_valid": 132, "commun": 133, "known": [133, 137], "capac": 133, "colum": 133, "manipul": 133, "anyth": [133, 136], "meaning": 133, "hundr": 133, "thousand": 133, "saw": [133, 135, 136, 137], "advanc": 133, "004": 133, "backbon": 134, "magic": 134, "goe": 134, "utmost": 134, "glanc": [134, 136], "chapter": 134, "familiar": 134, "along": 134, "fundament": 134, "essenc": 134, "click": 134, "fanci": 134, "stuff": 134, "decent": 135, "benchmark": 135, "enough": 135, "tediou": 135, "sound": 135, "switch": 135, "breast": 135, "cancer": 135, "malign": 135, "benign": 135, "load_breast_canc": 135, "radiu": 135, "textur": 135, "perimet": 135, "area": 135, "worst": 135, "concav": 135, "symmetri": 135, "fractal": 135, "dimens": 135, "2654": 135, "4601": 135, "11890": 135, "132": 135, "1326": 135, "1860": 135, "2750": 135, "08902": 135, "69": 135, "130": 135, "1203": 135, "2430": 135, "3613": 135, "08758": 135, "2575": 135, "6638": 135, "17300": 135, "1297": 135, "1625": 135, "2364": 135, "07678": 135, "cv_splitter": [135, 136], "smooth": 135, "compact": 135, "569": 135, "357": 135, "212": 135, "994": 135, "995": 135, "996": 135, "997": 135, "998": 135, "913": 135, "917": 135, "920": [135, 136], "pairwis": 135, "neither": 135, "nor": 135, "946304": 135, "083461": 135, "250382": 135, "140882": 135, "891066": 135, "285373": 135, "048138": 135, "144413": 135, "361847": 135, "206356": 135, "619069": 135, "029499": 135, "977110": 135, "084010": 135, "306544": 135, "919632": 135, "dive": 135, "curiou": 135, "754": 136, "755": 136, "756": 136, "757": 136, "758": 136, "005104": 136, "002481": 136, "004625": 136, "002451": 136, "004538": 136, "004517": 136, "002482": 136, "004476": 136, "002449": 136, "933": 136, "overfit": 136, "804": 136, "805": 136, "806": 136, "807": 136, "004768": 136, "004550": 136, "002470": 136, "004557": 136, "002491": 136, "004575": 136, "002489": 136, "004622": 136, "002437": 136, "train_scor": 136, "cryptic": 136, "worri": 136, "doesn": 136, "866": 136, "869": 136, "004838": 136, "002487": 136, "004582": 136, "002479": 136, "004626": 136, "002485": 136, "004548": 136, "004541": 136, "002460": 136, "x27": 136, "rerun": 136, "cell": 136, "represent": 136, "trust": 136, "unabl": 136, "nbviewer": 136, "nbsp": 136, "pipelineifittedpipelin": 136, "setcolumntypessetcolumntyp": 136, "standardscalerstandardscal": 136, "svcsvc": 136, "didn": 136, "got": 136, "five": 136, "back": 136, "ourselv": 136, "fourth": 136, "936": 136, "937": 136, "938": 136, "004770": 136, "002432": 136, "7449876d309382acfef94df9d102aa76": 136, "002458": 136, "004585": 136, "004521": 136, "002445": 136, "004499": 136, "002466": 136, "004554": 136, "002433": 136, "002404": 136, "004491": 136, "002455": 136, "004495": 136, "002417": [136, 137], "assumpt": 136, "list_scor": 136, "adjusted_mutual_info_scor": 136, "adjusted_rand_scor": 136, "average_precis": 136, "completeness_scor": 136, "explained_vari": 136, "f1": 136, "f1_macro": 136, "f1_micro": 136, "f1_sampl": 136, "f1_weight": 136, "fowlkes_mallows_scor": 136, "homogeneity_scor": 136, "jaccard": 136, "jaccard_macro": 136, "jaccard_micro": 136, "jaccard_sampl": 136, "jaccard_weight": 136, "matthews_corrcoef": 136, "max_error": 136, "mutual_info_scor": 136, "neg_brier_scor": 136, "neg_log_loss": 136, "neg_mean_absolute_percentage_error": 136, "neg_mean_gamma_devi": 136, "neg_mean_poisson_devi": 136, "neg_mean_squared_error": 136, "neg_mean_squared_log_error": 136, "neg_median_absolute_error": 136, "neg_negative_likelihood_ratio": 136, "neg_root_mean_squared_error": 136, "neg_root_mean_squared_log_error": 136, "normalized_mutual_info_scor": 136, "positive_likelihood_ratio": 136, "precision_macro": 136, "precision_micro": 136, "precision_sampl": 136, "precision_weight": 136, "rand_scor": 136, "recal": 136, "recall_macro": 136, "recall_micro": 136, "recall_sampl": 136, "recall_weight": 136, "roc_auc_ovo": 136, "roc_auc_ovo_weight": 136, "roc_auc_ovr": 136, "roc_auc_ovr_weight": 136, "top_k_accuraci": 136, "v_measure_scor": 136, "r_corr": 136, "051": 136, "052": 136, "053": 136, "054": 136, "004831": 136, "004076": 136, "004558": 136, "004008": 136, "004593": 136, "003998": 136, "004569": 136, "004689": 136, "003977": 136, "003943": 136, "003960": 136, "004564": 136, "003944": 136, "004611": 136, "004001": 136, "004573": 136, "003993": 136, "448": 136, "autom": 137, "pipe": 137, "fed": 137, "safe": 137, "333": 137, "334": 137, "335": 137, "003131": 137, "001692": 137, "002862": 137, "001638": 137, "002846": 137, "001610": 137, "002802": 137, "001675": 137, "002814": 137, "001659": 137, "voil\u00e0": 137, "resembl": 137, "scaler": 137, "004671": 137, "002438": 137, "004507": 137, "002452": 137, "004496": 137, "004616": 137, "004440": 137, "002419": 137, "decomposit": 137, "previous": 137, "419": 137, "005897": 137, "003247": 137, "005687": 137, "003177": 137, "005600": 137, "003202": 137, "005621": 137, "003252": 137, "005831": 137, "opaqu": 137, "simplifi": 137, "neat": 137, "475": 137, "476": 137, "477": 137, "478": 137, "479": 137, "005824": 137, "003245": 137, "005947": 137, "003280": 137, "005711": 137, "003229": 137, "005704": 137, "003235": 137, "005668": 137, "003214": 137, "awesom": 137, "prepreprocess": 137, "jump": 137, "aren": 137, "shouldn": 137, "ye": 137, "turn": 137, "learnt": 137, "experi": 137, "heurist": 137, "rate": 137, "sigma": 137, "sai": 137, "basi": 137, "comma": 137, "wonder": 137, "besid": 137, "definit": 137, "pca_1": 137, "017582": 137, "007370": 137, "017126": 137, "007303": 137, "016806": 137, "007443": 137, "017074": 137, "007339": 137, "017241": 137, "007618": 137, "boser": 137, "guyon": 137, "vapnik": 137, "margin": 137, "colt": 137, "92": 137, "fifth": 137, "annual": 137, "workshop": 137, "theori": 137, "1992": 137, "jul": 137, "356": 137, "older": 138, "fede": 138, "268": 138, "integr": 138, "118": 138, "265": 138, "dant": 138, "culaciati": 138, "258": 138, "hyperparemt": 138, "255": 138, "262": 138, "260": 138, "hyperparmet": 138, "action": 138, "mark": 138, "stale": 138, "synchon": 138, "mandal": 138, "224": 138, "244": 138, "lazi": 138, "fixtur": 138, "251": 138, "skip": 138, "245": 138, "header": 138, "languag": 138, "snippet": 138, "adopt": 138, "ruff": 138, "linter": 138, "codebas": 138, "codespel": 138, "surround": 138, "146": 138, "instruct": 138, "94": 138, "108": 138, "multiprocess": 138, "nos": 138, "extendeddataframepipelin": 138, "tranform_until": 138, "63": 138, "minimum": 138, "face": 138, "create_pipelin": 138, "register_model": 138, "105": 138}, "objects": {"julearn": [[1, 0, 1, "", "PipelineCreator"], [2, 0, 1, "", "TargetPipelineCreator"], [73, 3, 0, "-", "api"], [0, 3, 0, "-", "base"], [72, 3, 0, "-", "inspect"], [74, 3, 0, "-", "model_selection"], [75, 3, 0, "-", "models"], [76, 3, 0, "-", "pipeline"], [77, 3, 0, "-", "prepare"], [33, 5, 1, "", "run_cross_validation"], [78, 3, 0, "-", "scoring"], [79, 3, 0, "-", "stats"], [80, 3, 0, "-", "transformers"], [81, 3, 0, "-", "utils"], [82, 3, 0, "-", "viz"]], "julearn.PipelineCreator": [[1, 1, 1, "", "__init__"], [1, 1, 1, "", "add"], [1, 1, 1, "", "copy"], [1, 1, 1, "", "from_list"], [1, 1, 1, "", "has_model"], [1, 2, 1, "", "no_model_ok"], [1, 1, 1, "", "split"], [1, 2, 1, "", "steps"], [1, 1, 1, "", "to_pipeline"]], "julearn.TargetPipelineCreator": [[2, 1, 1, "", "__init__"], [2, 1, 1, "", "add"], [2, 1, 1, "", "to_pipeline"]], "julearn.base": [[3, 0, 1, "", "ColumnTypes"], [4, 4, 1, "", "ColumnTypesLike"], [5, 0, 1, "", "JuBaseEstimator"], [6, 0, 1, "", "JuTransformer"], [7, 0, 1, "", "WrapModel"], [8, 5, 1, "", "change_column_type"], [9, 5, 1, "", "ensure_column_types"], [10, 5, 1, "", "get_column_type"], [11, 5, 1, "", "make_type_selector"]], "julearn.base.ColumnTypes": [[3, 1, 1, "", "__init__"], [3, 1, 1, "", "add"], [3, 1, 1, "", "copy"], [3, 1, 1, "", "filter"], [3, 2, 1, "", "pattern"], [3, 1, 1, "", "to_type_selector"]], "julearn.base.JuBaseEstimator": [[5, 1, 1, "", "__init__"], [5, 1, 1, "", "filter_columns"], [5, 1, 1, "", "get_apply_to"], [5, 1, 1, "", "get_metadata_routing"], [5, 1, 1, "", "get_needed_types"], [5, 1, 1, "", "get_params"], [5, 1, 1, "", "set_params"]], "julearn.base.JuTransformer": [[6, 1, 1, "", "__init__"], [6, 1, 1, "", "filter_columns"], [6, 1, 1, "", "fit"], [6, 1, 1, "", "fit_transform"], [6, 1, 1, "", "get_apply_to"], [6, 1, 1, "", "get_metadata_routing"], [6, 1, 1, "", "get_needed_types"], [6, 1, 1, "", "get_params"], [6, 1, 1, "", "set_output"], [6, 1, 1, "", "set_params"]], "julearn.base.WrapModel": [[7, 1, 1, "", "__init__"], [7, 2, 1, "", "classes_"], [7, 1, 1, "", "decision_function"], [7, 1, 1, "", "filter_columns"], [7, 1, 1, "", "fit"], [7, 1, 1, "", "get_apply_to"], [7, 1, 1, "", "get_metadata_routing"], [7, 1, 1, "", "get_needed_types"], [7, 1, 1, "", "get_params"], [7, 1, 1, "", "predict"], [7, 1, 1, "", "predict_log_proba"], [7, 1, 1, "", "predict_proba"], [7, 1, 1, "", "score"], [7, 1, 1, "", "set_params"]], "julearn.inspect": [[12, 0, 1, "", "FoldsInspector"], [13, 0, 1, "", "Inspector"], [14, 5, 1, "", "preprocess"]], "julearn.inspect.FoldsInspector": [[12, 1, 1, "", "__init__"], [12, 1, 1, "", "decision_function"], [12, 1, 1, "", "predict"], [12, 1, 1, "", "predict_log_proba"], [12, 1, 1, "", "predict_proba"]], "julearn.inspect.Inspector": [[13, 1, 1, "", "__init__"], [13, 2, 1, "", "folds"], [13, 2, 1, "", "model"]], "julearn.model_selection": [[15, 0, 1, "", "ContinuousStratifiedGroupKFold"], [16, 0, 1, "", "ContinuousStratifiedKFold"], [17, 0, 1, "", "RepeatedContinuousStratifiedGroupKFold"], [18, 0, 1, "", "RepeatedContinuousStratifiedKFold"], [19, 0, 1, "", "StratifiedBootstrap"], [20, 5, 1, "", "get_searcher"], [21, 5, 1, "", "list_searchers"], [22, 5, 1, "", "register_searcher"], [23, 5, 1, "", "reset_searcher_register"]], "julearn.model_selection.ContinuousStratifiedGroupKFold": [[15, 1, 1, "", "__init__"], [15, 1, 1, "", "get_metadata_routing"], [15, 1, 1, "", "get_n_splits"], [15, 1, 1, "", "set_split_request"], [15, 1, 1, "", "split"]], "julearn.model_selection.ContinuousStratifiedKFold": [[16, 1, 1, "", "__init__"], [16, 1, 1, "", "get_metadata_routing"], [16, 1, 1, "", "get_n_splits"], [16, 1, 1, "", "split"]], "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold": [[17, 1, 1, "", "__init__"], [17, 1, 1, "", "get_metadata_routing"], [17, 1, 1, "", "get_n_splits"], [17, 1, 1, "", "split"]], "julearn.model_selection.RepeatedContinuousStratifiedKFold": [[18, 1, 1, "", "__init__"], [18, 1, 1, "", "get_metadata_routing"], [18, 1, 1, "", "get_n_splits"], [18, 1, 1, "", "split"]], "julearn.model_selection.StratifiedBootstrap": [[19, 1, 1, "", "__init__"], [19, 1, 1, "", "get_metadata_routing"], [19, 1, 1, "", "get_n_splits"], [19, 1, 1, "", "split"]], "julearn.models": [[75, 3, 0, "-", "dynamic"], [25, 5, 1, "", "get_model"], [26, 5, 1, "", "list_models"], [27, 5, 1, "", "register_model"], [28, 5, 1, "", "reset_model_register"]], "julearn.models.dynamic": [[24, 0, 1, "", "DynamicSelection"]], "julearn.models.dynamic.DynamicSelection": [[24, 1, 1, "", "__init__"], [24, 1, 1, "", "fit"], [24, 1, 1, "", "get_metadata_routing"], [24, 1, 1, "", "get_params"], [24, 1, 1, "", "predict"], [24, 1, 1, "", "predict_proba"], [24, 1, 1, "", "score"], [24, 1, 1, "", "set_params"], [24, 1, 1, "", "set_score_request"]], "julearn.pipeline": [[29, 0, 1, "", "JuTargetPipeline"]], "julearn.pipeline.JuTargetPipeline": [[29, 1, 1, "", "__init__"], [29, 1, 1, "", "can_inverse_transform"], [29, 1, 1, "", "fit"], [29, 1, 1, "", "fit_transform"], [29, 1, 1, "", "inverse_transform"], [29, 2, 1, "", "needed_types"], [29, 1, 1, "", "transform"]], "julearn.pipeline.pipeline_creator": [[30, 0, 1, "", "Step"]], "julearn.pipeline.pipeline_creator.Step": [[30, 1, 1, "", "__init__"], [30, 4, 1, "", "apply_to"], [30, 4, 1, "", "estimator"], [30, 4, 1, "", "name"], [30, 4, 1, "", "needed_types"], [30, 4, 1, "", "params_to_tune"], [30, 4, 1, "", "row_select_col_type"], [30, 4, 1, "", "row_select_vals"]], "julearn.prepare": [[31, 5, 1, "", "check_consistency"], [32, 5, 1, "", "prepare_input_data"]], "julearn.scoring": [[34, 5, 1, "", "check_scoring"], [35, 5, 1, "", "get_scorer"], [36, 5, 1, "", "list_scorers"], [78, 3, 0, "-", "metrics"], [39, 5, 1, "", "register_scorer"], [40, 5, 1, "", "reset_scorer_register"]], "julearn.scoring.metrics": [[37, 5, 1, "", "r2_corr"], [38, 5, 1, "", "r_corr"]], "julearn.stats": [[41, 5, 1, "", "corrected_ttest"]], "julearn.transformers": [[42, 0, 1, "", "CBPM"], [43, 0, 1, "", "ChangeColumnTypes"], [44, 0, 1, "", "DropColumns"], [45, 0, 1, "", "FilterColumns"], [46, 0, 1, "", "JuColumnTransformer"], [47, 0, 1, "", "SetColumnTypes"], [49, 5, 1, "", "get_transformer"], [50, 5, 1, "", "list_transformers"], [51, 5, 1, "", "register_transformer"], [52, 5, 1, "", "reset_transformer_register"], [80, 3, 0, "-", "target"]], "julearn.transformers.CBPM": [[42, 1, 1, "", "__init__"], [42, 1, 1, "", "aggregate"], [42, 1, 1, "", "fit"], [42, 1, 1, "", "fit_transform"], [42, 1, 1, "", "get_feature_names_out"], [42, 1, 1, "", "get_metadata_routing"], [42, 1, 1, "", "get_params"], [42, 1, 1, "", "set_output"], [42, 1, 1, "", "set_params"], [42, 1, 1, "", "transform"]], "julearn.transformers.ChangeColumnTypes": [[43, 1, 1, "", "__init__"], [43, 1, 1, "", "filter_columns"], [43, 1, 1, "", "fit"], [43, 1, 1, "", "fit_transform"], [43, 1, 1, "", "get_apply_to"], [43, 1, 1, "", "get_feature_names_out"], [43, 1, 1, "", "get_metadata_routing"], [43, 1, 1, "", "get_needed_types"], [43, 1, 1, "", "get_params"], [43, 1, 1, "", "set_output"], [43, 1, 1, "", "set_params"], [43, 1, 1, "", "transform"]], "julearn.transformers.DropColumns": [[44, 1, 1, "", "__init__"], [44, 1, 1, "", "filter_columns"], [44, 1, 1, "", "fit"], [44, 1, 1, "", "fit_transform"], [44, 1, 1, "", "get_apply_to"], [44, 1, 1, "", "get_feature_names_out"], [44, 1, 1, "", "get_metadata_routing"], [44, 1, 1, "", "get_needed_types"], [44, 1, 1, "", "get_params"], [44, 1, 1, "", "get_support"], [44, 1, 1, "", "set_output"], [44, 1, 1, "", "set_params"], [44, 1, 1, "", "transform"]], "julearn.transformers.FilterColumns": [[45, 1, 1, "", "__init__"], [45, 1, 1, "", "filter_columns"], [45, 1, 1, "", "fit"], [45, 1, 1, "", "fit_transform"], [45, 1, 1, "", "get_apply_to"], [45, 1, 1, "", "get_feature_names_out"], [45, 1, 1, "", "get_metadata_routing"], [45, 1, 1, "", "get_needed_types"], [45, 1, 1, "", "get_params"], [45, 1, 1, "", "set_output"], [45, 1, 1, "", "set_params"], [45, 1, 1, "", "transform"]], "julearn.transformers.JuColumnTransformer": [[46, 1, 1, "", "__init__"], [46, 1, 1, "", "filter_columns"], [46, 1, 1, "", "fit"], [46, 1, 1, "", "fit_transform"], [46, 1, 1, "", "get_apply_to"], [46, 1, 1, "", "get_feature_names_out"], [46, 1, 1, "", "get_metadata_routing"], [46, 1, 1, "", "get_needed_types"], [46, 1, 1, "", "get_params"], [46, 1, 1, "", "set_output"], [46, 1, 1, "", "set_params"], [46, 1, 1, "", "transform"]], "julearn.transformers.SetColumnTypes": [[47, 1, 1, "", "__init__"], [47, 1, 1, "", "filter_columns"], [47, 1, 1, "", "fit"], [47, 1, 1, "", "fit_transform"], [47, 1, 1, "", "get_apply_to"], [47, 1, 1, "", "get_feature_names_out"], [47, 1, 1, "", "get_metadata_routing"], [47, 1, 1, "", "get_needed_types"], [47, 1, 1, "", "get_params"], [47, 1, 1, "", "set_output"], [47, 1, 1, "", "set_params"], [47, 1, 1, "", "transform"]], "julearn.transformers.confound_remover": [[48, 0, 1, "", "ConfoundRemover"]], "julearn.transformers.confound_remover.ConfoundRemover": [[48, 1, 1, "", "__init__"], [48, 1, 1, "", "filter_columns"], [48, 1, 1, "", "fit"], [48, 1, 1, "", "fit_transform"], [48, 1, 1, "", "get_apply_to"], [48, 1, 1, "", "get_feature_names_out"], [48, 1, 1, "", "get_metadata_routing"], [48, 1, 1, "", "get_needed_types"], [48, 1, 1, "", "get_params"], [48, 1, 1, "", "get_support"], [48, 1, 1, "", "set_output"], [48, 1, 1, "", "set_params"], [48, 1, 1, "", "transform"]], "julearn.transformers.target": [[53, 0, 1, "", "JuTargetTransformer"], [54, 0, 1, "", "JuTransformedTargetModel"], [55, 0, 1, "", "TargetConfoundRemover"], [56, 0, 1, "", "TransformedTargetWarning"], [57, 5, 1, "", "get_target_transformer"], [58, 5, 1, "", "list_target_transformers"], [59, 5, 1, "", "register_target_transformer"], [60, 5, 1, "", "reset_target_transformer_register"]], "julearn.transformers.target.JuTargetTransformer": [[53, 1, 1, "", "__init__"], [53, 1, 1, "", "fit"], [53, 1, 1, "", "fit_transform"], [53, 1, 1, "", "transform"]], "julearn.transformers.target.JuTransformedTargetModel": [[54, 1, 1, "", "__init__"], [54, 1, 1, "", "can_inverse_transform"], [54, 2, 1, "", "classes_"], [54, 1, 1, "", "decision_function"], [54, 1, 1, "", "filter_columns"], [54, 1, 1, "", "fit"], [54, 1, 1, "", "get_apply_to"], [54, 1, 1, "", "get_metadata_routing"], [54, 1, 1, "", "get_needed_types"], [54, 1, 1, "", "get_params"], [54, 1, 1, "", "predict"], [54, 1, 1, "", "predict_proba"], [54, 1, 1, "", "score"], [54, 1, 1, "", "set_params"], [54, 1, 1, "", "transform_target"]], "julearn.transformers.target.TargetConfoundRemover": [[55, 1, 1, "", "__init__"], [55, 1, 1, "", "fit"], [55, 1, 1, "", "fit_transform"], [55, 2, 1, "", "needed_types"], [55, 1, 1, "", "transform"]], "julearn.transformers.target.TransformedTargetWarning": [[56, 1, 1, "", "__init__"], [56, 4, 1, "", "args"], [56, 1, 1, "", "with_traceback"]], "julearn.utils": [[61, 5, 1, "", "configure_logging"], [62, 4, 1, "", "logger"], [63, 5, 1, "", "raise_error"], [81, 3, 0, "-", "typing"], [69, 5, 1, "", "warn_with_log"]], "julearn.utils.typing": [[64, 4, 1, "", "EstimatorLike"], [65, 0, 1, "", "EstimatorLikeFit1"], [66, 0, 1, "", "EstimatorLikeFit2"], [67, 0, 1, "", "EstimatorLikeFity"], [68, 0, 1, "", "JuEstimatorLike"]], "julearn.utils.typing.EstimatorLikeFit1": [[65, 1, 1, "", "__init__"], [65, 1, 1, "", "fit"], [65, 1, 1, "", "get_params"], [65, 1, 1, "", "set_params"]], "julearn.utils.typing.EstimatorLikeFit2": [[66, 1, 1, "", "__init__"], [66, 1, 1, "", "fit"], [66, 1, 1, "", "get_params"], [66, 1, 1, "", "set_params"]], "julearn.utils.typing.EstimatorLikeFity": [[67, 1, 1, "", "__init__"], [67, 1, 1, "", "fit"], [67, 1, 1, "", "get_params"], [67, 1, 1, "", "set_params"]], "julearn.utils.typing.JuEstimatorLike": [[68, 1, 1, "", "__init__"], [68, 1, 1, "", "fit"], [68, 1, 1, "", "get_apply_to"], [68, 1, 1, "", "get_needed_types"], [68, 1, 1, "", "get_params"], [68, 1, 1, "", "set_params"]], "julearn.viz": [[70, 5, 1, "", "plot_scores"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:module", "4": "py:attribute", "5": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "module", "Python module"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "titleterms": {"base": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 124], "class": [0, 72, 74, 75, 76, 80, 81], "function": [0, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 114], "julearn": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 83, 117, 122, 124, 125, 138], "pipelinecr": [1, 137], "exampl": [1, 2, 13, 14, 16, 19, 33, 36, 39, 41, 61, 70, 118, 119], "us": [1, 2, 13, 14, 16, 19, 33, 36, 39, 41, 61, 70, 106, 111, 120, 125, 137], "targetpipelinecr": 2, "columntyp": 3, "columntypeslik": 4, "jubaseestim": 5, "jutransform": 6, "wrapmodel": 7, "change_column_typ": 8, "ensure_column_typ": 9, "get_column_typ": 10, "make_type_selector": 11, "inspect": [12, 13, 14, 72, 94, 95, 96, 98, 129], "foldsinspector": 12, "inspector": 13, "preprocess": [14, 97, 131, 137], "model_select": [15, 16, 17, 18, 19, 20, 21, 22, 23], "continuousstratifiedgroupkfold": 15, "continuousstratifiedkfold": 16, "repeatedcontinuousstratifiedgroupkfold": 17, "repeatedcontinuousstratifiedkfold": 18, "stratifiedbootstrap": 19, "get_search": 20, "list_search": 21, "register_search": 22, "reset_searcher_regist": 23, "model": [24, 25, 26, 27, 28, 74, 75, 91, 92, 95, 96, 100, 110, 116, 124, 127, 129, 130, 135, 136, 137], "dynam": [24, 75, 116], "dynamicselect": 24, "get_model": 25, "list_model": 26, "register_model": 27, "reset_model_regist": 28, "pipelin": [29, 30, 76, 116, 137], "jutargetpipelin": 29, "pipeline_cr": 30, "step": [30, 116], "prepar": [31, 32, 77], "check_consist": 31, "prepare_input_data": 32, "run_cross_valid": [33, 132, 133, 136, 137], "score": [34, 35, 36, 37, 38, 39, 40, 78, 101, 114, 135, 136], "check_scor": 34, "get_scor": 35, "list_scor": 36, "metric": [37, 38, 78, 136], "r2_corr": 37, "r_corr": 38, "register_scor": 39, "reset_scorer_regist": 40, "stat": [41, 79], "corrected_ttest": 41, "transform": [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 80, 101, 116], "cbpm": [42, 124], "changecolumntyp": 43, "dropcolumn": 44, "filtercolumn": 45, "jucolumntransform": 46, "setcolumntyp": 47, "confound_remov": 48, "confoundremov": 48, "get_transform": 49, "list_transform": 50, "register_transform": 51, "reset_transformer_regist": 52, "target": [53, 54, 55, 56, 57, 58, 59, 60, 80, 101, 103, 125, 131], "jutargettransform": 53, "jutransformedtargetmodel": 54, "targetconfoundremov": 55, "transformedtargetwarn": 56, "get_target_transform": 57, "list_target_transform": 58, "register_target_transform": 59, "reset_target_transformer_regist": 60, "util": [61, 62, 63, 64, 65, 66, 67, 68, 69, 81], "configure_log": 61, "logger": 62, "raise_error": 63, "type": [64, 65, 66, 67, 68, 81, 130, 133, 137], "estimatorlik": 64, "estimatorlikefit1": 65, "estimatorlikefit2": 66, "estimatorlikef": 67, "juestimatorlik": 68, "warn_with_log": 69, "viz": [70, 120], "plot_scor": 70, "api": [71, 73, 138], "refer": [71, 87, 88, 95, 104, 105, 106, 124, 125, 126, 132, 137], "main": 73, "select": [74, 75, 116, 128, 137], "deslib": 75, "visual": [82, 135], "start": [83, 121], "multiclass": 84, "classif": [84, 89, 107], "regress": [85, 86, 102, 114, 125], "analysi": [85, 86, 102], "stratifi": 86, "k": 86, "fold": [86, 98], "cv": [86, 88], "work": 87, "panda": 87, "merg": 87, "join": 87, "datafram": [87, 116], "group": [88, 126], "deal": [88, 95], "cross": [88, 95, 125, 126, 132, 136], "valid": [88, 95, 125, 126, 132, 136], "techniqu": [88, 95], "simpl": [89, 92], "binari": 89, "comput": [90, 93, 99, 108, 112, 115], "time": [90, 93, 99, 108, 112, 115], "comparison": [91, 92, 110, 135], "svm": 95, "random": 96, "forest": 96, "variabl": [96, 101], "import": 96, "varianc": 97, "threshold": 97, "zscore": 97, "pca": 97, "wise": 98, "predict": [98, 124], "complex": 100, "z": 101, "gener": 103, "tune": [104, 105, 106, 127], "multipl": 104, "hyperparamet": [104, 105, 106, 127, 137], "grid": [104, 127], "bayesian": 106, "search": 106, "stack": [107, 130], "confound": [109, 110, 111, 125], "remov": [110, 111, 125], "return": [111, 136], "typic": 111, "case": 111, "custom": [113, 114, 116], "overview": 116, "avail": 116, "scaler": 116, "featur": [116, 125, 130, 133, 137, 138], "oper": 116, "decomposit": 116, "estim": [116, 130, 136], "support": 116, "vector": 116, "machin": 116, "ensembl": 116, "gaussian": 116, "process": 116, "linear": 116, "naiv": 116, "bay": 116, "dummi": 116, "configur": 117, "contribut": 118, "set": [118, 137], "up": 118, "local": 118, "develop": 118, "environ": 118, "github": 118, "pull": 118, "request": 118, "guidelin": 118, "run": 118, "unit": 118, "test": 118, "ad": 118, "build": [118, 137], "document": [118, 122, 138], "write": 118, "content": [119, 122, 128], "faq": 120, "i": [120, 122, 125], "have": 120, "issu": 120, "depend": [120, 121], "modul": 120, "how": 120, "do": 120, "interact": 120, "plot": 120, "get": 121, "requir": 121, "setup": 121, "suggest": 121, "instal": 121, "option": 121, "welcom": 122, "": [122, 138], "what": [122, 134, 138], "why": [122, 132], "tabl": [122, 128], "indic": 122, "maintain": 123, "version": 123, "releas": 123, "new": [123, 138], "connectom": 124, "consist": 125, "from": 125, "should": 125, "splitter": [126, 136], "stratif": 126, "paramet": 127, "v": 127, "searcher": 127, "specifi": 127, "distribut": 127, "more": 127, "than": 127, "one": 127, "deeper": 128, "topic": 128, "fit": 130, "each": 130, "all": 130, "specif": [130, 137], "appli": 131, "The": [132, 136], "fundament": 132, "essenc": 132, "data": 133, "input": 133, "give": 133, "you": 134, "realli": 134, "need": 134, "know": 134, "statist": 135, "evalu": 136, "output": 136, "made": 137, "easi": 137, "0": 138, "3": 138, "4": 138, "dev10": 138, "2024": 138, "07": 138, "30": 138, "bugfix": 138, "05": 138, "16": 138, "improv": 138, "2": 138, "03": 138, "enhanc": 138, "misc": 138, "1": 138, "01": 138, "23": 138, "2023": 138, "19": 138, "5": 138, "2022": 138, "21": 138, "chang": 138}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"Base": [[0, "module-julearn.base"]], "Classes": [[0, "classes"], [72, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [80, "classes"], [80, "id1"], [81, "classes"], [81, "id1"]], "Functions": [[0, "functions"], [72, "functions"], [73, "functions"], [74, "functions"], [75, "functions"], [77, "functions"], [78, "functions"], [78, "id1"], [79, "functions"], [80, "functions"], [80, "id2"], [81, "functions"], [82, "functions"]], "julearn.PipelineCreator": [[1, "julearn-pipelinecreator"]], "Examples using julearn.PipelineCreator": [[1, "examples-using-julearn-pipelinecreator"]], "julearn.TargetPipelineCreator": [[2, "julearn-targetpipelinecreator"]], "Examples using julearn.TargetPipelineCreator": [[2, "examples-using-julearn-targetpipelinecreator"]], "julearn.base.ColumnTypes": [[3, "julearn-base-columntypes"]], "julearn.base.ColumnTypesLike": [[4, "julearn-base-columntypeslike"]], "julearn.base.JuBaseEstimator": [[5, "julearn-base-jubaseestimator"]], "julearn.base.JuTransformer": [[6, "julearn-base-jutransformer"]], "julearn.base.WrapModel": [[7, "julearn-base-wrapmodel"]], "julearn.base.change_column_type": [[8, "julearn-base-change-column-type"]], "julearn.base.ensure_column_types": [[9, "julearn-base-ensure-column-types"]], "julearn.base.get_column_type": [[10, "julearn-base-get-column-type"]], "julearn.base.make_type_selector": [[11, "julearn-base-make-type-selector"]], "julearn.inspect.FoldsInspector": [[12, "julearn-inspect-foldsinspector"]], "julearn.inspect.Inspector": [[13, "julearn-inspect-inspector"]], "Examples using julearn.inspect.Inspector": [[13, "examples-using-julearn-inspect-inspector"]], "julearn.inspect.preprocess": [[14, "julearn-inspect-preprocess"]], "Examples using julearn.inspect.preprocess": [[14, "examples-using-julearn-inspect-preprocess"]], "julearn.model_selection.ContinuousStratifiedGroupKFold": [[15, "julearn-model-selection-continuousstratifiedgroupkfold"]], "julearn.model_selection.ContinuousStratifiedKFold": [[16, "julearn-model-selection-continuousstratifiedkfold"]], "Examples using julearn.model_selection.ContinuousStratifiedKFold": [[16, "examples-using-julearn-model-selection-continuousstratifiedkfold"]], "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold": [[17, "julearn-model-selection-repeatedcontinuousstratifiedgroupkfold"]], "julearn.model_selection.RepeatedContinuousStratifiedKFold": [[18, "julearn-model-selection-repeatedcontinuousstratifiedkfold"]], "julearn.model_selection.StratifiedBootstrap": [[19, "julearn-model-selection-stratifiedbootstrap"]], "Examples using julearn.model_selection.StratifiedBootstrap": [[19, "examples-using-julearn-model-selection-stratifiedbootstrap"]], "julearn.model_selection.get_searcher": [[20, "julearn-model-selection-get-searcher"]], "julearn.model_selection.list_searchers": [[21, "julearn-model-selection-list-searchers"]], "julearn.model_selection.register_searcher": [[22, "julearn-model-selection-register-searcher"]], "julearn.model_selection.reset_searcher_register": [[23, "julearn-model-selection-reset-searcher-register"]], "julearn.models.dynamic.DynamicSelection": [[24, "julearn-models-dynamic-dynamicselection"]], "julearn.models.get_model": [[25, "julearn-models-get-model"]], "julearn.models.list_models": [[26, "julearn-models-list-models"]], "julearn.models.register_model": [[27, "julearn-models-register-model"]], "julearn.models.reset_model_register": [[28, "julearn-models-reset-model-register"]], "julearn.pipeline.JuTargetPipeline": [[29, "julearn-pipeline-jutargetpipeline"]], "julearn.pipeline.pipeline_creator.Step": [[30, "julearn-pipeline-pipeline-creator-step"]], "julearn.prepare.check_consistency": [[31, "julearn-prepare-check-consistency"]], "julearn.prepare.prepare_input_data": [[32, "julearn-prepare-prepare-input-data"]], "julearn.run_cross_validation": [[33, "julearn-run-cross-validation"]], "Examples using julearn.run_cross_validation": [[33, "examples-using-julearn-run-cross-validation"]], "julearn.scoring.check_scoring": [[34, "julearn-scoring-check-scoring"]], "julearn.scoring.get_scorer": [[35, "julearn-scoring-get-scorer"]], "julearn.scoring.list_scorers": [[36, "julearn-scoring-list-scorers"]], "Examples using julearn.scoring.list_scorers": [[36, "examples-using-julearn-scoring-list-scorers"]], "julearn.scoring.metrics.r2_corr": [[37, "julearn-scoring-metrics-r2-corr"]], "julearn.scoring.metrics.r_corr": [[38, "julearn-scoring-metrics-r-corr"]], "julearn.scoring.register_scorer": [[39, "julearn-scoring-register-scorer"]], "Examples using julearn.scoring.register_scorer": [[39, "examples-using-julearn-scoring-register-scorer"]], "julearn.scoring.reset_scorer_register": [[40, "julearn-scoring-reset-scorer-register"]], "julearn.stats.corrected_ttest": [[41, "julearn-stats-corrected-ttest"]], "Examples using julearn.stats.corrected_ttest": [[41, "examples-using-julearn-stats-corrected-ttest"]], "julearn.transformers.CBPM": [[42, "julearn-transformers-cbpm"]], "julearn.transformers.ChangeColumnTypes": [[43, "julearn-transformers-changecolumntypes"]], "julearn.transformers.DropColumns": [[44, "julearn-transformers-dropcolumns"]], "julearn.transformers.FilterColumns": [[45, "julearn-transformers-filtercolumns"]], "julearn.transformers.JuColumnTransformer": [[46, "julearn-transformers-jucolumntransformer"]], "julearn.transformers.SetColumnTypes": [[47, "julearn-transformers-setcolumntypes"]], "julearn.transformers.confound_remover.ConfoundRemover": [[48, "julearn-transformers-confound-remover-confoundremover"]], "julearn.transformers.get_transformer": [[49, "julearn-transformers-get-transformer"]], "julearn.transformers.list_transformers": [[50, "julearn-transformers-list-transformers"]], "julearn.transformers.register_transformer": [[51, "julearn-transformers-register-transformer"]], "julearn.transformers.reset_transformer_register": [[52, "julearn-transformers-reset-transformer-register"]], "julearn.transformers.target.JuTargetTransformer": [[53, "julearn-transformers-target-jutargettransformer"]], "julearn.transformers.target.JuTransformedTargetModel": [[54, "julearn-transformers-target-jutransformedtargetmodel"]], "julearn.transformers.target.TargetConfoundRemover": [[55, "julearn-transformers-target-targetconfoundremover"]], "julearn.transformers.target.TransformedTargetWarning": [[56, "julearn-transformers-target-transformedtargetwarning"]], "julearn.transformers.target.get_target_transformer": [[57, "julearn-transformers-target-get-target-transformer"]], "julearn.transformers.target.list_target_transformers": [[58, "julearn-transformers-target-list-target-transformers"]], "julearn.transformers.target.register_target_transformer": [[59, "julearn-transformers-target-register-target-transformer"]], "julearn.transformers.target.reset_target_transformer_register": [[60, "julearn-transformers-target-reset-target-transformer-register"]], "julearn.utils.configure_logging": [[61, "julearn-utils-configure-logging"]], "Examples using julearn.utils.configure_logging": [[61, "examples-using-julearn-utils-configure-logging"]], "julearn.utils.logger": [[62, "julearn-utils-logger"]], "julearn.utils.raise_error": [[63, "julearn-utils-raise-error"]], "julearn.utils.typing.EstimatorLike": [[64, "julearn-utils-typing-estimatorlike"]], "julearn.utils.typing.EstimatorLikeFit1": [[65, "julearn-utils-typing-estimatorlikefit1"]], "julearn.utils.typing.EstimatorLikeFit2": [[66, "julearn-utils-typing-estimatorlikefit2"]], "julearn.utils.typing.EstimatorLikeFity": [[67, "julearn-utils-typing-estimatorlikefity"]], "julearn.utils.typing.JuEstimatorLike": [[68, "julearn-utils-typing-juestimatorlike"]], "julearn.utils.warn_with_log": [[69, "julearn-utils-warn-with-log"]], "julearn.viz.plot_scores": [[70, "julearn-viz-plot-scores"]], "Examples using julearn.viz.plot_scores": [[70, "examples-using-julearn-viz-plot-scores"]], "API Reference": [[71, "api-reference"]], "Inspect": [[72, "module-julearn.inspect"]], "Main API": [[73, "module-julearn.api"]], "Model Selection": [[74, "module-julearn.model_selection"]], "Models": [[75, "module-julearn.models"]], "Dynamic Selection (DESLib)": [[75, "dynamic-selection-deslib"]], "Pipeline": [[76, "module-julearn.pipeline"]], "Prepare": [[77, "module-julearn.prepare"]], "Scoring": [[78, "module-julearn.scoring"]], "Scoring Metrics": [[78, "module-julearn.scoring.metrics"]], "Stats": [[79, "module-julearn.stats"]], "Transformers": [[80, "module-julearn.transformers"], [116, "transformers"]], "Target Transformers": [[80, "module-julearn.transformers.target"]], "Utils": [[81, "module-julearn.utils"]], "Typing": [[81, "module-julearn.utils.typing"]], "Visualization": [[82, "visualization"]], "Starting with julearn": [[83, "starting-with-julearn"]], "Multiclass Classification": [[84, "multiclass-classification"]], "Regression Analysis": [[85, "regression-analysis"], [102, "regression-analysis"]], "Stratified K-fold CV for regression analysis": [[86, "stratified-k-fold-cv-for-regression-analysis"]], "Working with pandas": [[87, "working-with-pandas"]], "References": [[87, "references"], [88, "references"], [95, "references"], [104, "references"], [105, "references"], [106, "references"]], "Merging or joining DataFrame": [[87, "merging-or-joining-dataframe"]], "Grouped CV": [[88, "grouped-cv"]], "Dealing with Cross-Validation techniques": [[88, "dealing-with-cross-validation-techniques"], [95, "dealing-with-cross-validation-techniques"]], "Simple Binary Classification": [[89, "simple-binary-classification"]], "Computation times": [[90, "computation-times"], [93, "computation-times"], [99, "computation-times"], [108, "computation-times"], [112, "computation-times"], [115, "computation-times"]], "Model Comparison": [[91, "model-comparison"], [135, "model-comparison"]], "Simple Model Comparison": [[92, "simple-model-comparison"]], "Inspection": [[94, "inspection"]], "Inspecting SVM models": [[95, "inspecting-svm-models"]], "Inspecting Random Forest models": [[96, "inspecting-random-forest-models"]], "Random Forest variable importance": [[96, "random-forest-variable-importance"]], "Preprocessing with variance threshold, zscore and PCA": [[97, "preprocessing-with-variance-threshold-zscore-and-pca"]], "Inspecting the fold-wise predictions": [[98, "inspecting-the-fold-wise-predictions"]], "Complex Models": [[100, "complex-models"]], "Transforming target variable with z-score": [[101, "transforming-target-variable-with-z-score"]], "Target Generation": [[103, "target-generation"]], "Tuning Multiple Hyperparameters Grids": [[104, "tuning-multiple-hyperparameters-grids"]], "Tuning Hyperparameters": [[105, "tuning-hyperparameters"]], "Tuning Hyperparameters using Bayesian Search": [[106, "tuning-hyperparameters-using-bayesian-search"]], "Stacking Classification": [[107, "stacking-classification"]], "Confounds": [[109, "confounds"]], "Confound Removal (model comparison)": [[110, "confound-removal-model-comparison"]], "Return Confounds in Confound Removal": [[111, "return-confounds-in-confound-removal"]], "Confound Removal Typical Use Case": [[111, "confound-removal-typical-use-case"]], "Customization": [[113, "customization"]], "Custom Scoring Function for Regression": [[114, "custom-scoring-function-for-regression"]], "Overview of available Pipeline Steps": [[116, "overview-of-available-pipeline-steps"]], "Scalers": [[116, "scalers"]], "Feature Selection": [[116, "feature-selection"]], "DataFrame operations": [[116, "dataframe-operations"]], "Decomposition": [[116, "decomposition"]], "Custom": [[116, "custom"]], "Models (Estimators)": [[116, "models-estimators"]], "Support Vector Machines": [[116, "support-vector-machines"]], "Ensemble": [[116, "ensemble"]], "Gaussian Processes": [[116, "gaussian-processes"]], "Linear Models": [[116, "linear-models"]], "Naive Bayes": [[116, "naive-bayes"]], "Dynamic Selection": [[116, "dynamic-selection"]], "Dummy": [[116, "dummy"]], "Configuring julearn": [[117, "configuring-julearn"]], "Contributing": [[118, "contributing"]], "Setting up the local development environment": [[118, "setting-up-the-local-development-environment"]], "GitHub Pull Request guidelines": [[118, "github-pull-request-guidelines"]], "Running unit tests": [[118, "running-unit-tests"]], "Adding and building documentation": [[118, "adding-and-building-documentation"]], "Writing Examples": [[118, "writing-examples"]], "Examples": [[119, "examples"]], "Contents:": [[119, null]], "FAQs": [[120, "faqs"]], "I have issues with the dependencies for the viz module.": [[120, "i-have-issues-with-the-dependencies-for-the-viz-module"]], "How do I use the viz interactive plots?": [[120, "how-do-i-use-the-viz-interactive-plots"]], "Getting started": [[121, "getting-started"]], "Requirements": [[121, "requirements"]], "Setup suggestion": [[121, "setup-suggestion"]], "Installing": [[121, "installing"]], "Optional Dependencies": [[121, "optional-dependencies"]], "Welcome to julearn\u2019s documentation!": [[122, "welcome-to-julearn-s-documentation"]], "What is julearn?": [[122, "what-is-julearn"]], "Why julearn?": [[122, "why-julearn"]], "Table of Contents": [[122, "table-of-contents"], [128, null]], "Indices and tables": [[122, "indices-and-tables"], [122, "id1"]], "Maintaining": [[123, "maintaining"]], "Versioning": [[123, "versioning"]], "Releasing a new version": [[123, "releasing-a-new-version"]], "Connectome-based Predictive Modeling (CBPM)": [[124, "connectome-based-predictive-modeling-cbpm"]], "CBPM in julearn": [[124, "cbpm-in-julearn"]], "References:": [[124, null], [125, null], [126, null], [132, null], [137, null]], "Cross-validation consistent Confound Removal": [[125, "cross-validation-consistent-confound-removal"]], "Confound Removal in julearn": [[125, "confound-removal-in-julearn"]], "Removing Confounds from the Features": [[125, "removing-confounds-from-the-features"]], "Removing Confounds from the Target": [[125, "removing-confounds-from-the-target"]], "Should I use Confound Regression?": [[125, "should-i-use-confound-regression"]], "Cross-validation splitters": [[126, "cross-validation-splitters"], [136, "cross-validation-splitters"]], "Stratification": [[126, "stratification"]], "Grouping": [[126, "grouping"]], "Hyperparameter Tuning": [[127, "hyperparameter-tuning"], [127, "id1"]], "Parameters vs Hyperparameters": [[127, "parameters-vs-hyperparameters"]], "Searchers": [[127, "searchers"]], "Specifying distributions": [[127, "specifying-distributions"]], "Tuning more than one grid": [[127, "tuning-more-than-one-grid"]], "Models as hyperparameters": [[127, "models-as-hyperparameters"]], "Selected deeper topics": [[128, "selected-deeper-topics"]], "Inspecting Models": [[129, "inspecting-models"]], "Stacking Models": [[130, "stacking-models"]], "Fitting each estimator on all of the features": [[130, "fitting-each-estimator-on-all-of-the-features"]], "Fitting each estimator on a specific feature type": [[130, "fitting-each-estimator-on-a-specific-feature-type"]], "Applying preprocessing to the target": [[131, "applying-preprocessing-to-the-target"]], "Why cross validation?": [[132, "why-cross-validation"]], "Cross-validation - The fundamentals": [[132, "cross-validation-the-fundamentals"]], "The essence of run_cross_validation()": [[132, "the-essence-of-run-cross-validation"]], "Data": [[133, "data"]], "Data input to run_cross_validation()": [[133, "data-input-to-run-cross-validation"]], "Giving types to features": [[133, "giving-types-to-features"]], "What you really need to know": [[134, "what-you-really-need-to-know"]], "Statistical comparisons": [[135, "statistical-comparisons"]], "Score visualizations": [[135, "score-visualizations"]], "Model Evaluation": [[136, "model-evaluation"]], "The output of run_cross_validation()": [[136, "the-output-of-run-cross-validation"]], "Cross-validation scores": [[136, "cross-validation-scores"]], "Returning a model (estimator)": [[136, "returning-a-model-estimator"]], "Scoring metrics": [[136, "scoring-metrics"]], "Model Building": [[137, "model-building"]], "Pipeline specification in run_cross_validation()": [[137, "pipeline-specification-in-run-cross-validation"]], "Feature preprocessing": [[137, "feature-preprocessing"]], "Pipeline specification made easy with the PipelineCreator": [[137, "pipeline-specification-made-easy-with-the-pipelinecreator"]], "Setting hyperparameters": [[137, "setting-hyperparameters"]], "Selective preprocessing using feature types": [[137, "selective-preprocessing-using-feature-types"]], "What\u2019s new": [[138, "what-s-new"]], "Julearn 0.3.4.dev10 (2024-07-30)": [[138, "julearn-0-3-4-dev10-2024-07-30"]], "Bugfixes": [[138, "bugfixes"], [138, "id1"], [138, "id2"], [138, "id4"], [138, "id9"]], "Julearn 0.3.3 (2024-05-16)": [[138, "julearn-0-3-3-2024-05-16"]], "Improved Documentation": [[138, "improved-documentation"], [138, "id3"], [138, "id5"], [138, "id10"]], "Julearn 0.3.2 (2024-05-03)": [[138, "julearn-0-3-2-2024-05-03"]], "Enhancements": [[138, "enhancements"], [138, "id6"], [138, "id11"]], "Features": [[138, "features"], [138, "id7"], [138, "id12"]], "Misc": [[138, "misc"], [138, "id8"]], "Julearn 0.3.1 (2024-01-23)": [[138, "julearn-0-3-1-2024-01-23"]], "Julearn 0.3.0 (2023-07-19)": [[138, "julearn-0-3-0-2023-07-19"]], "Julearn 0.2.5 (2022-07-21)": [[138, "julearn-0-2-5-2022-07-21"]], "API Changes": [[138, "api-changes"]]}, "indexentries": {"julearn.base": [[0, "module-julearn.base"]], "module": [[0, "module-julearn.base"], [72, "module-julearn.inspect"], [73, "module-julearn.api"], [74, "module-julearn.model_selection"], [75, "module-julearn.models"], [75, "module-julearn.models.dynamic"], [76, "module-julearn.pipeline"], [77, "module-julearn.prepare"], [78, "module-julearn.scoring"], [78, "module-julearn.scoring.metrics"], [79, "module-julearn.stats"], [80, "module-julearn.transformers"], [80, "module-julearn.transformers.target"], [81, "module-julearn.utils"], [81, "module-julearn.utils.typing"], [82, "module-julearn.viz"]], "pipelinecreator (class in julearn)": [[1, "julearn.PipelineCreator"]], "__init__() (julearn.pipelinecreator method)": [[1, "julearn.PipelineCreator.__init__"]], "add() (julearn.pipelinecreator method)": [[1, "julearn.PipelineCreator.add"]], "copy() (julearn.pipelinecreator method)": [[1, "julearn.PipelineCreator.copy"]], "from_list() (julearn.pipelinecreator class method)": [[1, "julearn.PipelineCreator.from_list"]], "has_model() (julearn.pipelinecreator method)": [[1, "julearn.PipelineCreator.has_model"]], "no_model_ok (julearn.pipelinecreator property)": [[1, "julearn.PipelineCreator.no_model_ok"]], "split() (julearn.pipelinecreator method)": [[1, "julearn.PipelineCreator.split"]], "steps (julearn.pipelinecreator property)": [[1, "julearn.PipelineCreator.steps"]], "to_pipeline() (julearn.pipelinecreator method)": [[1, "julearn.PipelineCreator.to_pipeline"]], "targetpipelinecreator (class in julearn)": [[2, "julearn.TargetPipelineCreator"]], "__init__() (julearn.targetpipelinecreator method)": [[2, "julearn.TargetPipelineCreator.__init__"]], "add() (julearn.targetpipelinecreator method)": [[2, "julearn.TargetPipelineCreator.add"]], "to_pipeline() (julearn.targetpipelinecreator method)": [[2, "julearn.TargetPipelineCreator.to_pipeline"]], "columntypes (class in julearn.base)": [[3, "julearn.base.ColumnTypes"]], "__init__() (julearn.base.columntypes method)": [[3, "julearn.base.ColumnTypes.__init__"]], "add() (julearn.base.columntypes method)": [[3, "julearn.base.ColumnTypes.add"]], "copy() (julearn.base.columntypes method)": [[3, "julearn.base.ColumnTypes.copy"]], "filter() (julearn.base.columntypes method)": [[3, "julearn.base.ColumnTypes.filter"]], "pattern (julearn.base.columntypes property)": [[3, "julearn.base.ColumnTypes.pattern"]], "to_type_selector() (julearn.base.columntypes method)": [[3, "julearn.base.ColumnTypes.to_type_selector"]], "columntypeslike (in module julearn.base)": [[4, "julearn.base.ColumnTypesLike"]], "jubaseestimator (class in julearn.base)": [[5, "julearn.base.JuBaseEstimator"]], "__init__() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.__init__"]], "filter_columns() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.filter_columns"]], "get_apply_to() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.get_apply_to"]], "get_metadata_routing() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.get_metadata_routing"]], "get_needed_types() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.get_needed_types"]], "get_params() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.get_params"]], "set_params() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.set_params"]], "jutransformer (class in julearn.base)": [[6, "julearn.base.JuTransformer"]], "__init__() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.__init__"]], "filter_columns() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.filter_columns"]], "fit() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.fit"]], "fit_transform() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.fit_transform"]], "get_apply_to() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.get_apply_to"]], "get_metadata_routing() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.get_metadata_routing"]], "get_needed_types() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.get_needed_types"]], "get_params() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.get_params"]], "set_output() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.set_output"]], "set_params() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.set_params"]], "wrapmodel (class in julearn.base)": [[7, "julearn.base.WrapModel"]], "__init__() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.__init__"]], "classes_ (julearn.base.wrapmodel property)": [[7, "julearn.base.WrapModel.classes_"]], "decision_function() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.decision_function"]], "filter_columns() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.filter_columns"]], "fit() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.fit"]], "get_apply_to() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.get_apply_to"]], "get_metadata_routing() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.get_metadata_routing"]], "get_needed_types() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.get_needed_types"]], "get_params() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.get_params"]], "predict() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.predict"]], "predict_log_proba() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.predict_log_proba"]], "predict_proba() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.predict_proba"]], "score() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.score"]], "set_params() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.set_params"]], "change_column_type() (in module julearn.base)": [[8, "julearn.base.change_column_type"]], "ensure_column_types() (in module julearn.base)": [[9, "julearn.base.ensure_column_types"]], "get_column_type() (in module julearn.base)": [[10, "julearn.base.get_column_type"]], "make_type_selector() (in module julearn.base)": [[11, "julearn.base.make_type_selector"]], "foldsinspector (class in julearn.inspect)": [[12, "julearn.inspect.FoldsInspector"]], "__init__() (julearn.inspect.foldsinspector method)": [[12, "julearn.inspect.FoldsInspector.__init__"]], "decision_function() (julearn.inspect.foldsinspector method)": [[12, "julearn.inspect.FoldsInspector.decision_function"]], "predict() (julearn.inspect.foldsinspector method)": [[12, "julearn.inspect.FoldsInspector.predict"]], "predict_log_proba() (julearn.inspect.foldsinspector method)": [[12, "julearn.inspect.FoldsInspector.predict_log_proba"]], "predict_proba() (julearn.inspect.foldsinspector method)": [[12, "julearn.inspect.FoldsInspector.predict_proba"]], "inspector (class in julearn.inspect)": [[13, "julearn.inspect.Inspector"]], "__init__() (julearn.inspect.inspector method)": [[13, "julearn.inspect.Inspector.__init__"]], "folds (julearn.inspect.inspector property)": [[13, "julearn.inspect.Inspector.folds"]], "model (julearn.inspect.inspector property)": [[13, "julearn.inspect.Inspector.model"]], "preprocess() (in module julearn.inspect)": [[14, "julearn.inspect.preprocess"]], "continuousstratifiedgroupkfold (class in julearn.model_selection)": [[15, "julearn.model_selection.ContinuousStratifiedGroupKFold"]], "__init__() (julearn.model_selection.continuousstratifiedgroupkfold method)": [[15, "julearn.model_selection.ContinuousStratifiedGroupKFold.__init__"]], "get_metadata_routing() (julearn.model_selection.continuousstratifiedgroupkfold method)": [[15, "julearn.model_selection.ContinuousStratifiedGroupKFold.get_metadata_routing"]], "get_n_splits() (julearn.model_selection.continuousstratifiedgroupkfold method)": [[15, "julearn.model_selection.ContinuousStratifiedGroupKFold.get_n_splits"]], "set_split_request() (julearn.model_selection.continuousstratifiedgroupkfold method)": [[15, "julearn.model_selection.ContinuousStratifiedGroupKFold.set_split_request"]], "split() (julearn.model_selection.continuousstratifiedgroupkfold method)": [[15, "julearn.model_selection.ContinuousStratifiedGroupKFold.split"]], "continuousstratifiedkfold (class in julearn.model_selection)": [[16, "julearn.model_selection.ContinuousStratifiedKFold"]], "__init__() (julearn.model_selection.continuousstratifiedkfold method)": [[16, "julearn.model_selection.ContinuousStratifiedKFold.__init__"]], "get_metadata_routing() (julearn.model_selection.continuousstratifiedkfold method)": [[16, "julearn.model_selection.ContinuousStratifiedKFold.get_metadata_routing"]], "get_n_splits() (julearn.model_selection.continuousstratifiedkfold method)": [[16, "julearn.model_selection.ContinuousStratifiedKFold.get_n_splits"]], "split() (julearn.model_selection.continuousstratifiedkfold method)": [[16, "julearn.model_selection.ContinuousStratifiedKFold.split"]], "repeatedcontinuousstratifiedgroupkfold (class in julearn.model_selection)": [[17, "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold"]], "__init__() (julearn.model_selection.repeatedcontinuousstratifiedgroupkfold method)": [[17, "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold.__init__"]], "get_metadata_routing() (julearn.model_selection.repeatedcontinuousstratifiedgroupkfold method)": [[17, "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold.get_metadata_routing"]], "get_n_splits() (julearn.model_selection.repeatedcontinuousstratifiedgroupkfold method)": [[17, "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold.get_n_splits"]], "split() (julearn.model_selection.repeatedcontinuousstratifiedgroupkfold method)": [[17, "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold.split"]], "repeatedcontinuousstratifiedkfold (class in julearn.model_selection)": [[18, "julearn.model_selection.RepeatedContinuousStratifiedKFold"]], "__init__() (julearn.model_selection.repeatedcontinuousstratifiedkfold method)": [[18, "julearn.model_selection.RepeatedContinuousStratifiedKFold.__init__"]], "get_metadata_routing() (julearn.model_selection.repeatedcontinuousstratifiedkfold method)": [[18, "julearn.model_selection.RepeatedContinuousStratifiedKFold.get_metadata_routing"]], "get_n_splits() (julearn.model_selection.repeatedcontinuousstratifiedkfold method)": [[18, "julearn.model_selection.RepeatedContinuousStratifiedKFold.get_n_splits"]], "split() (julearn.model_selection.repeatedcontinuousstratifiedkfold method)": [[18, "julearn.model_selection.RepeatedContinuousStratifiedKFold.split"]], "stratifiedbootstrap (class in julearn.model_selection)": [[19, "julearn.model_selection.StratifiedBootstrap"]], "__init__() (julearn.model_selection.stratifiedbootstrap method)": [[19, "julearn.model_selection.StratifiedBootstrap.__init__"]], "get_metadata_routing() (julearn.model_selection.stratifiedbootstrap method)": [[19, "julearn.model_selection.StratifiedBootstrap.get_metadata_routing"]], "get_n_splits() (julearn.model_selection.stratifiedbootstrap method)": [[19, "julearn.model_selection.StratifiedBootstrap.get_n_splits"]], "split() (julearn.model_selection.stratifiedbootstrap method)": [[19, "julearn.model_selection.StratifiedBootstrap.split"]], "get_searcher() (in module julearn.model_selection)": [[20, "julearn.model_selection.get_searcher"]], "list_searchers() (in module julearn.model_selection)": [[21, "julearn.model_selection.list_searchers"]], "register_searcher() (in module julearn.model_selection)": [[22, "julearn.model_selection.register_searcher"]], "reset_searcher_register() (in module julearn.model_selection)": [[23, "julearn.model_selection.reset_searcher_register"]], "dynamicselection (class in julearn.models.dynamic)": [[24, "julearn.models.dynamic.DynamicSelection"]], "__init__() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.__init__"]], "fit() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.fit"]], "get_metadata_routing() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.get_metadata_routing"]], "get_params() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.get_params"]], "predict() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.predict"]], "predict_proba() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.predict_proba"]], "score() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.score"]], "set_params() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.set_params"]], "set_score_request() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.set_score_request"]], "get_model() (in module julearn.models)": [[25, "julearn.models.get_model"]], "list_models() (in module julearn.models)": [[26, "julearn.models.list_models"]], "register_model() (in module julearn.models)": [[27, "julearn.models.register_model"]], "reset_model_register() (in module julearn.models)": [[28, "julearn.models.reset_model_register"]], "jutargetpipeline (class in julearn.pipeline)": [[29, "julearn.pipeline.JuTargetPipeline"]], "__init__() (julearn.pipeline.jutargetpipeline method)": [[29, "julearn.pipeline.JuTargetPipeline.__init__"]], "can_inverse_transform() (julearn.pipeline.jutargetpipeline method)": [[29, "julearn.pipeline.JuTargetPipeline.can_inverse_transform"]], "fit() (julearn.pipeline.jutargetpipeline method)": [[29, "julearn.pipeline.JuTargetPipeline.fit"]], "fit_transform() (julearn.pipeline.jutargetpipeline method)": [[29, "julearn.pipeline.JuTargetPipeline.fit_transform"]], "inverse_transform() (julearn.pipeline.jutargetpipeline method)": [[29, "julearn.pipeline.JuTargetPipeline.inverse_transform"]], "needed_types (julearn.pipeline.jutargetpipeline property)": [[29, "julearn.pipeline.JuTargetPipeline.needed_types"]], "transform() (julearn.pipeline.jutargetpipeline method)": [[29, "julearn.pipeline.JuTargetPipeline.transform"]], "step (class in julearn.pipeline.pipeline_creator)": [[30, "julearn.pipeline.pipeline_creator.Step"]], "__init__() (julearn.pipeline.pipeline_creator.step method)": [[30, "julearn.pipeline.pipeline_creator.Step.__init__"]], "apply_to (julearn.pipeline.pipeline_creator.step attribute)": [[30, "julearn.pipeline.pipeline_creator.Step.apply_to"]], "estimator (julearn.pipeline.pipeline_creator.step attribute)": [[30, "julearn.pipeline.pipeline_creator.Step.estimator"]], "name (julearn.pipeline.pipeline_creator.step attribute)": [[30, "julearn.pipeline.pipeline_creator.Step.name"]], "needed_types (julearn.pipeline.pipeline_creator.step attribute)": [[30, "julearn.pipeline.pipeline_creator.Step.needed_types"]], "params_to_tune (julearn.pipeline.pipeline_creator.step attribute)": [[30, "julearn.pipeline.pipeline_creator.Step.params_to_tune"]], "row_select_col_type (julearn.pipeline.pipeline_creator.step attribute)": [[30, "julearn.pipeline.pipeline_creator.Step.row_select_col_type"]], "row_select_vals (julearn.pipeline.pipeline_creator.step attribute)": [[30, "julearn.pipeline.pipeline_creator.Step.row_select_vals"]], "check_consistency() (in module julearn.prepare)": [[31, "julearn.prepare.check_consistency"]], "prepare_input_data() (in module julearn.prepare)": [[32, "julearn.prepare.prepare_input_data"]], "run_cross_validation() (in module julearn)": [[33, "julearn.run_cross_validation"]], "check_scoring() (in module julearn.scoring)": [[34, "julearn.scoring.check_scoring"]], "get_scorer() (in module julearn.scoring)": [[35, "julearn.scoring.get_scorer"]], "list_scorers() (in module julearn.scoring)": [[36, "julearn.scoring.list_scorers"]], "r2_corr() (in module julearn.scoring.metrics)": [[37, "julearn.scoring.metrics.r2_corr"]], "r_corr() (in module julearn.scoring.metrics)": [[38, "julearn.scoring.metrics.r_corr"]], "register_scorer() (in module julearn.scoring)": [[39, "julearn.scoring.register_scorer"]], "reset_scorer_register() (in module julearn.scoring)": [[40, "julearn.scoring.reset_scorer_register"]], "corrected_ttest() (in module julearn.stats)": [[41, "julearn.stats.corrected_ttest"]], "cbpm (class in julearn.transformers)": [[42, "julearn.transformers.CBPM"]], "__init__() (julearn.transformers.cbpm method)": [[42, "julearn.transformers.CBPM.__init__"]], "aggregate() (julearn.transformers.cbpm method)": [[42, "julearn.transformers.CBPM.aggregate"]], "fit() (julearn.transformers.cbpm method)": [[42, "julearn.transformers.CBPM.fit"]], "fit_transform() (julearn.transformers.cbpm method)": [[42, "julearn.transformers.CBPM.fit_transform"]], "get_feature_names_out() (julearn.transformers.cbpm method)": [[42, "julearn.transformers.CBPM.get_feature_names_out"]], "get_metadata_routing() (julearn.transformers.cbpm method)": [[42, "julearn.transformers.CBPM.get_metadata_routing"]], "get_params() (julearn.transformers.cbpm method)": [[42, "julearn.transformers.CBPM.get_params"]], "set_output() (julearn.transformers.cbpm method)": [[42, "julearn.transformers.CBPM.set_output"]], "set_params() (julearn.transformers.cbpm method)": [[42, "julearn.transformers.CBPM.set_params"]], "transform() (julearn.transformers.cbpm method)": [[42, "julearn.transformers.CBPM.transform"]], "changecolumntypes (class in julearn.transformers)": [[43, "julearn.transformers.ChangeColumnTypes"]], "__init__() (julearn.transformers.changecolumntypes method)": [[43, "julearn.transformers.ChangeColumnTypes.__init__"]], "filter_columns() (julearn.transformers.changecolumntypes method)": [[43, "julearn.transformers.ChangeColumnTypes.filter_columns"]], "fit() (julearn.transformers.changecolumntypes method)": [[43, "julearn.transformers.ChangeColumnTypes.fit"]], "fit_transform() (julearn.transformers.changecolumntypes method)": [[43, "julearn.transformers.ChangeColumnTypes.fit_transform"]], "get_apply_to() (julearn.transformers.changecolumntypes method)": [[43, "julearn.transformers.ChangeColumnTypes.get_apply_to"]], "get_feature_names_out() (julearn.transformers.changecolumntypes method)": [[43, "julearn.transformers.ChangeColumnTypes.get_feature_names_out"]], "get_metadata_routing() (julearn.transformers.changecolumntypes method)": [[43, "julearn.transformers.ChangeColumnTypes.get_metadata_routing"]], "get_needed_types() (julearn.transformers.changecolumntypes method)": [[43, "julearn.transformers.ChangeColumnTypes.get_needed_types"]], "get_params() (julearn.transformers.changecolumntypes method)": [[43, "julearn.transformers.ChangeColumnTypes.get_params"]], "set_output() (julearn.transformers.changecolumntypes method)": [[43, "julearn.transformers.ChangeColumnTypes.set_output"]], "set_params() (julearn.transformers.changecolumntypes method)": [[43, "julearn.transformers.ChangeColumnTypes.set_params"]], "transform() (julearn.transformers.changecolumntypes method)": [[43, "julearn.transformers.ChangeColumnTypes.transform"]], "dropcolumns (class in julearn.transformers)": [[44, "julearn.transformers.DropColumns"]], "__init__() (julearn.transformers.dropcolumns method)": [[44, "julearn.transformers.DropColumns.__init__"]], "filter_columns() (julearn.transformers.dropcolumns method)": [[44, "julearn.transformers.DropColumns.filter_columns"]], "fit() (julearn.transformers.dropcolumns method)": [[44, "julearn.transformers.DropColumns.fit"]], "fit_transform() (julearn.transformers.dropcolumns method)": [[44, "julearn.transformers.DropColumns.fit_transform"]], "get_apply_to() (julearn.transformers.dropcolumns method)": [[44, "julearn.transformers.DropColumns.get_apply_to"]], "get_feature_names_out() (julearn.transformers.dropcolumns method)": [[44, "julearn.transformers.DropColumns.get_feature_names_out"]], "get_metadata_routing() (julearn.transformers.dropcolumns method)": [[44, "julearn.transformers.DropColumns.get_metadata_routing"]], "get_needed_types() (julearn.transformers.dropcolumns method)": [[44, "julearn.transformers.DropColumns.get_needed_types"]], "get_params() (julearn.transformers.dropcolumns method)": [[44, "julearn.transformers.DropColumns.get_params"]], "get_support() (julearn.transformers.dropcolumns method)": [[44, "julearn.transformers.DropColumns.get_support"]], "set_output() (julearn.transformers.dropcolumns method)": [[44, "julearn.transformers.DropColumns.set_output"]], "set_params() (julearn.transformers.dropcolumns method)": [[44, "julearn.transformers.DropColumns.set_params"]], "transform() (julearn.transformers.dropcolumns method)": [[44, "julearn.transformers.DropColumns.transform"]], "filtercolumns (class in julearn.transformers)": [[45, "julearn.transformers.FilterColumns"]], "__init__() (julearn.transformers.filtercolumns method)": [[45, "julearn.transformers.FilterColumns.__init__"]], "filter_columns() (julearn.transformers.filtercolumns method)": [[45, "julearn.transformers.FilterColumns.filter_columns"]], "fit() (julearn.transformers.filtercolumns method)": [[45, "julearn.transformers.FilterColumns.fit"]], "fit_transform() (julearn.transformers.filtercolumns method)": [[45, "julearn.transformers.FilterColumns.fit_transform"]], "get_apply_to() (julearn.transformers.filtercolumns method)": [[45, "julearn.transformers.FilterColumns.get_apply_to"]], "get_feature_names_out() (julearn.transformers.filtercolumns method)": [[45, "julearn.transformers.FilterColumns.get_feature_names_out"]], "get_metadata_routing() (julearn.transformers.filtercolumns method)": [[45, "julearn.transformers.FilterColumns.get_metadata_routing"]], "get_needed_types() (julearn.transformers.filtercolumns method)": [[45, "julearn.transformers.FilterColumns.get_needed_types"]], "get_params() (julearn.transformers.filtercolumns method)": [[45, "julearn.transformers.FilterColumns.get_params"]], "set_output() (julearn.transformers.filtercolumns method)": [[45, "julearn.transformers.FilterColumns.set_output"]], "set_params() (julearn.transformers.filtercolumns method)": [[45, "julearn.transformers.FilterColumns.set_params"]], "transform() (julearn.transformers.filtercolumns method)": [[45, "julearn.transformers.FilterColumns.transform"]], "jucolumntransformer (class in julearn.transformers)": [[46, "julearn.transformers.JuColumnTransformer"]], "__init__() (julearn.transformers.jucolumntransformer method)": [[46, "julearn.transformers.JuColumnTransformer.__init__"]], "filter_columns() (julearn.transformers.jucolumntransformer method)": [[46, "julearn.transformers.JuColumnTransformer.filter_columns"]], "fit() (julearn.transformers.jucolumntransformer method)": [[46, "julearn.transformers.JuColumnTransformer.fit"]], "fit_transform() (julearn.transformers.jucolumntransformer method)": [[46, "julearn.transformers.JuColumnTransformer.fit_transform"]], "get_apply_to() (julearn.transformers.jucolumntransformer method)": [[46, "julearn.transformers.JuColumnTransformer.get_apply_to"]], "get_feature_names_out() (julearn.transformers.jucolumntransformer method)": [[46, "julearn.transformers.JuColumnTransformer.get_feature_names_out"]], "get_metadata_routing() (julearn.transformers.jucolumntransformer method)": [[46, "julearn.transformers.JuColumnTransformer.get_metadata_routing"]], "get_needed_types() (julearn.transformers.jucolumntransformer method)": [[46, "julearn.transformers.JuColumnTransformer.get_needed_types"]], "get_params() (julearn.transformers.jucolumntransformer method)": [[46, "julearn.transformers.JuColumnTransformer.get_params"]], "set_output() (julearn.transformers.jucolumntransformer method)": [[46, "julearn.transformers.JuColumnTransformer.set_output"]], "set_params() (julearn.transformers.jucolumntransformer method)": [[46, "julearn.transformers.JuColumnTransformer.set_params"]], "transform() (julearn.transformers.jucolumntransformer method)": [[46, "julearn.transformers.JuColumnTransformer.transform"]], "setcolumntypes (class in julearn.transformers)": [[47, "julearn.transformers.SetColumnTypes"]], "__init__() (julearn.transformers.setcolumntypes method)": [[47, "julearn.transformers.SetColumnTypes.__init__"]], "filter_columns() (julearn.transformers.setcolumntypes method)": [[47, "julearn.transformers.SetColumnTypes.filter_columns"]], "fit() (julearn.transformers.setcolumntypes method)": [[47, "julearn.transformers.SetColumnTypes.fit"]], "fit_transform() (julearn.transformers.setcolumntypes method)": [[47, "julearn.transformers.SetColumnTypes.fit_transform"]], "get_apply_to() (julearn.transformers.setcolumntypes method)": [[47, "julearn.transformers.SetColumnTypes.get_apply_to"]], "get_feature_names_out() (julearn.transformers.setcolumntypes method)": [[47, "julearn.transformers.SetColumnTypes.get_feature_names_out"]], "get_metadata_routing() (julearn.transformers.setcolumntypes method)": [[47, "julearn.transformers.SetColumnTypes.get_metadata_routing"]], "get_needed_types() (julearn.transformers.setcolumntypes method)": [[47, "julearn.transformers.SetColumnTypes.get_needed_types"]], "get_params() (julearn.transformers.setcolumntypes method)": [[47, "julearn.transformers.SetColumnTypes.get_params"]], "set_output() (julearn.transformers.setcolumntypes method)": [[47, "julearn.transformers.SetColumnTypes.set_output"]], "set_params() (julearn.transformers.setcolumntypes method)": [[47, "julearn.transformers.SetColumnTypes.set_params"]], "transform() (julearn.transformers.setcolumntypes method)": [[47, "julearn.transformers.SetColumnTypes.transform"]], "confoundremover (class in julearn.transformers.confound_remover)": [[48, "julearn.transformers.confound_remover.ConfoundRemover"]], "__init__() (julearn.transformers.confound_remover.confoundremover method)": [[48, "julearn.transformers.confound_remover.ConfoundRemover.__init__"]], "filter_columns() (julearn.transformers.confound_remover.confoundremover method)": [[48, "julearn.transformers.confound_remover.ConfoundRemover.filter_columns"]], "fit() (julearn.transformers.confound_remover.confoundremover method)": [[48, "julearn.transformers.confound_remover.ConfoundRemover.fit"]], "fit_transform() (julearn.transformers.confound_remover.confoundremover method)": [[48, "julearn.transformers.confound_remover.ConfoundRemover.fit_transform"]], "get_apply_to() (julearn.transformers.confound_remover.confoundremover method)": [[48, "julearn.transformers.confound_remover.ConfoundRemover.get_apply_to"]], "get_feature_names_out() (julearn.transformers.confound_remover.confoundremover method)": [[48, "julearn.transformers.confound_remover.ConfoundRemover.get_feature_names_out"]], "get_metadata_routing() (julearn.transformers.confound_remover.confoundremover method)": [[48, "julearn.transformers.confound_remover.ConfoundRemover.get_metadata_routing"]], "get_needed_types() (julearn.transformers.confound_remover.confoundremover method)": [[48, "julearn.transformers.confound_remover.ConfoundRemover.get_needed_types"]], "get_params() (julearn.transformers.confound_remover.confoundremover method)": [[48, "julearn.transformers.confound_remover.ConfoundRemover.get_params"]], "get_support() (julearn.transformers.confound_remover.confoundremover method)": [[48, "julearn.transformers.confound_remover.ConfoundRemover.get_support"]], "set_output() (julearn.transformers.confound_remover.confoundremover method)": [[48, "julearn.transformers.confound_remover.ConfoundRemover.set_output"]], "set_params() (julearn.transformers.confound_remover.confoundremover method)": [[48, "julearn.transformers.confound_remover.ConfoundRemover.set_params"]], "transform() (julearn.transformers.confound_remover.confoundremover method)": [[48, "julearn.transformers.confound_remover.ConfoundRemover.transform"]], "get_transformer() (in module julearn.transformers)": [[49, "julearn.transformers.get_transformer"]], "list_transformers() (in module julearn.transformers)": [[50, "julearn.transformers.list_transformers"]], "register_transformer() (in module julearn.transformers)": [[51, "julearn.transformers.register_transformer"]], "reset_transformer_register() (in module julearn.transformers)": [[52, "julearn.transformers.reset_transformer_register"]], "jutargettransformer (class in julearn.transformers.target)": [[53, "julearn.transformers.target.JuTargetTransformer"]], "__init__() (julearn.transformers.target.jutargettransformer method)": [[53, "julearn.transformers.target.JuTargetTransformer.__init__"]], "fit() (julearn.transformers.target.jutargettransformer method)": [[53, "julearn.transformers.target.JuTargetTransformer.fit"]], "fit_transform() (julearn.transformers.target.jutargettransformer method)": [[53, "julearn.transformers.target.JuTargetTransformer.fit_transform"]], "transform() (julearn.transformers.target.jutargettransformer method)": [[53, "julearn.transformers.target.JuTargetTransformer.transform"]], "jutransformedtargetmodel (class in julearn.transformers.target)": [[54, "julearn.transformers.target.JuTransformedTargetModel"]], "__init__() (julearn.transformers.target.jutransformedtargetmodel method)": [[54, "julearn.transformers.target.JuTransformedTargetModel.__init__"]], "can_inverse_transform() (julearn.transformers.target.jutransformedtargetmodel method)": [[54, "julearn.transformers.target.JuTransformedTargetModel.can_inverse_transform"]], "classes_ (julearn.transformers.target.jutransformedtargetmodel property)": [[54, "julearn.transformers.target.JuTransformedTargetModel.classes_"]], "decision_function() (julearn.transformers.target.jutransformedtargetmodel method)": [[54, "julearn.transformers.target.JuTransformedTargetModel.decision_function"]], "filter_columns() (julearn.transformers.target.jutransformedtargetmodel method)": [[54, "julearn.transformers.target.JuTransformedTargetModel.filter_columns"]], "fit() (julearn.transformers.target.jutransformedtargetmodel method)": [[54, "julearn.transformers.target.JuTransformedTargetModel.fit"]], "get_apply_to() (julearn.transformers.target.jutransformedtargetmodel method)": [[54, "julearn.transformers.target.JuTransformedTargetModel.get_apply_to"]], "get_metadata_routing() (julearn.transformers.target.jutransformedtargetmodel method)": [[54, "julearn.transformers.target.JuTransformedTargetModel.get_metadata_routing"]], "get_needed_types() (julearn.transformers.target.jutransformedtargetmodel method)": [[54, "julearn.transformers.target.JuTransformedTargetModel.get_needed_types"]], "get_params() (julearn.transformers.target.jutransformedtargetmodel method)": [[54, "julearn.transformers.target.JuTransformedTargetModel.get_params"]], "predict() (julearn.transformers.target.jutransformedtargetmodel method)": [[54, "julearn.transformers.target.JuTransformedTargetModel.predict"]], "predict_proba() (julearn.transformers.target.jutransformedtargetmodel method)": [[54, "julearn.transformers.target.JuTransformedTargetModel.predict_proba"]], "score() (julearn.transformers.target.jutransformedtargetmodel method)": [[54, "julearn.transformers.target.JuTransformedTargetModel.score"]], "set_params() (julearn.transformers.target.jutransformedtargetmodel method)": [[54, "julearn.transformers.target.JuTransformedTargetModel.set_params"]], "transform_target() (julearn.transformers.target.jutransformedtargetmodel method)": [[54, "julearn.transformers.target.JuTransformedTargetModel.transform_target"]], "targetconfoundremover (class in julearn.transformers.target)": [[55, "julearn.transformers.target.TargetConfoundRemover"]], "__init__() (julearn.transformers.target.targetconfoundremover method)": [[55, "julearn.transformers.target.TargetConfoundRemover.__init__"]], "fit() (julearn.transformers.target.targetconfoundremover method)": [[55, "julearn.transformers.target.TargetConfoundRemover.fit"]], "fit_transform() (julearn.transformers.target.targetconfoundremover method)": [[55, "julearn.transformers.target.TargetConfoundRemover.fit_transform"]], "needed_types (julearn.transformers.target.targetconfoundremover property)": [[55, "julearn.transformers.target.TargetConfoundRemover.needed_types"]], "transform() (julearn.transformers.target.targetconfoundremover method)": [[55, "julearn.transformers.target.TargetConfoundRemover.transform"]], "transformedtargetwarning (class in julearn.transformers.target)": [[56, "julearn.transformers.target.TransformedTargetWarning"]], "__init__() (julearn.transformers.target.transformedtargetwarning method)": [[56, "julearn.transformers.target.TransformedTargetWarning.__init__"]], "args (julearn.transformers.target.transformedtargetwarning attribute)": [[56, "julearn.transformers.target.TransformedTargetWarning.args"]], "with_traceback() (julearn.transformers.target.transformedtargetwarning method)": [[56, "julearn.transformers.target.TransformedTargetWarning.with_traceback"]], "get_target_transformer() (in module julearn.transformers.target)": [[57, "julearn.transformers.target.get_target_transformer"]], "list_target_transformers() (in module julearn.transformers.target)": [[58, "julearn.transformers.target.list_target_transformers"]], "register_target_transformer() (in module julearn.transformers.target)": [[59, "julearn.transformers.target.register_target_transformer"]], "reset_target_transformer_register() (in module julearn.transformers.target)": [[60, "julearn.transformers.target.reset_target_transformer_register"]], "configure_logging() (in module julearn.utils)": [[61, "julearn.utils.configure_logging"]], "logger (in module julearn.utils)": [[62, "julearn.utils.logger"]], "raise_error() (in module julearn.utils)": [[63, "julearn.utils.raise_error"]], "estimatorlike (in module julearn.utils.typing)": [[64, "julearn.utils.typing.EstimatorLike"]], "estimatorlikefit1 (class in julearn.utils.typing)": [[65, "julearn.utils.typing.EstimatorLikeFit1"]], "__init__() (julearn.utils.typing.estimatorlikefit1 method)": [[65, "julearn.utils.typing.EstimatorLikeFit1.__init__"]], "fit() (julearn.utils.typing.estimatorlikefit1 method)": [[65, "julearn.utils.typing.EstimatorLikeFit1.fit"]], "get_params() (julearn.utils.typing.estimatorlikefit1 method)": [[65, "julearn.utils.typing.EstimatorLikeFit1.get_params"]], "set_params() (julearn.utils.typing.estimatorlikefit1 method)": [[65, "julearn.utils.typing.EstimatorLikeFit1.set_params"]], "estimatorlikefit2 (class in julearn.utils.typing)": [[66, "julearn.utils.typing.EstimatorLikeFit2"]], "__init__() (julearn.utils.typing.estimatorlikefit2 method)": [[66, "julearn.utils.typing.EstimatorLikeFit2.__init__"]], "fit() (julearn.utils.typing.estimatorlikefit2 method)": [[66, "julearn.utils.typing.EstimatorLikeFit2.fit"]], "get_params() (julearn.utils.typing.estimatorlikefit2 method)": [[66, "julearn.utils.typing.EstimatorLikeFit2.get_params"]], "set_params() (julearn.utils.typing.estimatorlikefit2 method)": [[66, "julearn.utils.typing.EstimatorLikeFit2.set_params"]], "estimatorlikefity (class in julearn.utils.typing)": [[67, "julearn.utils.typing.EstimatorLikeFity"]], "__init__() (julearn.utils.typing.estimatorlikefity method)": [[67, "julearn.utils.typing.EstimatorLikeFity.__init__"]], "fit() (julearn.utils.typing.estimatorlikefity method)": [[67, "julearn.utils.typing.EstimatorLikeFity.fit"]], "get_params() (julearn.utils.typing.estimatorlikefity method)": [[67, "julearn.utils.typing.EstimatorLikeFity.get_params"]], "set_params() (julearn.utils.typing.estimatorlikefity method)": [[67, "julearn.utils.typing.EstimatorLikeFity.set_params"]], "juestimatorlike (class in julearn.utils.typing)": [[68, "julearn.utils.typing.JuEstimatorLike"]], "__init__() (julearn.utils.typing.juestimatorlike method)": [[68, "julearn.utils.typing.JuEstimatorLike.__init__"]], "fit() (julearn.utils.typing.juestimatorlike method)": [[68, "julearn.utils.typing.JuEstimatorLike.fit"]], "get_apply_to() (julearn.utils.typing.juestimatorlike method)": [[68, "julearn.utils.typing.JuEstimatorLike.get_apply_to"]], "get_needed_types() (julearn.utils.typing.juestimatorlike method)": [[68, "julearn.utils.typing.JuEstimatorLike.get_needed_types"]], "get_params() (julearn.utils.typing.juestimatorlike method)": [[68, "julearn.utils.typing.JuEstimatorLike.get_params"]], "set_params() (julearn.utils.typing.juestimatorlike method)": [[68, "julearn.utils.typing.JuEstimatorLike.set_params"]], "warn_with_log() (in module julearn.utils)": [[69, "julearn.utils.warn_with_log"]], "plot_scores() (in module julearn.viz)": [[70, "julearn.viz.plot_scores"]], "julearn.inspect": [[72, "module-julearn.inspect"]], "julearn.api": [[73, "module-julearn.api"]], "julearn.model_selection": [[74, "module-julearn.model_selection"]], "julearn.models": [[75, "module-julearn.models"]], "julearn.models.dynamic": [[75, "module-julearn.models.dynamic"]], "julearn.pipeline": [[76, "module-julearn.pipeline"]], "julearn.prepare": [[77, "module-julearn.prepare"]], "julearn.scoring": [[78, "module-julearn.scoring"]], "julearn.scoring.metrics": [[78, "module-julearn.scoring.metrics"]], "julearn.stats": [[79, "module-julearn.stats"]], "julearn.transformers": [[80, "module-julearn.transformers"]], "julearn.transformers.target": [[80, "module-julearn.transformers.target"]], "julearn.utils": [[81, "module-julearn.utils"]], "julearn.utils.typing": [[81, "module-julearn.utils.typing"]], "julearn.viz": [[82, "module-julearn.viz"]]}})