
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/00_starting/run_combine_pandas.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_00_starting_run_combine_pandas.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_00_starting_run_combine_pandas.py:


Working with ``pandas``
=======================

This example uses the ``fmri`` dataset to transform and combine data in order
to prepare it to be used by ``julearn``.


References
----------

  Waskom, M.L., Frank, M.C., Wagner, A.D. (2016). Adaptive engagement of
  cognitive control in context-dependent decision-making. Cerebral Cortex.

.. include:: ../../links.inc

.. GENERATED FROM PYTHON SOURCE LINES 17-24

.. code-block:: default

    # Authors: Federico Raimondo <f.raimondo@fz-juelich.de>
    #
    # License: AGPL

    from seaborn import load_dataset
    import pandas as pd








.. GENERATED FROM PYTHON SOURCE LINES 25-44

One of the key elements that make ``julearn`` easy to use, is the possibility
to work directly with ``pandas.DataFrame``, similar to MS Excel spreadsheets
or csv files.

Ideally, we will have everything tabulated and organised for ``julearn``, but
it might not be your case. You might have some files with the fMRI values, some
others with demographics, some other with diagnostic metrics or behavioral
results.

You need to prepare these files for ``julearn``.

One option is to manually edit the files and make sure that everything is
ready to do some machine-learning. However, this is error-prone.

Fortunately, `pandas`_ provides several tools to deal with this task.

This example is a collection of some of these useful methods.

Let's start with the ``fmri`` dataset.

.. GENERATED FROM PYTHON SOURCE LINES 44-47

.. code-block:: default


    df_fmri = load_dataset("fmri")








.. GENERATED FROM PYTHON SOURCE LINES 48-50

Let's see what this dataset has.


.. GENERATED FROM PYTHON SOURCE LINES 50-52

.. code-block:: default

    df_fmri.head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>subject</th>
          <th>timepoint</th>
          <th>event</th>
          <th>region</th>
          <th>signal</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>s13</td>
          <td>18</td>
          <td>stim</td>
          <td>parietal</td>
          <td>-0.017552</td>
        </tr>
        <tr>
          <th>1</th>
          <td>s5</td>
          <td>14</td>
          <td>stim</td>
          <td>parietal</td>
          <td>-0.080883</td>
        </tr>
        <tr>
          <th>2</th>
          <td>s12</td>
          <td>18</td>
          <td>stim</td>
          <td>parietal</td>
          <td>-0.081033</td>
        </tr>
        <tr>
          <th>3</th>
          <td>s11</td>
          <td>18</td>
          <td>stim</td>
          <td>parietal</td>
          <td>-0.046134</td>
        </tr>
        <tr>
          <th>4</th>
          <td>s10</td>
          <td>18</td>
          <td>stim</td>
          <td>parietal</td>
          <td>-0.037970</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 53-61

From long to wide format
We have seen this in other examples. If we want to use julearn, each feature
must be a columns. In order to use the signals from different regions as
~~~~~~~~~~~~~~~~~~~~~~~~
features, we need to convert this dataframe from the long format to the wide
format.

We will use the ``pivot`` method.

.. GENERATED FROM PYTHON SOURCE LINES 61-65

.. code-block:: default

    df_fmri = df_fmri.pivot(
        index=["subject", "timepoint", "event"], columns="region", values="signal"
    )








.. GENERATED FROM PYTHON SOURCE LINES 66-78

This method reshapes the table, keeping the specified elements as index,
columns and values.

In our case, the values are extracted from the *signal* column. The columns
from the *region* column and *subject*, *timepoint* and *event* becomes the
index.

The index is what identifies each sample. As a rule, the index can't be
duplicated. If each subject has more than one timepoint, and each timepoint
has more than one event, then these 3 elements are needed as the index.

Let's see what we have here:

.. GENERATED FROM PYTHON SOURCE LINES 78-80

.. code-block:: default

    df_fmri.head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th></th>
          <th>region</th>
          <th>frontal</th>
          <th>parietal</th>
        </tr>
        <tr>
          <th>subject</th>
          <th>timepoint</th>
          <th>event</th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th rowspan="5" valign="top">s0</th>
          <th rowspan="2" valign="top">0</th>
          <th>cue</th>
          <td>0.007766</td>
          <td>-0.006899</td>
        </tr>
        <tr>
          <th>stim</th>
          <td>-0.021452</td>
          <td>-0.039327</td>
        </tr>
        <tr>
          <th rowspan="2" valign="top">1</th>
          <th>cue</th>
          <td>0.016440</td>
          <td>0.000300</td>
        </tr>
        <tr>
          <th>stim</th>
          <td>-0.021054</td>
          <td>-0.035735</td>
        </tr>
        <tr>
          <th>2</th>
          <th>cue</th>
          <td>0.024296</td>
          <td>0.033220</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 81-85

Now this is in the format we want. However, in order to access the index
as columns ``df_fmri["subject"]`` we need to reset the index.

Check the subtle but important difference:

.. GENERATED FROM PYTHON SOURCE LINES 85-88

.. code-block:: default

    df_fmri = df_fmri.reset_index()
    df_fmri.head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>region</th>
          <th>subject</th>
          <th>timepoint</th>
          <th>event</th>
          <th>frontal</th>
          <th>parietal</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>s0</td>
          <td>0</td>
          <td>cue</td>
          <td>0.007766</td>
          <td>-0.006899</td>
        </tr>
        <tr>
          <th>1</th>
          <td>s0</td>
          <td>0</td>
          <td>stim</td>
          <td>-0.021452</td>
          <td>-0.039327</td>
        </tr>
        <tr>
          <th>2</th>
          <td>s0</td>
          <td>1</td>
          <td>cue</td>
          <td>0.016440</td>
          <td>0.000300</td>
        </tr>
        <tr>
          <th>3</th>
          <td>s0</td>
          <td>1</td>
          <td>stim</td>
          <td>-0.021054</td>
          <td>-0.035735</td>
        </tr>
        <tr>
          <th>4</th>
          <td>s0</td>
          <td>2</td>
          <td>cue</td>
          <td>0.024296</td>
          <td>0.033220</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 89-97

Merging or joining ``DataFrame``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

So now we have our fMRI data tabulated for ``julearn``. However, it might be
the case that we have some important information in another file. For example,
the subjects' age and the place where they were scanned.

For the purpose of the example, we'll create the dataframe here.

.. GENERATED FROM PYTHON SOURCE LINES 97-105

.. code-block:: default

    metadata = {
        "subject": [f"s{i}" for i in range(14)],
        "age": [23, 21, 31, 29, 43, 23, 43, 28, 48, 29, 35, 23, 34, 25],
        "scanner": ["a"] * 6 + ["b"] * 8,
    }
    df_meta = pd.DataFrame(metadata)
    df_meta






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>subject</th>
          <th>age</th>
          <th>scanner</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>s0</td>
          <td>23</td>
          <td>a</td>
        </tr>
        <tr>
          <th>1</th>
          <td>s1</td>
          <td>21</td>
          <td>a</td>
        </tr>
        <tr>
          <th>2</th>
          <td>s2</td>
          <td>31</td>
          <td>a</td>
        </tr>
        <tr>
          <th>3</th>
          <td>s3</td>
          <td>29</td>
          <td>a</td>
        </tr>
        <tr>
          <th>4</th>
          <td>s4</td>
          <td>43</td>
          <td>a</td>
        </tr>
        <tr>
          <th>5</th>
          <td>s5</td>
          <td>23</td>
          <td>a</td>
        </tr>
        <tr>
          <th>6</th>
          <td>s6</td>
          <td>43</td>
          <td>b</td>
        </tr>
        <tr>
          <th>7</th>
          <td>s7</td>
          <td>28</td>
          <td>b</td>
        </tr>
        <tr>
          <th>8</th>
          <td>s8</td>
          <td>48</td>
          <td>b</td>
        </tr>
        <tr>
          <th>9</th>
          <td>s9</td>
          <td>29</td>
          <td>b</td>
        </tr>
        <tr>
          <th>10</th>
          <td>s10</td>
          <td>35</td>
          <td>b</td>
        </tr>
        <tr>
          <th>11</th>
          <td>s11</td>
          <td>23</td>
          <td>b</td>
        </tr>
        <tr>
          <th>12</th>
          <td>s12</td>
          <td>34</td>
          <td>b</td>
        </tr>
        <tr>
          <th>13</th>
          <td>s13</td>
          <td>25</td>
          <td>b</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 106-111

We will use the ``join`` method. This method will join the two dataframes,
matching elements by the *index*.

In this case, the matching element (or index) will be the column ``subject``.
We need to set the index in each dataframe before join.

.. GENERATED FROM PYTHON SOURCE LINES 111-116

.. code-block:: default

    df_fmri = df_fmri.set_index("subject")
    df_meta = df_meta.set_index("subject")
    df_fmri = df_fmri.join(df_meta)
    df_fmri






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>timepoint</th>
          <th>event</th>
          <th>frontal</th>
          <th>parietal</th>
          <th>age</th>
          <th>scanner</th>
        </tr>
        <tr>
          <th>subject</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>s0</th>
          <td>0</td>
          <td>cue</td>
          <td>0.007766</td>
          <td>-0.006899</td>
          <td>23</td>
          <td>a</td>
        </tr>
        <tr>
          <th>s0</th>
          <td>0</td>
          <td>stim</td>
          <td>-0.021452</td>
          <td>-0.039327</td>
          <td>23</td>
          <td>a</td>
        </tr>
        <tr>
          <th>s0</th>
          <td>1</td>
          <td>cue</td>
          <td>0.016440</td>
          <td>0.000300</td>
          <td>23</td>
          <td>a</td>
        </tr>
        <tr>
          <th>s0</th>
          <td>1</td>
          <td>stim</td>
          <td>-0.021054</td>
          <td>-0.035735</td>
          <td>23</td>
          <td>a</td>
        </tr>
        <tr>
          <th>s0</th>
          <td>2</td>
          <td>cue</td>
          <td>0.024296</td>
          <td>0.033220</td>
          <td>23</td>
          <td>a</td>
        </tr>
        <tr>
          <th>...</th>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
        </tr>
        <tr>
          <th>s9</th>
          <td>16</td>
          <td>stim</td>
          <td>-0.036739</td>
          <td>-0.131641</td>
          <td>29</td>
          <td>b</td>
        </tr>
        <tr>
          <th>s9</th>
          <td>17</td>
          <td>cue</td>
          <td>-0.004900</td>
          <td>-0.036362</td>
          <td>29</td>
          <td>b</td>
        </tr>
        <tr>
          <th>s9</th>
          <td>17</td>
          <td>stim</td>
          <td>-0.030099</td>
          <td>-0.121574</td>
          <td>29</td>
          <td>b</td>
        </tr>
        <tr>
          <th>s9</th>
          <td>18</td>
          <td>cue</td>
          <td>-0.000643</td>
          <td>-0.051040</td>
          <td>29</td>
          <td>b</td>
        </tr>
        <tr>
          <th>s9</th>
          <td>18</td>
          <td>stim</td>
          <td>-0.009959</td>
          <td>-0.103513</td>
          <td>29</td>
          <td>b</td>
        </tr>
      </tbody>
    </table>
    <p>532 rows × 6 columns</p>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 117-118

Finally, let's reset the index and have it ready for ``julearn``.

.. GENERATED FROM PYTHON SOURCE LINES 118-120

.. code-block:: default

    df_fmri = df_fmri.reset_index()








.. GENERATED FROM PYTHON SOURCE LINES 121-122

Now we can use, for example, *age* and *scanner* as confounds.

.. GENERATED FROM PYTHON SOURCE LINES 124-132

Reshaping data frames (more complex)
Lets suppose that our prediction target is now the *age* and we want to use
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
as features the frontal and parietal value during each event. For this
purpose, we need to convert the event values into columns. There are two
events: *cue* and *stim*. So this will result in 4 columns.

We will still use the pivot, but in this case, we will have two values:

.. GENERATED FROM PYTHON SOURCE LINES 132-139

.. code-block:: default

    df_fmri = df_fmri.pivot(
        index=["subject", "timepoint", "age", "scanner"],
        columns="event",
        values=["frontal", "parietal"],
    )
    df_fmri






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead tr th {
            text-align: left;
        }

        .dataframe thead tr:last-of-type th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th colspan="2" halign="left">frontal</th>
          <th colspan="2" halign="left">parietal</th>
        </tr>
        <tr>
          <th></th>
          <th></th>
          <th></th>
          <th>event</th>
          <th>cue</th>
          <th>stim</th>
          <th>cue</th>
          <th>stim</th>
        </tr>
        <tr>
          <th>subject</th>
          <th>timepoint</th>
          <th>age</th>
          <th>scanner</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th rowspan="5" valign="top">s0</th>
          <th>0</th>
          <th>23</th>
          <th>a</th>
          <td>0.007766</td>
          <td>-0.021452</td>
          <td>-0.006899</td>
          <td>-0.039327</td>
        </tr>
        <tr>
          <th>1</th>
          <th>23</th>
          <th>a</th>
          <td>0.016440</td>
          <td>-0.021054</td>
          <td>0.000300</td>
          <td>-0.035735</td>
        </tr>
        <tr>
          <th>2</th>
          <th>23</th>
          <th>a</th>
          <td>0.024296</td>
          <td>-0.009038</td>
          <td>0.033220</td>
          <td>0.009642</td>
        </tr>
        <tr>
          <th>3</th>
          <th>23</th>
          <th>a</th>
          <td>0.047859</td>
          <td>0.026727</td>
          <td>0.085040</td>
          <td>0.086399</td>
        </tr>
        <tr>
          <th>4</th>
          <th>23</th>
          <th>a</th>
          <td>0.069775</td>
          <td>0.070558</td>
          <td>0.115321</td>
          <td>0.154058</td>
        </tr>
        <tr>
          <th>...</th>
          <th>...</th>
          <th>...</th>
          <th>...</th>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
        </tr>
        <tr>
          <th rowspan="5" valign="top">s9</th>
          <th>14</th>
          <th>29</th>
          <th>b</th>
          <td>0.010535</td>
          <td>-0.061817</td>
          <td>-0.034386</td>
          <td>-0.130267</td>
        </tr>
        <tr>
          <th>15</th>
          <th>29</th>
          <th>b</th>
          <td>0.002170</td>
          <td>-0.048007</td>
          <td>-0.038257</td>
          <td>-0.134828</td>
        </tr>
        <tr>
          <th>16</th>
          <th>29</th>
          <th>b</th>
          <td>-0.004290</td>
          <td>-0.036739</td>
          <td>-0.035395</td>
          <td>-0.131641</td>
        </tr>
        <tr>
          <th>17</th>
          <th>29</th>
          <th>b</th>
          <td>-0.004900</td>
          <td>-0.030099</td>
          <td>-0.036362</td>
          <td>-0.121574</td>
        </tr>
        <tr>
          <th>18</th>
          <th>29</th>
          <th>b</th>
          <td>-0.000643</td>
          <td>-0.009959</td>
          <td>-0.051040</td>
          <td>-0.103513</td>
        </tr>
      </tbody>
    </table>
    <p>266 rows × 4 columns</p>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 140-143

Since the column names are combinations of the values in the *event* column
and the previous *frontal* and *parietal* columns, it is now a multi-level
column name.

.. GENERATED FROM PYTHON SOURCE LINES 143-145

.. code-block:: default

    df_fmri.columns





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    MultiIndex([( 'frontal',  'cue'),
                ( 'frontal', 'stim'),
                ('parietal',  'cue'),
                ('parietal', 'stim')],
               names=[None, 'event'])



.. GENERATED FROM PYTHON SOURCE LINES 146-147

The following trick will join the different levels using an underscore (*_*)

.. GENERATED FROM PYTHON SOURCE LINES 147-150

.. code-block:: default

    df_fmri.columns = ["_".join(x) for x in df_fmri.columns]
    df_fmri






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th>frontal_cue</th>
          <th>frontal_stim</th>
          <th>parietal_cue</th>
          <th>parietal_stim</th>
        </tr>
        <tr>
          <th>subject</th>
          <th>timepoint</th>
          <th>age</th>
          <th>scanner</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th rowspan="5" valign="top">s0</th>
          <th>0</th>
          <th>23</th>
          <th>a</th>
          <td>0.007766</td>
          <td>-0.021452</td>
          <td>-0.006899</td>
          <td>-0.039327</td>
        </tr>
        <tr>
          <th>1</th>
          <th>23</th>
          <th>a</th>
          <td>0.016440</td>
          <td>-0.021054</td>
          <td>0.000300</td>
          <td>-0.035735</td>
        </tr>
        <tr>
          <th>2</th>
          <th>23</th>
          <th>a</th>
          <td>0.024296</td>
          <td>-0.009038</td>
          <td>0.033220</td>
          <td>0.009642</td>
        </tr>
        <tr>
          <th>3</th>
          <th>23</th>
          <th>a</th>
          <td>0.047859</td>
          <td>0.026727</td>
          <td>0.085040</td>
          <td>0.086399</td>
        </tr>
        <tr>
          <th>4</th>
          <th>23</th>
          <th>a</th>
          <td>0.069775</td>
          <td>0.070558</td>
          <td>0.115321</td>
          <td>0.154058</td>
        </tr>
        <tr>
          <th>...</th>
          <th>...</th>
          <th>...</th>
          <th>...</th>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
        </tr>
        <tr>
          <th rowspan="5" valign="top">s9</th>
          <th>14</th>
          <th>29</th>
          <th>b</th>
          <td>0.010535</td>
          <td>-0.061817</td>
          <td>-0.034386</td>
          <td>-0.130267</td>
        </tr>
        <tr>
          <th>15</th>
          <th>29</th>
          <th>b</th>
          <td>0.002170</td>
          <td>-0.048007</td>
          <td>-0.038257</td>
          <td>-0.134828</td>
        </tr>
        <tr>
          <th>16</th>
          <th>29</th>
          <th>b</th>
          <td>-0.004290</td>
          <td>-0.036739</td>
          <td>-0.035395</td>
          <td>-0.131641</td>
        </tr>
        <tr>
          <th>17</th>
          <th>29</th>
          <th>b</th>
          <td>-0.004900</td>
          <td>-0.030099</td>
          <td>-0.036362</td>
          <td>-0.121574</td>
        </tr>
        <tr>
          <th>18</th>
          <th>29</th>
          <th>b</th>
          <td>-0.000643</td>
          <td>-0.009959</td>
          <td>-0.051040</td>
          <td>-0.103513</td>
        </tr>
      </tbody>
    </table>
    <p>266 rows × 4 columns</p>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 151-152

We have finally the information we want. We can now reset the index.

.. GENERATED FROM PYTHON SOURCE LINES 152-153

.. code-block:: default

    df_fmri = df_fmri.reset_index()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.627 seconds)


.. _sphx_glr_download_auto_examples_00_starting_run_combine_pandas.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: run_combine_pandas.py <run_combine_pandas.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: run_combine_pandas.ipynb <run_combine_pandas.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
