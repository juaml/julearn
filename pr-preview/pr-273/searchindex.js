Search.setIndex({"docnames": ["api/base", "api/generated/julearn.PipelineCreator", "api/generated/julearn.TargetPipelineCreator", "api/generated/julearn.base.ColumnTypes", "api/generated/julearn.base.ColumnTypesLike", "api/generated/julearn.base.JuBaseEstimator", "api/generated/julearn.base.JuTransformer", "api/generated/julearn.base.WrapModel", "api/generated/julearn.base.change_column_type", "api/generated/julearn.base.ensure_column_types", "api/generated/julearn.base.get_column_type", "api/generated/julearn.base.make_type_selector", "api/generated/julearn.inspect.FoldsInspector", "api/generated/julearn.inspect.Inspector", "api/generated/julearn.inspect.preprocess", "api/generated/julearn.model_selection.ContinuousStratifiedGroupKFold", "api/generated/julearn.model_selection.ContinuousStratifiedKFold", "api/generated/julearn.model_selection.RepeatedContinuousStratifiedGroupKFold", "api/generated/julearn.model_selection.RepeatedContinuousStratifiedKFold", "api/generated/julearn.model_selection.StratifiedBootstrap", "api/generated/julearn.model_selection.get_searcher", "api/generated/julearn.model_selection.list_searchers", "api/generated/julearn.model_selection.register_searcher", "api/generated/julearn.model_selection.reset_searcher_register", "api/generated/julearn.models.dynamic.DynamicSelection", "api/generated/julearn.models.get_model", "api/generated/julearn.models.list_models", "api/generated/julearn.models.register_model", "api/generated/julearn.models.reset_model_register", "api/generated/julearn.pipeline.JuTargetPipeline", "api/generated/julearn.pipeline.pipeline_creator.Step", "api/generated/julearn.prepare.check_consistency", "api/generated/julearn.prepare.prepare_input_data", "api/generated/julearn.run_cross_validation", "api/generated/julearn.run_fit", "api/generated/julearn.scoring.check_scoring", "api/generated/julearn.scoring.get_scorer", "api/generated/julearn.scoring.list_scorers", "api/generated/julearn.scoring.metrics.r2_corr", "api/generated/julearn.scoring.metrics.r_corr", "api/generated/julearn.scoring.register_scorer", "api/generated/julearn.scoring.reset_scorer_register", "api/generated/julearn.stats.corrected_ttest", "api/generated/julearn.transformers.CBPM", "api/generated/julearn.transformers.ChangeColumnTypes", "api/generated/julearn.transformers.DropColumns", "api/generated/julearn.transformers.FilterColumns", "api/generated/julearn.transformers.JuColumnTransformer", "api/generated/julearn.transformers.SetColumnTypes", "api/generated/julearn.transformers.confound_remover.ConfoundRemover", "api/generated/julearn.transformers.get_transformer", "api/generated/julearn.transformers.list_transformers", "api/generated/julearn.transformers.register_transformer", "api/generated/julearn.transformers.reset_transformer_register", "api/generated/julearn.transformers.target.JuTargetTransformer", "api/generated/julearn.transformers.target.JuTransformedTargetModel", "api/generated/julearn.transformers.target.TargetConfoundRemover", "api/generated/julearn.transformers.target.TransformedTargetWarning", "api/generated/julearn.transformers.target.get_target_transformer", "api/generated/julearn.transformers.target.list_target_transformers", "api/generated/julearn.transformers.target.register_target_transformer", "api/generated/julearn.transformers.target.reset_target_transformer_register", "api/generated/julearn.utils.configure_logging", "api/generated/julearn.utils.logger", "api/generated/julearn.utils.raise_error", "api/generated/julearn.utils.typing.EstimatorLike", "api/generated/julearn.utils.typing.EstimatorLikeFit1", "api/generated/julearn.utils.typing.EstimatorLikeFit2", "api/generated/julearn.utils.typing.EstimatorLikeFity", "api/generated/julearn.utils.typing.JuEstimatorLike", "api/generated/julearn.utils.warn_with_log", "api/generated/julearn.viz.plot_scores", "api/index", "api/inspect", "api/main", "api/model_selection", "api/models", "api/pipeline", "api/prepare", "api/scoring", "api/stats", "api/transformers", "api/utils", "api/viz", "auto_examples/00_starting/index", "auto_examples/00_starting/plot_cm_acc_multiclass", "auto_examples/00_starting/plot_example_regression", "auto_examples/00_starting/plot_stratified_kfold_reg", "auto_examples/00_starting/run_combine_pandas", "auto_examples/00_starting/run_grouped_cv", "auto_examples/00_starting/run_simple_binary_classification", "auto_examples/00_starting/sg_execution_times", "auto_examples/01_model_comparison/index", "auto_examples/01_model_comparison/plot_simple_model_comparison", "auto_examples/01_model_comparison/sg_execution_times", "auto_examples/02_inspection/index", "auto_examples/02_inspection/plot_groupcv_inspect_svm", "auto_examples/02_inspection/plot_inspect_random_forest", "auto_examples/02_inspection/plot_preprocess", "auto_examples/02_inspection/run_binary_inspect_folds", "auto_examples/02_inspection/sg_execution_times", "auto_examples/03_complex_models/index", "auto_examples/03_complex_models/run_apply_to_target", "auto_examples/03_complex_models/run_example_pca_featsets", "auto_examples/03_complex_models/run_hyperparameter_multiple_grids", "auto_examples/03_complex_models/run_hyperparameter_tuning", "auto_examples/03_complex_models/run_hyperparameter_tuning_bayessearch", "auto_examples/03_complex_models/run_stacked_models", "auto_examples/03_complex_models/sg_execution_times", "auto_examples/04_confounds/index", "auto_examples/04_confounds/plot_confound_removal_classification", "auto_examples/04_confounds/run_return_confounds", "auto_examples/04_confounds/sg_execution_times", "auto_examples/05_customization/index", "auto_examples/05_customization/run_custom_scorers_regression", "auto_examples/05_customization/sg_execution_times", "available_pipeline_steps", "configuration", "contributing", "examples", "faq", "getting_started", "index", "maintaining", "selected_deeper_topics/CBPM", "selected_deeper_topics/confound_removal", "selected_deeper_topics/cross_validation_splitter", "selected_deeper_topics/hyperparameter_tuning", "selected_deeper_topics/index", "selected_deeper_topics/model_inspect", "selected_deeper_topics/stacked_models", "selected_deeper_topics/target_transformers", "what_really_need_know/cross_validation", "what_really_need_know/data", "what_really_need_know/index", "what_really_need_know/model_comparison", "what_really_need_know/model_evaluation", "what_really_need_know/pipeline", "whats_new"], "filenames": ["api/base.rst", "api/generated/julearn.PipelineCreator.rst", "api/generated/julearn.TargetPipelineCreator.rst", "api/generated/julearn.base.ColumnTypes.rst", "api/generated/julearn.base.ColumnTypesLike.rst", "api/generated/julearn.base.JuBaseEstimator.rst", "api/generated/julearn.base.JuTransformer.rst", "api/generated/julearn.base.WrapModel.rst", "api/generated/julearn.base.change_column_type.rst", "api/generated/julearn.base.ensure_column_types.rst", "api/generated/julearn.base.get_column_type.rst", "api/generated/julearn.base.make_type_selector.rst", "api/generated/julearn.inspect.FoldsInspector.rst", "api/generated/julearn.inspect.Inspector.rst", "api/generated/julearn.inspect.preprocess.rst", "api/generated/julearn.model_selection.ContinuousStratifiedGroupKFold.rst", "api/generated/julearn.model_selection.ContinuousStratifiedKFold.rst", "api/generated/julearn.model_selection.RepeatedContinuousStratifiedGroupKFold.rst", "api/generated/julearn.model_selection.RepeatedContinuousStratifiedKFold.rst", "api/generated/julearn.model_selection.StratifiedBootstrap.rst", "api/generated/julearn.model_selection.get_searcher.rst", "api/generated/julearn.model_selection.list_searchers.rst", "api/generated/julearn.model_selection.register_searcher.rst", "api/generated/julearn.model_selection.reset_searcher_register.rst", "api/generated/julearn.models.dynamic.DynamicSelection.rst", "api/generated/julearn.models.get_model.rst", "api/generated/julearn.models.list_models.rst", "api/generated/julearn.models.register_model.rst", "api/generated/julearn.models.reset_model_register.rst", "api/generated/julearn.pipeline.JuTargetPipeline.rst", "api/generated/julearn.pipeline.pipeline_creator.Step.rst", "api/generated/julearn.prepare.check_consistency.rst", "api/generated/julearn.prepare.prepare_input_data.rst", "api/generated/julearn.run_cross_validation.rst", "api/generated/julearn.run_fit.rst", "api/generated/julearn.scoring.check_scoring.rst", "api/generated/julearn.scoring.get_scorer.rst", "api/generated/julearn.scoring.list_scorers.rst", "api/generated/julearn.scoring.metrics.r2_corr.rst", "api/generated/julearn.scoring.metrics.r_corr.rst", "api/generated/julearn.scoring.register_scorer.rst", "api/generated/julearn.scoring.reset_scorer_register.rst", "api/generated/julearn.stats.corrected_ttest.rst", "api/generated/julearn.transformers.CBPM.rst", "api/generated/julearn.transformers.ChangeColumnTypes.rst", "api/generated/julearn.transformers.DropColumns.rst", "api/generated/julearn.transformers.FilterColumns.rst", "api/generated/julearn.transformers.JuColumnTransformer.rst", "api/generated/julearn.transformers.SetColumnTypes.rst", "api/generated/julearn.transformers.confound_remover.ConfoundRemover.rst", "api/generated/julearn.transformers.get_transformer.rst", "api/generated/julearn.transformers.list_transformers.rst", "api/generated/julearn.transformers.register_transformer.rst", "api/generated/julearn.transformers.reset_transformer_register.rst", "api/generated/julearn.transformers.target.JuTargetTransformer.rst", "api/generated/julearn.transformers.target.JuTransformedTargetModel.rst", "api/generated/julearn.transformers.target.TargetConfoundRemover.rst", "api/generated/julearn.transformers.target.TransformedTargetWarning.rst", "api/generated/julearn.transformers.target.get_target_transformer.rst", "api/generated/julearn.transformers.target.list_target_transformers.rst", "api/generated/julearn.transformers.target.register_target_transformer.rst", "api/generated/julearn.transformers.target.reset_target_transformer_register.rst", "api/generated/julearn.utils.configure_logging.rst", "api/generated/julearn.utils.logger.rst", "api/generated/julearn.utils.raise_error.rst", "api/generated/julearn.utils.typing.EstimatorLike.rst", "api/generated/julearn.utils.typing.EstimatorLikeFit1.rst", "api/generated/julearn.utils.typing.EstimatorLikeFit2.rst", "api/generated/julearn.utils.typing.EstimatorLikeFity.rst", "api/generated/julearn.utils.typing.JuEstimatorLike.rst", "api/generated/julearn.utils.warn_with_log.rst", "api/generated/julearn.viz.plot_scores.rst", "api/index.rst", "api/inspect.rst", "api/main.rst", "api/model_selection.rst", "api/models.rst", "api/pipeline.rst", "api/prepare.rst", "api/scoring.rst", "api/stats.rst", "api/transformers.rst", "api/utils.rst", "api/viz.rst", "auto_examples/00_starting/index.rst", "auto_examples/00_starting/plot_cm_acc_multiclass.rst", "auto_examples/00_starting/plot_example_regression.rst", "auto_examples/00_starting/plot_stratified_kfold_reg.rst", "auto_examples/00_starting/run_combine_pandas.rst", "auto_examples/00_starting/run_grouped_cv.rst", "auto_examples/00_starting/run_simple_binary_classification.rst", "auto_examples/00_starting/sg_execution_times.rst", "auto_examples/01_model_comparison/index.rst", "auto_examples/01_model_comparison/plot_simple_model_comparison.rst", "auto_examples/01_model_comparison/sg_execution_times.rst", "auto_examples/02_inspection/index.rst", "auto_examples/02_inspection/plot_groupcv_inspect_svm.rst", "auto_examples/02_inspection/plot_inspect_random_forest.rst", "auto_examples/02_inspection/plot_preprocess.rst", "auto_examples/02_inspection/run_binary_inspect_folds.rst", "auto_examples/02_inspection/sg_execution_times.rst", "auto_examples/03_complex_models/index.rst", "auto_examples/03_complex_models/run_apply_to_target.rst", "auto_examples/03_complex_models/run_example_pca_featsets.rst", "auto_examples/03_complex_models/run_hyperparameter_multiple_grids.rst", "auto_examples/03_complex_models/run_hyperparameter_tuning.rst", "auto_examples/03_complex_models/run_hyperparameter_tuning_bayessearch.rst", "auto_examples/03_complex_models/run_stacked_models.rst", "auto_examples/03_complex_models/sg_execution_times.rst", "auto_examples/04_confounds/index.rst", "auto_examples/04_confounds/plot_confound_removal_classification.rst", "auto_examples/04_confounds/run_return_confounds.rst", "auto_examples/04_confounds/sg_execution_times.rst", "auto_examples/05_customization/index.rst", "auto_examples/05_customization/run_custom_scorers_regression.rst", "auto_examples/05_customization/sg_execution_times.rst", "available_pipeline_steps.rst", "configuration.rst", "contributing.rst", "examples.rst", "faq.rst", "getting_started.rst", "index.rst", "maintaining.rst", "selected_deeper_topics/CBPM.rst", "selected_deeper_topics/confound_removal.rst", "selected_deeper_topics/cross_validation_splitter.rst", "selected_deeper_topics/hyperparameter_tuning.rst", "selected_deeper_topics/index.rst", "selected_deeper_topics/model_inspect.rst", "selected_deeper_topics/stacked_models.rst", "selected_deeper_topics/target_transformers.rst", "what_really_need_know/cross_validation.rst", "what_really_need_know/data.rst", "what_really_need_know/index.rst", "what_really_need_know/model_comparison.rst", "what_really_need_know/model_evaluation.rst", "what_really_need_know/pipeline.rst", "whats_new.rst"], "titles": ["<span class=\"section-number\">9.4. </span>Base", "julearn.PipelineCreator", "julearn.TargetPipelineCreator", "julearn.base.ColumnTypes", "julearn.base.ColumnTypesLike", "julearn.base.JuBaseEstimator", "julearn.base.JuTransformer", "julearn.base.WrapModel", "julearn.base.change_column_type", "julearn.base.ensure_column_types", "julearn.base.get_column_type", "julearn.base.make_type_selector", "julearn.inspect.FoldsInspector", "julearn.inspect.Inspector", "julearn.inspect.preprocess", "julearn.model_selection.ContinuousStratifiedGroupKFold", "julearn.model_selection.ContinuousStratifiedKFold", "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold", "julearn.model_selection.RepeatedContinuousStratifiedKFold", "julearn.model_selection.StratifiedBootstrap", "julearn.model_selection.get_searcher", "julearn.model_selection.list_searchers", "julearn.model_selection.register_searcher", "julearn.model_selection.reset_searcher_register", "julearn.models.dynamic.DynamicSelection", "julearn.models.get_model", "julearn.models.list_models", "julearn.models.register_model", "julearn.models.reset_model_register", "julearn.pipeline.JuTargetPipeline", "julearn.pipeline.pipeline_creator.Step", "julearn.prepare.check_consistency", "julearn.prepare.prepare_input_data", "julearn.run_cross_validation", "julearn.run_fit", "julearn.scoring.check_scoring", "julearn.scoring.get_scorer", "julearn.scoring.list_scorers", "julearn.scoring.metrics.r2_corr", "julearn.scoring.metrics.r_corr", "julearn.scoring.register_scorer", "julearn.scoring.reset_scorer_register", "julearn.stats.corrected_ttest", "julearn.transformers.CBPM", "julearn.transformers.ChangeColumnTypes", "julearn.transformers.DropColumns", "julearn.transformers.FilterColumns", "julearn.transformers.JuColumnTransformer", "julearn.transformers.SetColumnTypes", "julearn.transformers.confound_remover.ConfoundRemover", "julearn.transformers.get_transformer", "julearn.transformers.list_transformers", "julearn.transformers.register_transformer", "julearn.transformers.reset_transformer_register", "julearn.transformers.target.JuTargetTransformer", "julearn.transformers.target.JuTransformedTargetModel", "julearn.transformers.target.TargetConfoundRemover", "julearn.transformers.target.TransformedTargetWarning", "julearn.transformers.target.get_target_transformer", "julearn.transformers.target.list_target_transformers", "julearn.transformers.target.register_target_transformer", "julearn.transformers.target.reset_target_transformer_register", "julearn.utils.configure_logging", "julearn.utils.logger", "julearn.utils.raise_error", "julearn.utils.typing.EstimatorLike", "julearn.utils.typing.EstimatorLikeFit1", "julearn.utils.typing.EstimatorLikeFit2", "julearn.utils.typing.EstimatorLikeFity", "julearn.utils.typing.JuEstimatorLike", "julearn.utils.warn_with_log", "julearn.viz.plot_scores", "<span class=\"section-number\">9. </span>API Reference", "<span class=\"section-number\">9.5. </span>Inspect", "<span class=\"section-number\">9.1. </span>Main API", "<span class=\"section-number\">9.3. </span>Model Selection", "<span class=\"section-number\">9.6. </span>Models", "<span class=\"section-number\">9.2. </span>Pipeline", "<span class=\"section-number\">9.14. </span>Prepare", "<span class=\"section-number\">9.8. </span>Scoring", "<span class=\"section-number\">9.15. </span>Stats", "<span class=\"section-number\">9.10. </span>Transformers", "<span class=\"section-number\">9.12. </span>Utils", "<span class=\"section-number\">9.16. </span>Visualization", "<span class=\"section-number\">8.1. </span>Starting with <code class=\"docutils literal notranslate\"><span class=\"pre\">julearn</span></code>", "Multiclass Classification", "Regression Analysis", "Stratified K-fold CV for regression analysis", "Working with <code class=\"docutils literal notranslate\"><span class=\"pre\">pandas</span></code>", "Grouped CV", "Simple Binary Classification", "Computation times", "<span class=\"section-number\">8.2. </span>Model Comparison", "Simple Model Comparison", "Computation times", "<span class=\"section-number\">8.3. </span>Inspection", "Inspecting SVM models", "Inspecting Random Forest models", "Preprocessing with variance threshold, zscore and PCA", "Inspecting the fold-wise predictions", "Computation times", "<span class=\"section-number\">8.4. </span>Complex Models", "Transforming target variable with z-score", "Regression Analysis", "Tuning Multiple Hyperparameters Grids", "Tuning Hyperparameters", "Tuning Hyperparameters using Bayesian Search", "Stacking Classification", "Computation times", "<span class=\"section-number\">8.5. </span>Confounds", "Confound Removal (model comparison)", "Return Confounds in Confound Removal", "Computation times", "<span class=\"section-number\">8.6. </span>Customization", "Custom Scoring Function for Regression", "Computation times", "<span class=\"section-number\">7. </span>Overview of available Pipeline Steps", "<span class=\"section-number\">10. </span>Configuring <code class=\"docutils literal notranslate\"><span class=\"pre\">julearn</span></code>", "<span class=\"section-number\">11. </span>Contributing", "<span class=\"section-number\">8. </span>Examples", "<span class=\"section-number\">13. </span>FAQs", "<span class=\"section-number\">1. </span>Getting started", "Welcome to julearn\u2019s documentation!", "<span class=\"section-number\">12. </span>Maintaining", "<span class=\"section-number\">6.7. </span>Connectome-based Predictive Modeling (CBPM)", "<span class=\"section-number\">6.2. </span>Cross-validation consistent Confound Removal", "<span class=\"section-number\">6.5. </span>Cross-validation splitters", "<span class=\"section-number\">6.3. </span>Hyperparameter Tuning", "<span class=\"section-number\">6. </span>Selected deeper topics", "<span class=\"section-number\">6.4. </span>Inspecting Models", "<span class=\"section-number\">6.6. </span>Stacking Models", "<span class=\"section-number\">6.1. </span>Applying preprocessing to the target", "<span class=\"section-number\">5.1. </span>Why cross validation?", "<span class=\"section-number\">5.2. </span>Data", "<span class=\"section-number\">5. </span>What you really need to know", "<span class=\"section-number\">5.5. </span>Model Comparison", "<span class=\"section-number\">5.4. </span>Model Evaluation", "<span class=\"section-number\">5.3. </span>Model Building", "<span class=\"section-number\">14. </span>What\u2019s new"], "terms": {"provid": [0, 1, 3, 5, 13, 15, 16, 19, 24, 33, 34, 55, 76, 88, 111, 117, 122, 125, 126, 127, 129, 130, 132, 133, 135, 136, 137, 138], "import": [0, 29, 54, 85, 86, 87, 88, 89, 90, 93, 96, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 118, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137], "modul": [0, 33, 76, 83, 111, 117, 121, 122, 131, 132], "thi": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 76, 83, 85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 116, 117, 118, 120, 121, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137], "page": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 122, 125, 126, 136], "i": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 83, 85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 102, 103, 104, 105, 106, 110, 111, 114, 116, 117, 118, 121, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138], "refer": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 98, 116, 118, 122, 127, 134], "document": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 83, 87, 93, 97, 116, 126, 127, 135, 136, 137], "It": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 96, 104, 105, 106, 121, 122, 124, 126, 127, 129, 136, 137], "onli": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 87, 96, 98, 104, 110, 111, 124, 125, 126, 127, 129, 130, 131, 132, 133, 135, 136, 137, 138], "explain": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 126, 137], "class": [1, 2, 3, 4, 5, 6, 7, 12, 13, 15, 16, 17, 18, 19, 20, 22, 24, 27, 29, 30, 33, 34, 43, 44, 45, 46, 47, 48, 49, 52, 54, 55, 56, 57, 60, 63, 64, 65, 66, 67, 68, 69, 70, 85, 87, 89, 90, 93, 96, 97, 99, 104, 105, 106, 107, 110, 111, 116, 125, 126, 127, 129, 135, 136, 137], "signatur": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "how": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 84, 89, 90, 93, 95, 96, 97, 101, 103, 111, 116, 118, 121, 122, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138], "pleas": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 76, 83, 98, 111, 118, 122, 136, 137], "what": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 88, 89, 96, 103, 105, 111, 116, 125, 126, 127, 129, 130, 131, 133, 136, 137], "you": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 85, 88, 93, 98, 111, 117, 118, 120, 121, 122, 123, 124, 125, 126, 129, 130, 132, 133, 135, 136, 137], "realli": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 110, 122], "need": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 88, 89, 90, 93, 96, 102, 110, 111, 114, 118, 120, 121, 122, 124, 125, 126, 127, 129, 131, 132, 135, 136, 137, 138], "know": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 103, 105, 122, 126, 129, 132, 135, 137], "section": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 126, 133, 135, 136, 137, 138], "big": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "pictur": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "problem_typ": [1, 25, 31, 33, 34, 85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 124, 125, 127, 129, 130, 131, 135, 136, 137], "apply_to": [1, 5, 6, 7, 30, 44, 45, 46, 47, 48, 49, 55, 98, 102, 103, 107, 110, 111, 125, 129, 130, 131, 137], "continu": [1, 7, 30, 44, 46, 48, 49, 85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 110, 111, 114, 124, 126, 127, 129, 130, 131, 133, 135, 136, 137, 138], "creat": [1, 2, 3, 43, 85, 87, 88, 90, 96, 98, 102, 103, 107, 116, 118, 120, 123, 124, 125, 126, 127, 129, 130, 131, 135, 136, 137], "pipelin": [1, 2, 5, 6, 7, 14, 15, 24, 31, 32, 33, 34, 35, 43, 44, 45, 46, 47, 48, 49, 54, 55, 72, 78, 96, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 122, 124, 125, 127, 129, 130, 131, 132, 133, 134, 135, 136, 138], "As": [1, 88, 90, 93, 99, 107, 110, 111, 114, 118, 120, 124, 125, 126, 127, 129, 130, 135, 136, 137], "creation": 1, "bit": [1, 104, 121, 127, 130, 136], "more": [1, 3, 33, 34, 42, 85, 86, 87, 88, 89, 90, 93, 96, 98, 103, 110, 114, 118, 121, 122, 125, 126, 128, 129, 130, 132, 134, 135, 136, 137, 138], "complic": [1, 132], "than": [1, 33, 34, 42, 87, 88, 96, 122, 125, 126, 128, 137], "just": [1, 118, 122, 126, 129, 134, 137], "ad": [1, 6, 33, 34, 43, 44, 45, 46, 47, 48, 49, 85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 122, 124, 125, 127, 129, 130, 131, 133, 135, 136, 137, 138], "step": [1, 2, 14, 29, 33, 34, 42, 85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 118, 122, 124, 125, 127, 129, 130, 131, 132, 133, 135, 136, 137], "helper": 1, "so": [1, 5, 6, 7, 24, 40, 43, 44, 45, 46, 47, 48, 49, 55, 87, 88, 90, 93, 98, 105, 116, 118, 120, 121, 126, 127, 131, 133, 136, 137], "user": [1, 5, 6, 7, 15, 16, 17, 18, 19, 22, 24, 27, 33, 34, 40, 43, 44, 45, 46, 47, 48, 49, 52, 55, 57, 60, 62, 98, 111, 114, 117, 121, 122, 125, 127, 132, 137, 138], "can": [1, 3, 15, 16, 17, 18, 19, 22, 24, 27, 29, 31, 33, 34, 40, 42, 43, 47, 49, 52, 55, 60, 85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 110, 111, 114, 116, 117, 118, 120, 122, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138], "easili": [1, 124, 126], "complex": [1, 88, 96, 107, 119, 122, 125, 126, 127, 129, 137], "sklearn": [1, 3, 5, 7, 11, 15, 24, 29, 47, 49, 56, 85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 124, 125, 126, 127, 129, 130, 131, 135, 136], "object": [1, 2, 5, 6, 7, 15, 16, 17, 18, 19, 24, 25, 31, 33, 34, 36, 40, 43, 44, 45, 46, 47, 48, 49, 50, 52, 55, 58, 85, 87, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 120, 125, 127, 129, 130, 131, 136, 137, 138], "paramet": [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 54, 55, 56, 58, 60, 62, 64, 66, 67, 68, 69, 70, 71, 78, 85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 116, 117, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138], "classif": [1, 27, 31, 33, 34, 62, 84, 89, 91, 93, 96, 97, 99, 101, 104, 105, 106, 108, 110, 118, 126, 127, 129, 130, 135, 136, 137], "regress": [1, 14, 15, 16, 27, 31, 33, 34, 40, 62, 84, 91, 98, 101, 102, 107, 108, 111, 113, 115, 116, 124, 127, 128, 130, 131, 135, 136, 137, 138], "The": [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 27, 29, 30, 31, 32, 33, 34, 38, 39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 54, 55, 56, 58, 60, 62, 64, 66, 67, 68, 69, 70, 71, 85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 129, 130, 133, 134, 135, 137, 138], "problem": [1, 15, 16, 17, 18, 19, 25, 27, 31, 33, 34, 85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 117, 124, 125, 126, 127, 129, 130, 131, 132, 135, 136, 137, 138], "type": [1, 3, 5, 6, 7, 8, 10, 11, 14, 25, 27, 29, 30, 31, 32, 33, 34, 44, 45, 46, 47, 48, 49, 55, 56, 72, 85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 116, 117, 118, 122, 124, 125, 127, 128, 129, 131, 132, 134, 135, 136], "which": [1, 5, 6, 15, 16, 22, 27, 30, 33, 34, 43, 44, 45, 46, 47, 48, 49, 52, 56, 60, 83, 86, 87, 89, 90, 96, 98, 102, 103, 104, 105, 106, 110, 111, 114, 118, 124, 125, 126, 127, 129, 130, 131, 132, 134, 136, 137, 138], "should": [1, 5, 6, 15, 19, 22, 24, 27, 30, 40, 43, 44, 45, 46, 47, 48, 49, 52, 60, 87, 98, 103, 110, 111, 116, 118, 123, 124, 126, 127, 128, 131, 132, 136, 137], "columntypeslik": [1, 30, 44, 45, 46, 47, 49, 111], "option": [1, 2, 6, 7, 13, 14, 15, 22, 24, 27, 30, 33, 34, 40, 42, 43, 44, 45, 46, 47, 48, 49, 52, 56, 60, 62, 64, 66, 67, 68, 69, 70, 71, 76, 83, 87, 88, 97, 110, 111, 120, 122, 123, 126, 127, 133, 136, 138], "To": [1, 47, 49, 96, 98, 104, 111, 118, 120, 122, 124, 126, 127, 130, 132, 133, 135, 136, 137], "transform": [1, 2, 6, 29, 33, 34, 35, 62, 72, 88, 98, 101, 106, 108, 111, 122, 124, 125, 127, 129, 131, 132, 137, 138], "appli": [1, 2, 5, 6, 7, 30, 33, 34, 43, 44, 45, 46, 47, 48, 49, 55, 56, 69, 85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 122, 124, 125, 127, 128, 129, 130, 135, 136, 137], "specifi": [1, 19, 20, 22, 32, 33, 34, 46, 49, 56, 58, 88, 96, 97, 103, 104, 111, 116, 121, 122, 124, 125, 130, 131, 132, 133, 134, 136, 137, 138], "add": [1, 2, 3, 22, 27, 52, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 118, 124, 125, 126, 127, 129, 130, 131, 133, 135, 136, 137, 138], "method": [1, 5, 6, 7, 15, 16, 17, 18, 24, 42, 43, 44, 45, 46, 47, 48, 49, 55, 87, 88, 98, 104, 111, 117, 121, 124, 126, 127, 129, 137], "default": [1, 2, 5, 6, 7, 13, 14, 15, 16, 17, 18, 19, 22, 24, 27, 28, 30, 33, 34, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 55, 56, 60, 62, 64, 66, 67, 68, 69, 70, 71, 93, 96, 98, 104, 105, 107, 110, 111, 116, 120, 121, 124, 125, 127, 135, 136, 137, 138], "__init__": [1, 2, 3, 5, 6, 7, 12, 13, 15, 16, 17, 18, 19, 24, 29, 30, 43, 44, 45, 46, 47, 48, 49, 54, 55, 56, 57, 66, 67, 68, 69], "name": [1, 2, 5, 6, 7, 8, 14, 15, 20, 21, 22, 24, 25, 26, 27, 30, 33, 34, 36, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 58, 59, 60, 62, 85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 116, 117, 118, 125, 127, 129, 130, 131, 132, 133, 135, 136, 137], "none": [1, 2, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 22, 24, 27, 29, 30, 31, 32, 33, 34, 40, 42, 43, 44, 45, 46, 47, 48, 49, 52, 56, 60, 62, 64, 86, 87, 88, 89, 90, 93, 96, 97, 98, 102, 103, 104, 105, 106, 107, 110, 111, 114, 124, 125, 127, 129, 130, 131, 135, 136, 137], "row_select_col_typ": [1, 6, 30, 44, 45, 46, 47, 48, 49, 111], "row_select_v": [1, 6, 30, 44, 45, 46, 47, 48, 49, 111], "param": [1, 2, 5, 6, 7, 24, 43, 44, 45, 46, 47, 48, 49, 50, 55, 58, 66, 67, 68, 69, 121, 124, 125, 127, 129, 131, 137], "estimatorlik": [1, 35, 47], "an": [1, 2, 6, 15, 16, 17, 18, 19, 24, 31, 33, 34, 36, 43, 44, 45, 46, 47, 48, 49, 85, 88, 89, 90, 93, 96, 97, 98, 105, 110, 117, 118, 122, 124, 125, 126, 127, 129, 130, 131, 132, 133, 135, 136, 137, 138], "available_transform": 1, "available_model": 1, "str": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 58, 59, 60, 62, 64, 70, 85, 86, 103, 111, 136, 137], "compat": [1, 15, 16, 17, 18, 19, 20, 22, 24, 33, 34, 44, 45, 46, 47, 48, 49, 50, 56, 111, 121, 124, 136, 137, 138], "model": [1, 6, 7, 13, 14, 19, 33, 34, 37, 42, 43, 44, 45, 46, 47, 48, 49, 55, 56, 62, 71, 72, 79, 85, 86, 87, 89, 90, 94, 95, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 111, 112, 114, 117, 119, 122, 125, 126, 128, 131, 132, 134, 138], "If": [1, 2, 5, 6, 7, 13, 14, 19, 20, 22, 24, 27, 31, 32, 33, 34, 43, 44, 45, 46, 47, 48, 49, 52, 55, 58, 60, 62, 88, 90, 96, 98, 110, 111, 114, 117, 118, 121, 122, 125, 126, 127, 133, 134, 136, 137], "obtain": [1, 2, 7, 55, 97, 125, 132], "from": [1, 2, 3, 5, 24, 29, 32, 33, 34, 43, 44, 49, 52, 54, 56, 60, 85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 116, 118, 121, 122, 123, 124, 126, 127, 129, 130, 131, 133, 135, 136, 137, 138], "repres": [1, 3, 19, 30, 49, 56, 87, 111, 126, 136], "column": [1, 3, 5, 6, 7, 8, 10, 11, 14, 24, 30, 32, 33, 34, 44, 45, 46, 47, 48, 49, 55, 56, 69, 85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 110, 111, 114, 116, 117, 124, 125, 127, 129, 130, 131, 133, 135, 136, 137, 138], "list": [1, 3, 4, 5, 6, 7, 13, 14, 21, 26, 29, 30, 32, 33, 34, 37, 44, 45, 46, 47, 48, 49, 51, 56, 59, 104, 106, 111, 116, 117, 127, 129, 133, 136, 137, 138], "attribut": [1, 5, 7, 9, 22, 24, 43, 55, 129], "set": [1, 3, 4, 5, 6, 7, 13, 15, 16, 17, 18, 19, 22, 24, 29, 30, 33, 34, 40, 43, 44, 45, 46, 47, 48, 49, 55, 56, 57, 66, 67, 68, 69, 85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 117, 119, 122, 123, 124, 125, 126, 127, 129, 130, 132, 134, 135, 136, 138], "columntyp": [1, 4, 5, 6, 7, 9, 30, 44, 45, 46, 47, 48, 49, 55, 56, 69, 85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 124, 125, 127, 129, 130, 131, 135, 136, 137], "select": [1, 6, 7, 11, 24, 30, 44, 45, 46, 47, 48, 49, 72, 98, 111, 122, 124, 126, 127, 129, 133, 134, 135], "row": [1, 6, 30, 44, 45, 46, 47, 48, 49, 86, 87, 88, 89, 93, 96, 98, 99, 102, 103, 111, 114, 129, 131, 135, 136, 137], "int": [1, 6, 13, 15, 16, 17, 18, 19, 24, 30, 31, 32, 33, 34, 42, 43, 44, 45, 46, 47, 48, 49, 62, 71, 111, 136], "bool": [1, 5, 6, 7, 14, 15, 16, 22, 24, 27, 29, 30, 33, 35, 40, 43, 44, 45, 46, 47, 48, 49, 52, 55, 60, 62, 66, 67, 68, 69, 111], "valu": [1, 5, 6, 7, 19, 24, 30, 33, 34, 38, 39, 43, 44, 45, 46, 47, 48, 49, 55, 56, 85, 86, 87, 88, 89, 90, 96, 97, 98, 102, 103, 104, 105, 106, 110, 111, 114, 116, 117, 124, 126, 127, 129, 133, 136, 137], "": [1, 5, 6, 7, 15, 16, 24, 30, 33, 43, 44, 45, 46, 47, 48, 49, 55, 56, 62, 85, 86, 87, 88, 89, 96, 98, 102, 103, 104, 105, 110, 111, 114, 116, 117, 118, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137], "train": [1, 6, 15, 16, 17, 18, 19, 24, 30, 33, 43, 44, 45, 46, 47, 48, 49, 56, 85, 86, 87, 89, 96, 98, 102, 103, 110, 111, 114, 125, 126, 127, 129, 131, 132, 135, 136, 137], "mostli": [1, 2, 126], "includ": [1, 2, 14, 19, 97, 98, 111, 117, 118, 121, 127, 132], "hyperparamet": [1, 2, 22, 33, 34, 62, 93, 98, 101, 103, 107, 108, 110, 111, 122, 124, 125, 128, 129, 130, 134, 135, 138], "ani": [1, 2, 6, 7, 22, 24, 27, 29, 30, 31, 32, 33, 34, 40, 44, 45, 46, 47, 48, 49, 52, 54, 60, 87, 117, 124, 126, 127, 129, 137], "other": [1, 2, 15, 22, 24, 27, 52, 83, 88, 90, 103, 105, 111, 118, 120, 124, 125, 126, 127, 134, 135, 137], "initi": [1, 2, 22, 23, 42, 52, 53, 60, 61, 110, 125, 130, 137], "multipl": [1, 15, 16, 17, 18, 19, 33, 62, 98, 101, 108, 126, 127, 136, 137, 138], "lead": [1, 121, 125, 126, 132, 137], "search": [1, 21, 22, 33, 34, 62, 98, 101, 104, 105, 108, 122, 127, 129, 130], "return": [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 29, 32, 33, 34, 36, 37, 38, 39, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 56, 57, 58, 59, 66, 67, 68, 69, 87, 96, 97, 109, 112, 114, 137, 138], "its": [1, 5, 23, 53, 61, 118, 127, 129, 130, 132, 134, 137], "last": [1, 98, 103, 111, 123, 125, 137], "rais": [1, 13, 15, 20, 22, 24, 27, 31, 32, 40, 52, 58, 60, 62, 64, 133, 138], "valueerror": [1, 13, 20, 22, 27, 31, 32, 40, 52, 58, 60, 64], "valid": [1, 2, 13, 15, 16, 17, 18, 19, 31, 32, 33, 34, 78, 85, 86, 97, 103, 110, 111, 116, 122, 124, 127, 128, 129, 133, 134, 135, 137, 138], "targetpipelinecr": [1, 102, 116, 125, 131], "target": [1, 2, 6, 7, 13, 15, 16, 17, 18, 19, 24, 29, 31, 32, 33, 34, 35, 43, 44, 45, 46, 47, 48, 49, 62, 66, 67, 68, 69, 72, 85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 110, 111, 114, 116, 122, 124, 126, 127, 128, 129, 130, 133, 135, 136, 137, 138], "properti": [1, 3, 7, 13, 29, 55, 56, 126], "get": [1, 3, 5, 6, 7, 10, 15, 16, 17, 18, 19, 20, 24, 25, 29, 36, 43, 44, 45, 46, 47, 48, 49, 50, 55, 56, 58, 66, 67, 68, 69, 85, 86, 89, 96, 97, 98, 103, 111, 122, 124, 129, 130, 135, 136], "have": [1, 5, 6, 7, 15, 16, 24, 32, 43, 44, 45, 46, 47, 48, 49, 55, 85, 88, 89, 90, 93, 96, 98, 104, 105, 106, 110, 111, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137], "been": [1, 57, 124, 126, 129, 138], "has_model": 1, "whether": [1, 14, 15, 16, 22, 27, 33, 40, 43, 49, 52, 60, 66, 67, 68, 69, 89, 93, 96, 111, 118, 125, 136], "ha": [1, 15, 24, 33, 34, 43, 57, 85, 86, 87, 88, 89, 90, 93, 96, 97, 99, 103, 107, 110, 114, 117, 118, 124, 125, 126, 127, 129, 132, 136, 137, 138], "copi": [1, 3, 87, 111, 118, 129], "classmethod": 1, "from_list": 1, "model_param": [1, 33, 34, 93, 138], "union": [1, 4, 29, 35, 65], "dict": [1, 5, 6, 7, 24, 25, 30, 32, 33, 34, 43, 44, 45, 46, 47, 48, 49, 50, 55, 66, 67, 68, 69], "kei": [1, 32, 33, 34, 44, 48, 88, 98, 133], "being": [1, 118, 121, 136, 137, 138], "pieplin": 1, "split": [1, 15, 16, 17, 18, 19, 24, 33, 34, 85, 86, 87, 90, 93, 96, 102, 103, 114, 125, 126, 127, 129, 132, 136], "least": [1, 15, 16, 17, 18, 33, 34, 87, 110, 116, 126], "two": [1, 42, 87, 88, 90, 93, 96, 97, 98, 99, 103, 104, 107, 110, 111, 114, 118, 124, 125, 126, 127, 130, 132, 135, 137], "same": [1, 15, 16, 33, 34, 48, 62, 90, 93, 96, 104, 105, 106, 110, 114, 118, 122, 124, 125, 126, 127, 130, 132, 135, 136, 137, 138], "consid": [1, 111, 117, 118, 123, 125, 127, 133, 136], "point": [1, 110, 118, 125, 126, 132, 134, 135, 136, 137], "tune": [1, 30, 33, 34, 62, 101, 108, 122, 124, 125, 128, 129, 130, 131, 137, 138], "function": [1, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 50, 51, 52, 53, 55, 58, 59, 60, 61, 62, 64, 70, 71, 84, 90, 93, 96, 97, 98, 109, 111, 113, 115, 117, 118, 120, 121, 122, 124, 125, 127, 132, 133, 134, 135, 136, 137, 138], "one": [1, 29, 33, 34, 42, 44, 45, 46, 48, 54, 86, 87, 88, 89, 96, 98, 102, 103, 104, 105, 106, 107, 111, 114, 116, 118, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138], "each": [1, 5, 6, 7, 15, 16, 17, 18, 19, 24, 32, 33, 34, 43, 44, 45, 46, 47, 48, 49, 55, 56, 85, 86, 87, 88, 89, 96, 97, 98, 99, 103, 110, 111, 114, 116, 118, 124, 125, 126, 127, 128, 129, 132, 135, 136, 137], "recurs": 1, "thu": [1, 5, 96, 132], "mani": [1, 43, 89, 96, 125, 126, 127, 136, 137], "all": [1, 3, 14, 21, 22, 26, 33, 34, 37, 43, 44, 48, 49, 51, 56, 59, 85, 86, 89, 90, 96, 97, 98, 103, 110, 111, 114, 116, 118, 121, 123, 124, 125, 127, 128, 129, 131, 132, 133, 134, 136, 137, 138], "configur": [1, 6, 43, 44, 45, 46, 47, 48, 49, 62, 122, 125, 129, 130, 137], "A": [1, 5, 6, 7, 13, 15, 16, 17, 18, 19, 21, 24, 26, 32, 33, 34, 43, 44, 45, 46, 47, 48, 49, 51, 55, 59, 87, 88, 89, 90, 96, 104, 105, 106, 107, 111, 124, 125, 126, 127, 132, 133, 137], "without": [1, 22, 27, 40, 52, 60, 87, 89, 105, 110, 111, 116, 132], "repeat": [1, 17, 18, 85, 86, 103, 111, 114, 125, 126, 127, 129, 132, 136], "to_pipelin": [1, 2], "x_type": [1, 32, 33, 34, 44, 45, 46, 48, 49, 85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 117, 124, 125, 127, 129, 130, 131, 133, 135, 136, 137], "search_param": [1, 33, 34, 104, 105, 106, 127, 138], "data": [1, 5, 6, 7, 14, 15, 16, 17, 18, 19, 24, 29, 31, 32, 33, 34, 43, 44, 45, 46, 47, 48, 49, 54, 55, 56, 78, 85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 116, 122, 124, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 137], "inspect": [1, 33, 62, 72, 98, 100, 103, 111, 119, 122, 128, 132, 133, 135, 136], "fold": [1, 13, 15, 16, 17, 18, 33, 62, 84, 85, 86, 91, 95, 96, 97, 100, 102, 103, 110, 111, 114, 125, 126, 127, 129, 131, 132, 136, 137], "wise": [1, 13, 33, 62, 95, 100, 132], "predict": [1, 7, 12, 13, 24, 32, 33, 34, 38, 39, 43, 49, 55, 56, 62, 85, 86, 87, 88, 89, 90, 93, 95, 96, 100, 102, 103, 107, 111, 114, 116, 122, 125, 126, 128, 129, 130, 131, 132, 135, 136, 137], "preprocess": [1, 2, 33, 34, 62, 85, 86, 87, 89, 90, 93, 95, 96, 97, 100, 103, 110, 111, 114, 122, 124, 128, 133, 134, 136], "varianc": [1, 14, 33, 62, 95, 100, 116, 126, 129, 137], "threshold": [1, 14, 33, 43, 49, 56, 62, 95, 100, 111, 116, 124], "zscore": [1, 14, 33, 62, 85, 86, 87, 89, 90, 93, 95, 96, 97, 99, 100, 102, 104, 105, 106, 107, 110, 114, 116, 127, 129, 131, 135, 136, 137], "pca": [1, 14, 33, 62, 95, 100, 103, 111, 116, 127, 137], "variabl": [1, 2, 15, 16, 17, 18, 19, 31, 32, 33, 62, 86, 87, 89, 96, 101, 103, 108, 111, 114, 125, 126, 127, 129, 131, 136, 137, 138], "z": [1, 2, 33, 62, 96, 101, 108, 123, 129, 131, 136, 137], "score": [1, 2, 7, 12, 13, 24, 33, 34, 42, 55, 62, 71, 72, 85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 110, 111, 113, 115, 122, 124, 125, 127, 129, 130, 131, 134, 137, 138], "bayesian": [1, 33, 62, 101, 108, 127], "grid": [1, 33, 34, 62, 96, 101, 105, 108, 128, 129, 130, 138], "stack": [1, 33, 62, 101, 108, 110, 116, 122, 128], "analysi": [1, 14, 16, 33, 62, 84, 91, 101, 102, 108, 114, 116, 126, 137], "confound": [1, 2, 14, 19, 33, 44, 49, 56, 62, 88, 112, 116, 119, 122, 128, 135, 138], "remov": [1, 2, 14, 19, 33, 44, 49, 56, 62, 87, 97, 98, 109, 112, 116, 118, 122, 126, 128, 135, 138], "comparison": [1, 19, 33, 42, 62, 71, 94, 109, 112, 119, 122, 134], "connectom": [1, 33, 43, 116, 122, 128], "base": [1, 13, 15, 16, 19, 29, 33, 42, 43, 54, 72, 116, 120, 122, 125, 127, 128, 129, 132, 133, 134, 137], "cbpm": [1, 33, 116, 122, 128, 138], "evalu": [1, 7, 33, 34, 37, 55, 79, 90, 96, 122, 126, 129, 132, 133, 134, 135, 137], "build": [1, 33, 85, 89, 96, 101, 122, 123, 124, 130, 131, 132, 134, 135], "cross": [1, 2, 13, 15, 16, 17, 18, 19, 31, 33, 34, 85, 86, 97, 103, 110, 111, 116, 122, 124, 127, 128, 129, 133, 134, 135, 137, 138], "consist": [1, 2, 24, 31, 33, 117, 122, 124, 126, 128, 132, 133, 135, 137, 138], "analog": 2, "pipelinecr": [2, 33, 34, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 116, 124, 125, 127, 129, 130, 131, 134, 135, 136, 138], "allow": [2, 15, 22, 24, 27, 40, 52, 60, 90, 110, 117, 120, 124, 125, 127, 133, 134, 137, 138], "target_pipelin": [2, 125, 131], "jutargetpipelin": [2, 55, 102, 125, 131], "easi": [2, 88, 122, 125, 127, 129, 130, 134, 135], "wai": [2, 90, 93, 120, 122, 125, 126, 127, 129, 130, 132, 135, 136, 137], "out": [2, 20, 21, 49, 59, 93, 111, 116, 122, 125, 126, 127, 129, 130, 134, 135, 136], "us": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 76, 83, 84, 85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 101, 102, 103, 104, 105, 107, 108, 110, 114, 116, 117, 118, 119, 121, 122, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138], "column_typ": [3, 129], "hold": [3, 22, 136], "regard": [3, 133, 136], "pd": [3, 5, 6, 7, 13, 14, 24, 29, 33, 34, 42, 44, 45, 46, 47, 48, 49, 54, 55, 56, 66, 69, 71, 85, 86, 87, 88, 96, 97, 98, 102, 103, 110, 114, 124, 125, 126, 130, 131, 135], "datafram": [3, 5, 6, 7, 13, 14, 24, 29, 32, 33, 34, 42, 43, 44, 45, 46, 47, 48, 49, 54, 55, 56, 71, 85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 117, 122, 124, 125, 127, 129, 130, 131, 132, 133, 135, 136, 137, 138], "One": [3, 24, 88, 125, 127, 130, 137], "instead": [3, 15, 16, 19, 22, 24, 27, 40, 43, 52, 60, 87, 97, 110, 125, 126, 127, 130, 138], "also": [3, 85, 87, 90, 93, 98, 103, 104, 111, 117, 118, 120, 122, 124, 125, 127, 129, 130, 132, 133, 135, 136, 137], "itself": [3, 130], "self": [3, 5, 6, 15, 24, 29, 43, 44, 45, 46, 47, 48, 49, 55, 57], "updat": [3, 5, 6, 7, 15, 24, 43, 44, 45, 46, 47, 48, 49, 55, 118, 121, 138], "pattern": [3, 11, 85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 124, 125, 127, 129, 130, 131, 135, 136, 137], "regex": 3, "match": [3, 47, 88], "to_type_selector": 3, "selector": [3, 11], "usabl": [3, 137], "compos": [3, 11], "columntransform": [3, 11, 129], "callabl": [3, 35, 36, 40, 43, 138], "alia": [4, 15, 24, 63, 65], "needed_typ": [5, 6, 7, 29, 30, 47, 56], "estim": [5, 6, 7, 15, 24, 30, 33, 34, 35, 36, 40, 43, 44, 45, 46, 47, 48, 49, 55, 66, 67, 68, 69, 96, 97, 98, 104, 105, 106, 107, 110, 111, 122, 124, 125, 126, 127, 128, 129, 131, 132, 134, 135, 137], "everi": [5, 27, 32, 33, 34, 52, 123, 129, 133, 137], "awar": [5, 121], "thei": [5, 7, 24, 55, 85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 104, 105, 106, 110, 114, 120, 124, 127, 129, 130, 136, 137], "abl": [5, 117, 132, 135], "main": [5, 72, 110, 118, 122, 123, 125, 126, 132], "differ": [5, 15, 16, 17, 18, 19, 27, 87, 88, 90, 93, 98, 103, 104, 105, 107, 110, 111, 120, 121, 124, 125, 126, 127, 129, 130, 132, 133, 135, 136, 137], "between": [5, 19, 31, 86, 110, 118, 124, 125, 126, 130, 132, 135, 137], "baseestim": [5, 138], "purpos": [5, 87, 88, 136], "That": [5, 124, 125, 126, 127, 129, 137], "ar": [5, 6, 7, 15, 16, 17, 18, 22, 24, 27, 29, 33, 34, 40, 42, 43, 44, 45, 46, 47, 48, 49, 52, 54, 55, 56, 60, 85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 110, 111, 114, 116, 118, 119, 120, 121, 123, 124, 125, 126, 127, 129, 130, 132, 133, 134, 135, 136, 137, 138], "get_needed_typ": [5, 6, 7, 44, 45, 46, 47, 48, 49, 55, 69], "get_apply_to": [5, 6, 7, 44, 45, 46, 47, 48, 49, 55, 69], "filter_column": [5, 6, 7, 44, 45, 46, 47, 48, 49, 55, 107, 116, 130], "x": [5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 24, 29, 32, 33, 34, 36, 40, 43, 44, 45, 46, 47, 48, 49, 54, 55, 56, 66, 67, 69, 85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 117, 123, 124, 125, 126, 127, 129, 130, 131, 133, 135, 136, 137, 138], "panda": [5, 6, 7, 31, 32, 33, 34, 43, 44, 45, 46, 47, 48, 49, 55, 84, 85, 86, 87, 89, 90, 91, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 114, 121, 122, 124, 125, 129, 130, 131, 133, 135, 136], "filter": [5, 6, 7, 44, 45, 46, 47, 48, 49, 55, 116, 122, 137, 138], "get_metadata_rout": [5, 6, 7, 15, 16, 17, 18, 19, 24, 43, 44, 45, 46, 47, 48, 49, 55, 111], "metadata": [5, 6, 7, 15, 16, 17, 18, 19, 24, 43, 44, 45, 46, 47, 48, 49, 55, 88, 111], "rout": [5, 6, 7, 15, 16, 17, 18, 19, 24, 43, 44, 45, 46, 47, 48, 49, 55, 111], "check": [5, 6, 7, 9, 15, 16, 17, 18, 19, 24, 29, 31, 35, 43, 44, 45, 46, 47, 48, 49, 55, 82, 88, 89, 96, 98, 110, 111, 117, 118, 122, 123, 127, 136, 138], "guid": [5, 6, 7, 15, 16, 17, 18, 19, 24, 43, 44, 45, 46, 47, 48, 49, 55, 111, 118], "mechan": [5, 6, 7, 15, 16, 17, 18, 19, 24, 43, 44, 45, 46, 47, 48, 49, 55, 111, 132], "work": [5, 6, 7, 15, 16, 17, 18, 19, 24, 29, 43, 44, 45, 46, 47, 48, 49, 54, 55, 84, 85, 86, 87, 89, 90, 91, 93, 96, 97, 98, 99, 102, 104, 105, 106, 110, 111, 114, 118, 124, 125, 126, 127, 129, 130, 135, 138], "metadatarequest": [5, 6, 7, 15, 16, 17, 18, 19, 24, 43, 44, 45, 46, 47, 48, 49, 55, 111], "encapsul": [5, 6, 7, 15, 16, 17, 18, 19, 24, 43, 44, 45, 46, 47, 48, 49, 55, 111], "inform": [5, 6, 7, 15, 16, 17, 18, 19, 24, 29, 33, 34, 43, 44, 45, 46, 47, 48, 49, 54, 55, 85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 117, 118, 124, 125, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138], "get_param": [5, 6, 7, 24, 43, 44, 45, 46, 47, 48, 49, 55, 66, 67, 68, 69, 129], "deep": [5, 6, 7, 24, 43, 44, 45, 46, 47, 48, 49, 55, 66, 67, 68, 69, 125], "true": [5, 6, 7, 15, 16, 22, 24, 27, 29, 33, 34, 38, 39, 40, 43, 44, 45, 46, 47, 48, 49, 52, 55, 60, 66, 67, 68, 69, 85, 86, 87, 90, 96, 97, 99, 102, 103, 110, 111, 114, 117, 125, 126, 127, 129, 131, 132, 136, 137], "contain": [5, 6, 7, 24, 32, 33, 34, 37, 42, 43, 44, 45, 46, 47, 48, 49, 55, 71, 85, 86, 87, 90, 102, 103, 114, 126, 129, 133, 136], "subobject": [5, 6, 7, 24, 43, 44, 45, 46, 48, 49, 55], "map": [5, 6, 7, 24, 43, 44, 45, 46, 47, 48, 49, 55, 86, 111], "set_param": [5, 6, 7, 24, 43, 44, 45, 46, 47, 48, 49, 55, 66, 67, 68, 69], "simpl": [5, 6, 7, 24, 33, 42, 43, 44, 45, 46, 47, 48, 49, 55, 62, 71, 84, 91, 92, 94, 96, 97, 98, 99, 104, 105, 106, 110, 111, 116, 118, 122, 124, 126, 127, 129, 130, 132, 137], "well": [5, 6, 7, 24, 43, 44, 45, 46, 47, 48, 49, 55, 117, 124, 125, 126, 127, 129, 130, 132, 133, 134, 135, 137], "nest": [5, 6, 7, 24, 43, 44, 45, 46, 47, 48, 49, 55, 124, 127, 129, 132], "latter": [5, 6, 7, 24, 43, 44, 45, 46, 47, 48, 49, 55], "form": [5, 6, 7, 24, 43, 44, 45, 46, 47, 48, 49, 55, 133, 137], "compon": [5, 6, 7, 24, 43, 44, 45, 46, 47, 48, 49, 55, 98, 103, 116, 137], "__": [5, 6, 7, 24, 43, 44, 45, 46, 47, 48, 49, 55, 85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 124, 125, 127, 130, 131, 135, 136, 137], "possibl": [5, 6, 7, 22, 24, 27, 40, 43, 44, 45, 46, 47, 48, 49, 52, 55, 60, 88, 122, 126, 127, 132, 136, 137], "instanc": [5, 6, 7, 13, 15, 16, 17, 18, 19, 24, 43, 44, 45, 46, 47, 48, 49, 55, 125, 129, 137], "fit": [6, 7, 24, 29, 33, 34, 43, 44, 45, 46, 47, 48, 49, 54, 55, 56, 66, 67, 68, 69, 96, 97, 103, 111, 116, 124, 125, 128, 129, 132, 137, 138], "y": [6, 7, 12, 13, 15, 16, 17, 18, 19, 24, 29, 31, 32, 33, 34, 36, 40, 43, 44, 45, 46, 47, 48, 49, 54, 55, 56, 66, 67, 68, 69, 85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 116, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 135, 136, 137], "fit_param": [6, 7, 43, 44, 45, 46, 47, 48, 49, 55], "datalik": [6, 7, 24, 29, 44, 45, 46, 47, 48, 49, 54, 55, 56, 66, 67, 68, 69], "addit": [6, 7, 24, 33, 34, 43, 44, 45, 46, 47, 48, 49, 55, 121, 122, 124, 129, 130, 132, 135, 136], "pass": [6, 7, 15, 16, 17, 18, 19, 24, 44, 45, 46, 47, 48, 49, 55, 104, 116, 118, 127, 131, 136, 137], "fit_transform": [6, 29, 43, 44, 45, 46, 47, 48, 49, 54, 56], "version": [6, 15, 19, 24, 43, 44, 45, 46, 47, 48, 49, 85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 114, 118, 121, 122, 126, 129, 130, 138], "arrai": [6, 7, 15, 16, 17, 18, 19, 33, 43, 44, 45, 46, 47, 48, 49, 55, 85, 129], "like": [6, 7, 15, 16, 17, 18, 19, 27, 43, 44, 45, 46, 47, 48, 49, 52, 55, 66, 67, 68, 69, 93, 103, 118, 121, 126, 127, 129, 132, 133, 136, 137], "shape": [6, 7, 15, 16, 17, 18, 19, 43, 44, 45, 46, 47, 48, 49, 55, 85, 96], "n_sampl": [6, 7, 15, 16, 17, 18, 19, 43, 44, 45, 46, 47, 48, 49, 55, 98, 124, 130], "n_featur": [6, 15, 16, 17, 18, 19, 43, 44, 45, 46, 47, 48, 49, 98, 124, 125, 130], "input": [6, 29, 31, 32, 43, 44, 45, 46, 47, 48, 49, 54, 55, 56, 78, 85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 124, 125, 127, 129, 130, 131, 134, 135, 136, 137], "sampl": [6, 7, 15, 16, 17, 18, 19, 24, 32, 42, 43, 44, 45, 46, 47, 48, 49, 55, 85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 124, 125, 126, 127, 129, 130, 131, 135, 136, 137], "n_output": [6, 43, 44, 45, 46, 47, 48, 49], "unsupervis": [6, 43, 44, 45, 46, 47, 48, 49], "x_new": [6, 43, 44, 45, 46, 47, 48, 49], "ndarrai": [6, 7, 15, 16, 17, 18, 19, 24, 43, 44, 45, 46, 47, 48, 49, 55], "n_features_new": [6, 43, 44, 45, 46, 47, 48, 49], "set_output": [6, 43, 44, 45, 46, 47, 48, 49], "output": [6, 14, 15, 16, 17, 18, 19, 33, 34, 42, 43, 44, 45, 46, 47, 48, 49, 62, 71, 87, 110, 118, 129, 132, 133, 134, 137], "see": [6, 15, 16, 17, 24, 25, 32, 33, 34, 43, 44, 45, 46, 47, 48, 49, 62, 76, 83, 85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 116, 117, 118, 120, 125, 126, 127, 129, 130, 132, 133, 134, 135, 136, 137], "introduc": [6, 43, 44, 45, 46, 47, 48, 49, 125], "api": [6, 43, 44, 45, 46, 47, 48, 49, 116, 118, 122, 130, 134, 137], "exampl": [6, 34, 43, 44, 45, 46, 47, 48, 49, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 117, 120, 121, 122, 124, 125, 126, 127, 129, 130, 131, 132, 133, 135, 136, 137, 138], "format": [6, 43, 44, 45, 46, 47, 48, 49, 62, 86, 88, 103, 104, 105, 106, 110, 118, 123, 125, 127, 138], "polar": [6, 43, 44, 45, 46, 47, 48, 49], "unchang": [6, 15, 24, 43, 44, 45, 46, 47, 48, 49], "new": [6, 8, 15, 24, 43, 44, 45, 46, 47, 48, 49, 96, 111, 118, 122, 132, 137], "1": [6, 7, 15, 19, 24, 32, 33, 34, 43, 44, 45, 46, 47, 48, 49, 55, 66, 85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 133, 135, 136, 137], "4": [6, 43, 44, 45, 46, 47, 48, 49, 85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 122, 124, 125, 126, 127, 129, 130, 131, 133, 135, 136, 137], "wa": [6, 43, 44, 45, 46, 47, 48, 49, 89, 96, 97, 98, 111, 124, 126, 127, 129, 136], "wrap": [7, 35, 55, 138], "make": [7, 11, 15, 16, 17, 18, 19, 24, 86, 88, 89, 96, 98, 103, 104, 105, 106, 110, 118, 121, 123, 124, 125, 126, 127, 129, 130, 131, 133, 135, 136, 137, 138], "modellik": [7, 24, 25, 27, 49, 55, 56, 111], "float": [7, 19, 24, 32, 33, 34, 38, 39, 43, 49, 55, 56, 71, 85, 106, 111, 127], "predict_proba": [7, 12, 24, 55], "comput": [7, 24, 33, 38, 39, 43, 55, 90, 103, 114, 117, 127, 132, 137], "probabl": [7, 24, 33, 34, 55, 129], "outcom": [7, 24, 55, 137], "np": [7, 15, 16, 17, 18, 19, 24, 43, 55, 85, 86, 89, 96, 103, 104, 105, 106, 124, 125, 126, 129, 130], "correspond": [7, 24, 33, 34, 55, 129], "sort": [7, 24, 55, 89, 96, 116], "order": [7, 15, 16, 24, 55, 88, 89, 96, 110, 111, 117, 118, 125, 127, 130, 132, 137, 138], "appear": [7, 24, 55, 136], "classes_": [7, 24, 55], "decision_funct": [7, 12, 55, 96, 138], "decis": [7, 55, 88, 89, 96, 104, 105, 106, 125, 129], "n_class": [7, 55], "2": [7, 15, 16, 17, 18, 19, 24, 55, 67, 85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 121, 122, 125, 126, 127, 129, 130, 131, 133, 135, 136, 137], "predict_log_proba": [7, 12], "kwarg": [7, 24, 25, 47, 54, 57, 66, 67, 68, 69], "new_typ": 8, "chang": [8, 15, 19, 24, 44, 83, 105, 110, 116, 118, 121, 123, 126, 127, 136], "attr": 9, "ensur": [9, 44, 46, 48, 49, 85, 126, 129], "cv": [12, 13, 15, 16, 17, 18, 19, 24, 31, 32, 33, 34, 62, 84, 85, 86, 90, 91, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 116, 124, 125, 126, 127, 129, 130, 131, 135, 136, 137, 138], "func": 12, "group": [12, 13, 15, 16, 17, 18, 19, 31, 32, 33, 34, 62, 84, 87, 91, 96, 103, 122, 124, 128, 136], "featur": [13, 14, 15, 16, 17, 18, 19, 29, 32, 33, 34, 43, 44, 45, 46, 47, 48, 49, 54, 56, 66, 67, 69, 85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 117, 118, 121, 122, 124, 127, 128, 129, 131, 132, 134, 135, 136], "label": [13, 15, 16, 17, 18, 19, 32, 33, 34, 85, 90, 132, 133, 136, 137], "case": [13, 15, 16, 17, 18, 24, 32, 33, 34, 43, 87, 88, 96, 102, 114, 118, 124, 125, 126, 133, 136, 137], "number": [13, 15, 16, 17, 18, 19, 33, 34, 85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 123, 124, 125, 126, 127, 129, 130, 131, 132, 135, 136, 137], "pipelineinspector": [13, 99], "foldsinspector": [13, 129], "until": [14, 96, 98, 103, 111, 121, 133, 135, 138], "with_column_typ": [14, 96], "fals": [14, 15, 16, 22, 24, 27, 33, 40, 45, 49, 52, 55, 60, 62, 86, 87, 89, 90, 93, 96, 97, 98, 102, 103, 104, 105, 106, 107, 111, 114, 124, 125, 127, 129, 130, 131, 136, 137], "certain": [14, 117, 133, 136, 137], "inclus": [14, 111], "svm": [14, 33, 34, 62, 85, 90, 93, 95, 99, 100, 104, 105, 106, 107, 116, 127, 129, 130, 131, 135, 136, 137], "n_bin": [15, 16, 17, 18, 87, 126], "bin": [15, 16, 17, 18, 87, 126], "n_split": [15, 16, 17, 18, 19, 24, 85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 124, 125, 126, 127, 129, 130, 131, 135, 136, 137], "5": [15, 16, 17, 18, 19, 33, 85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 107, 110, 111, 114, 121, 122, 124, 125, 126, 127, 129, 130, 131, 132, 133, 135, 136, 137], "shuffl": [15, 16, 19, 86, 87, 89, 90, 93, 96, 97, 98, 102, 103, 104, 105, 106, 107, 111, 114, 124, 125, 126, 127, 129, 130, 131, 136, 137], "random_st": [15, 16, 17, 18, 19, 24, 85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 124, 125, 126, 127, 129, 130, 131, 135, 136, 137], "stratifi": [15, 16, 17, 18, 19, 33, 62, 84, 85, 91, 126, 136, 138], "k": [15, 16, 17, 18, 33, 62, 84, 85, 86, 89, 91, 96, 102, 103, 110, 116, 126, 127, 132, 136], "where": [15, 16, 17, 18, 19, 88, 123, 126, 127, 129, 137, 138], "stratif": [15, 16, 19, 87, 89, 128], "done": [15, 16, 19, 104, 118, 121, 123, 129, 130, 135, 136, 137], "discret": [15, 16, 126, 137], "fix": [15, 16, 118, 126, 138], "quantil": [15, 16, 17, 18, 126], "either": [15, 16, 17, 18, 42, 96, 98, 116, 118, 125, 127, 137], "In": [15, 16, 17, 18, 43, 87, 88, 89, 90, 96, 97, 110, 111, 114, 118, 122, 124, 125, 126, 129, 130, 132, 133, 135, 136, 137], "first": [15, 16, 17, 18, 42, 64, 70, 85, 89, 90, 93, 96, 98, 102, 103, 104, 105, 110, 111, 118, 124, 125, 127, 130, 131, 133, 134, 135, 136, 137], "second": [15, 16, 17, 18, 42, 85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 124, 125, 126, 127, 129, 130, 131, 133, 135, 136, 137], "must": [15, 16, 17, 18, 42, 47, 71, 88, 89, 96, 103, 118, 126, 127, 133, 137], "befor": [15, 16, 33, 34, 55, 85, 87, 88, 97, 110, 114, 118, 121, 123, 126, 127, 136, 137, 138], "batch": [15, 16], "note": [15, 16, 17, 18, 19, 24, 33, 34, 98, 110, 118, 125, 127, 130], "within": [15, 16, 118, 124, 125, 130, 132, 133, 136], "implement": [15, 16, 43, 117, 122, 124, 125, 126, 130, 138], "approxim": [15, 16], "distribut": [15, 16, 19, 42, 85, 87, 89, 90, 93, 96, 97, 99, 104, 105, 106, 107, 110, 116, 125, 126, 129, 135, 136, 137, 138], "global": [15, 16, 117], "perform": [15, 16, 29, 33, 34, 42, 85, 86, 87, 89, 90, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 114, 118, 124, 125, 126, 127, 129, 132, 134, 135, 136, 137], "randomst": [15, 16, 17, 18, 19], "when": [15, 16, 24, 87, 110, 116, 117, 118, 120, 124, 125, 126, 127, 131, 133, 136, 137, 138], "affect": [15, 16, 129], "indic": [15, 16, 17, 18, 19, 33, 45, 49, 96, 116, 118, 126, 129, 136, 137], "control": [15, 16, 17, 18, 19, 88, 89, 96, 104, 105, 106, 113, 125, 127, 130, 132], "random": [15, 16, 17, 18, 19, 24, 33, 34, 62, 89, 90, 93, 95, 98, 100, 104, 105, 106, 110, 116, 125, 126, 127, 129, 130, 135, 137], "otherwis": [15, 16, 19, 24, 55, 62], "leav": [15, 16, 103, 126], "reproduc": [15, 16, 17, 18, 19, 24, 33, 34, 136], "across": [15, 16, 17, 18, 19, 86, 97, 102, 103, 114, 126, 129, 136], "call": [15, 16, 17, 18, 19, 22, 36, 40, 117, 120, 125, 126, 127, 129, 130, 133, 137, 138], "splitter": [15, 16, 17, 18, 19, 24, 33, 122, 128, 134, 135], "mai": [15, 16, 17, 18, 19, 83, 124, 125, 129, 130], "result": [15, 16, 17, 18, 19, 29, 33, 34, 54, 88, 96, 110, 111, 117, 125, 126, 129, 132, 133, 135, 136, 138], "ident": [15, 16, 17, 18, 19, 106, 126, 127], "integ": [15, 16, 17, 18, 19, 127, 136], "gener": [15, 16, 17, 18, 19, 33, 34, 47, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 118, 123, 126, 131, 132, 136, 137, 138], "test": [15, 16, 17, 18, 19, 24, 33, 42, 56, 85, 86, 87, 93, 96, 102, 103, 105, 110, 122, 125, 126, 127, 129, 132, 135, 136, 138], "suffici": [15, 16, 19, 87], "henc": [15, 16, 19], "zero": [15, 16, 17, 18, 19, 98], "placehold": [15, 16, 17, 18, 19], "actual": [15, 16, 19, 43, 49, 85, 86, 103, 111, 114, 129], "supervis": [15, 16, 17, 18, 19, 137], "learn": [15, 16, 17, 18, 19, 20, 22, 33, 34, 43, 44, 46, 47, 48, 49, 50, 54, 88, 90, 96, 97, 114, 116, 118, 121, 122, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138], "while": [15, 16, 17, 18, 19, 33, 34, 97, 104, 110, 117, 122, 125, 126, 127, 130, 131, 132, 137, 138], "dataset": [15, 16, 17, 18, 19, 85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 118, 124, 125, 126, 127, 129, 130, 131, 132, 133, 135, 136, 137], "yield": [15, 16, 17, 18, 19, 33, 117, 129, 136], "get_n_split": [15, 16, 17, 18, 19], "iter": [15, 16, 17, 18, 19, 33, 98, 106, 110, 124, 127, 129, 136, 138], "alwai": [15, 16, 17, 18, 19, 90, 104, 105, 106, 110, 118, 125, 127, 130, 135, 136, 137], "ignor": [15, 16, 17, 18, 19, 24, 111, 114, 127], "exist": [15, 16, 17, 18, 19, 24, 40, 62], "set_split_request": 15, "request": [15, 24, 122], "relev": [15, 24, 129], "enable_metadata_rout": [15, 24], "set_config": [15, 24, 117], "meta": [15, 24], "error": [15, 22, 24, 27, 32, 33, 34, 40, 52, 60, 62, 64, 85, 86, 88, 102, 103, 114, 117, 118, 126, 132, 135, 138], "given": [15, 24, 49, 96, 110, 111, 116, 117, 125, 133, 136, 137], "origin": [15, 24, 43, 64, 118, 123], "util": [15, 24, 72, 85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 114, 118, 122, 129, 130], "metadata_rout": [15, 24], "retain": [15, 24], "some": [15, 24, 87, 88, 89, 96, 97, 118, 121, 124, 125, 126, 127, 129, 130, 132, 133], "3": [15, 24, 85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 118, 121, 122, 124, 125, 126, 127, 129, 130, 131, 133, 135, 136, 137], "sub": [15, 24, 134], "e": [15, 24, 27, 43, 49, 56, 62, 111, 116, 118, 121, 123, 124, 125, 126, 127, 129, 136, 137], "g": [15, 24, 27, 62, 103, 116, 121, 126, 127, 136], "insid": [15, 24, 27, 137], "effect": [15, 24, 125, 129], "glossari": [16, 17], "n_repeat": [17, 18, 85, 93, 99, 129, 135, 136], "10": [17, 18, 43, 85, 86, 87, 88, 89, 90, 96, 97, 99, 102, 103, 105, 106, 110, 111, 114, 122, 125, 126, 127, 129, 130, 131, 135, 136], "continuousstratifiedgroupkfold": [17, 126], "n": [17, 18, 85, 86, 87, 98, 102, 103, 114, 116, 123, 126, 131, 137], "time": [17, 18, 85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 135, 136, 137], "repetit": [17, 18, 85, 86, 103], "state": [17, 18, 23, 24, 28, 41, 53, 61, 125], "contion": 18, "continuousstratifiedkfold": [18, 87, 126, 138], "test_siz": [19, 85, 86, 96, 102, 103, 110], "0": [19, 24, 32, 33, 34, 43, 49, 56, 71, 85, 86, 87, 88, 89, 90, 91, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 133, 135, 136, 137], "train_siz": [19, 96, 110], "bootstrap": [19, 110, 126], "resampl": 19, "replac": [19, 43, 97, 110, 123, 129], "respect": [19, 43, 116, 118, 133, 135, 136, 137], "re": [19, 118, 137], "proport": 19, "round": [19, 135], "up": [19, 33, 34, 42, 64, 98, 104, 105, 106, 111, 122, 124, 129, 134, 137], "absolut": [19, 86, 102, 103, 114, 116], "complement": [19, 116], "size": [19, 124, 125, 126, 135], "21": [19, 88, 103, 104, 105, 107, 110, 111, 114, 122, 124, 125, 127, 129, 130, 131, 135, 136, 137], "remain": [19, 126, 132], "unspecifi": 19, "automat": [19, 118, 121, 123, 137], "produc": [19, 127], "n_label": 19, "searcher": [20, 21, 22, 23, 33, 34, 121, 128, 138], "scikit": [20, 22, 33, 34, 43, 44, 46, 47, 48, 49, 50, 54, 90, 96, 97, 114, 116, 121, 122, 124, 125, 126, 127, 130, 131, 132, 135, 136, 137, 138], "avail": [20, 21, 22, 26, 33, 34, 36, 37, 42, 51, 58, 59, 121, 122, 136, 137, 138], "algorithm": [21, 22, 24, 33, 34, 97, 127, 132, 135, 137, 138], "searcher_nam": 22, "params_attr": 22, "overwrit": [22, 27, 40, 52, 60, 62, 138], "regist": [22, 23, 27, 28, 33, 34, 40, 41, 52, 53, 60, 61, 114, 138], "after": [22, 29, 49, 54, 56, 86, 87, 96, 98, 102, 103, 110, 111, 114, 118, 129], "referenc": [22, 27, 52, 60, 138], "obj": 22, "space": [22, 127], "decid": [22, 27, 40, 60], "warn": [22, 27, 31, 32, 40, 52, 57, 60, 62, 70, 85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 104, 105, 106, 110, 114, 124, 126, 129, 130, 133, 135, 138], "alreadi": [22, 27, 40, 52, 60, 96, 98, 118, 125, 126, 130, 134, 135, 137], "reset": [23, 28, 41, 53, 61, 88], "ensembl": [24, 130], "ds_split": 24, "random_state_algorithm": 24, "deslib": [24, 72, 116, 121, 122], "randomforest": 24, "metad": 24, "singlebest": 24, "staticselect": 24, "stackedclassifi": 24, "knorau": 24, "knora": 24, "desp": 24, "ola": 24, "mcb": 24, "knop": 24, "sample_weight": 24, "weight": [24, 127, 137], "set_score_request": 24, "run_cross_valid": [25, 27, 42, 71, 85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 117, 118, 124, 125, 127, 129, 130, 131, 134, 135, 138], "extra": [25, 47, 66, 67, 69, 76, 83, 85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 114, 116, 117, 118, 130, 131, 137], "keyword": [25, 47, 66, 67, 69, 98, 124], "argument": [25, 47, 66, 67, 69, 98, 111, 126], "model_nam": 27, "classification_cl": 27, "regression_cl": 27, "afterward": [27, 52, 130], "behav": [27, 52], "runtimewarn": [27, 31, 32, 52, 60, 70, 85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 104, 105, 106, 110, 114, 124, 129, 130, 135], "unlik": [29, 54, 132], "both": [29, 43, 54, 87, 89, 96, 110, 111, 125, 126, 127, 130, 131, 136, 137], "requir": [29, 54, 76, 83, 118, 122, 127, 129, 131, 134, 137, 138], "targetconfoundremov": [29, 54, 125], "encod": [29, 54], "present": [29, 54, 111, 117, 118, 124, 126, 138], "leakag": [29, 54, 122, 125, 137], "drop": [29, 43, 45, 54, 87, 90, 93, 98, 111, 116, 129], "tupl": [29, 43, 127], "jutargettransform": [29, 58, 60], "transformerlik": [29, 33, 34, 137], "inverse_transform": 29, "invers": [29, 55, 138], "can_inverse_transform": [29, 55], "factori": 30, "params_to_tun": 30, "juestimatorlik": 30, "estimatorlikefit1": [30, 65, 69], "estimatorlikefit2": [30, 65], "estimatorlikef": [30, 65], "seri": [31, 32, 56, 66, 69], "inconsist": [31, 32], "might": [31, 32, 83, 88, 90, 93, 97, 104, 105, 106, 117, 120, 121, 125, 126, 127, 129, 131, 134, 136, 137, 138], "still": [31, 88, 111, 121, 126, 136, 138], "run": [31, 33, 43, 85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 133, 135, 136, 137], "df": [32, 42, 98, 127, 133, 135, 136, 137], "pos_label": [32, 33, 34, 90], "detail": [32, 33, 34, 118, 132], "interpret": [32, 33, 34, 62, 110, 129], "posit": [32, 33, 34, 43, 86, 90, 124], "element": [32, 33, 34, 62, 85, 88, 98, 117, 137, 138], "convert": [32, 33, 34, 87, 88, 97, 110, 114, 126], "equal": [32, 33, 34, 87, 116, 126], "dictionari": [32, 33, 34, 44, 48, 98, 111, 125, 127, 129, 133, 138], "df_x": 32, "df_y": 32, "df_group": 32, "return_estim": [33, 34, 85, 86, 87, 89, 96, 97, 98, 102, 103, 104, 105, 106, 110, 111, 114, 124, 127, 129, 130, 136], "return_inspector": [33, 34, 99, 129], "return_train_scor": [33, 129, 136], "seed": [33, 34, 90, 93, 98, 104, 105, 106, 110, 129, 130], "n_job": [33, 43, 129, 138], "verbos": [33, 34, 43, 129, 138], "string": [33, 34, 62, 116, 133, 135, 136, 137, 138], "kind": [33, 34, 85, 86, 89, 90, 93, 96, 97, 99, 104, 105, 106, 107, 110, 127, 133, 136], "categor": [33, 34, 103, 111, 116, 127, 131], "multiple_class": [33, 34], "binari": [33, 34, 62, 84, 89, 91, 93, 96, 97, 99, 104, 105, 106, 107, 110, 116, 118, 126, 127, 129, 135], "ordin": [33, 34], "final": [33, 34, 85, 86, 87, 88, 89, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 118, 124, 126, 127, 129, 130, 136, 137, 138], "inspector": [33, 34, 99, 129, 138], "strategi": [33, 34, 136], "kfold": [33, 86, 87, 89, 90, 93, 96, 97, 98, 102, 103, 104, 105, 106, 107, 111, 114, 124, 125, 126, 127, 129, 130, 131, 136, 137], "scorerlik": [33, 35, 36, 40], "metric": [33, 34, 72, 85, 86, 88, 90, 93, 103, 110, 114, 122, 132, 134, 135], "http": [33, 43, 62, 87, 93, 118, 122, 126, 132, 135, 138], "org": [33, 43, 62, 87, 93, 122, 132, 135, 136], "stabl": [33, 87, 121, 122, 132], "model_evalu": 33, "html": [33, 62, 87, 93, 118, 122, 132, 135, 136], "comprehens": [33, 117], "scorer": [33, 36, 37, 40, 41, 114, 135, 136, 138], "defin": [33, 34, 42, 47, 85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 114, 124, 125, 126, 127, 129, 130, 136, 137, 138], "follow": [33, 34, 42, 43, 47, 62, 64, 85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 104, 105, 106, 110, 111, 114, 116, 118, 119, 121, 122, 123, 124, 127, 129, 130, 133, 134, 135, 136, 137], "step__paramet": [33, 34], "sever": [33, 34, 88, 89, 96, 117, 118, 126, 127, 132, 136], "svm__probabl": [33, 34], "gridsearchcv": [33, 34, 127], "randomizedsearchcv": [33, 34, 127], "bay": [33, 34, 106, 121, 127, 138], "bayessearchcv": [33, 34, 121, 127, 138], "optuna": [33, 34, 121, 127, 138], "optunasearchcv": [33, 34, 121, 127, 138], "register_search": [33, 34], "go": [33, 34, 85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 122, 129, 134, 137], "oper": [33, 34, 85, 87, 97, 110, 111, 126], "job": [33, 43], "parallel": [33, 43, 118, 138], "over": [33, 85, 86, 90, 93, 98, 103, 124, 125, 129, 130, 135], "mean": [33, 34, 42, 43, 49, 56, 83, 86, 87, 89, 90, 96, 98, 102, 103, 104, 105, 106, 110, 111, 114, 116, 125, 126, 127, 129, 131, 132, 135, 136, 137], "unless": 33, "joblib": [33, 34, 43, 138], "parallel_backend": 33, "context": [33, 88, 89, 96, 104, 105, 106, 129], "processor": 33, "level": [33, 34, 62, 85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 114, 118, 124, 129, 130], "outer": [33, 34, 85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 124, 125, 127, 129, 130, 131, 135, 136, 137, 138], "convernt": [33, 34], "print": [33, 34, 62, 85, 86, 87, 89, 90, 93, 96, 98, 99, 102, 103, 104, 105, 106, 107, 111, 114, 117, 124, 125, 127, 129, 131, 135, 136, 137], "larger": [33, 34], "50": [33, 34, 86, 87, 90, 93, 97, 98, 99, 102, 103, 107, 110, 111, 114, 127, 130, 131, 136, 137], "standard": [33, 34, 43, 98, 125, 130, 137, 138], "standrad": [33, 34], "addition": [33, 34, 62, 90, 93, 122, 123, 125, 137], "fit_tim": [33, 34, 85, 86, 99, 102, 103, 111, 114, 125, 131, 136, 137], "And": [33, 34, 89, 96, 110, 126, 127], "final_estim": [33, 34], "multiclass": [33, 62, 84, 91, 116], "forest": [33, 62, 89, 93, 95, 98, 100, 110, 116, 130, 135, 137], "custom": [33, 40, 62, 115, 119, 122, 124, 136, 137], "wrap_scor": 35, "doe": [35, 96, 132, 137], "handl": 35, "non_invers": 35, "scalar": [36, 40, 85], "greater": [36, 40, 42, 129], "better": [36, 40, 104, 105, 106, 127, 129, 135], "Will": [36, 40, 135], "y_true": [38, 39, 85, 86, 90, 103, 114], "y_pred": [38, 39, 85, 86, 90, 103, 114], "squar": [38, 114, 116], "pearson": [38, 39, 114, 124], "product": [38, 39, 114], "moment": [38, 39, 114], "correl": [38, 39, 43, 86, 114, 124], "coeffici": [38, 39, 86, 114, 136, 137], "arraylik": [38, 39], "scorer_nam": [40, 114], "access": [40, 88], "want": [40, 49, 85, 88, 89, 90, 96, 98, 110, 111, 114, 118, 120, 121, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137], "userwarn": [40, 87, 90, 126], "bonferroni": 42, "altern": [42, 110, 138], "side": 42, "correct": [42, 93, 130, 135, 138], "t": [42, 88, 93, 96, 126, 127, 135, 136, 137, 138], "degre": [42, 129], "freedom": 42, "adjust": 42, "pvalu": 42, "full": [42, 85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 118, 129], "letter": 42, "sidak": 42, "holm": 42, "down": 42, "sime": 42, "hochberg": 42, "independ": [42, 49, 56, 96, 110, 111, 116, 126], "hommel": 42, "close": [42, 123], "non": [42, 43], "neg": [42, 43, 124], "fdr_bh": 42, "benjamini": 42, "fdr_by": 42, "yekuti": 42, "fdr_tsbh": 42, "stage": 42, "fdr": [42, 116], "fdr_tsbky": 42, "less": [42, 87, 98, 122, 126, 132], "hypothesi": [42, 110], "underli": [42, 116, 125, 129], "unequ": 42, "significance_threshold": [43, 124], "05": [43, 103, 110, 112, 122, 124, 127, 129], "corr_method": [43, 124], "pearsonr": [43, 114, 136], "agg_method": [43, 124], "sum": [43, 85, 124, 138], "corr_sign": [43, 124], "posneg": [43, 124], "aggreg": [43, 124], "significantli": 43, "signific": [43, 93, 124, 129], "aggregate": 43, "separ": [43, 96, 98, 132, 136, 137], "ones": [43, 127], "choos": [43, 90, 93, 126, 127, 135, 137], "procedur": [43, 126, 132, 138], "describ": [43, 86, 87, 98, 102, 103, 111, 114, 118, 131, 136], "p": [43, 85, 93, 110, 124, 135], "scipi": [43, 85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 114, 124, 129, 130], "stat": [43, 72, 93, 114, 122, 124, 126, 135], "convent": [43, 118, 127], "axi": [43, 85, 86, 87, 102, 103, 114, 126, 131], "po": [43, 124], "correlation_valu": 43, "found": [43, 104, 105, 106, 136], "used_corr_sign_": 43, "log": [43, 62, 64, 70, 85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 114, 118, 127, 138], "shen": [43, 124], "finn": [43, 124], "scheinost": 43, "d": [43, 85, 88, 89, 96, 104, 105, 106, 116, 123, 124, 126, 127], "et": [43, 116, 124, 125, 137], "al": [43, 124, 125], "individu": [43, 124, 129, 136], "behavior": [43, 88, 124, 125, 129, 138], "brain": [43, 89, 96, 122, 124, 125], "connect": [43, 124, 125], "nat": [43, 124], "protoc": [43, 124], "12": [43, 86, 88, 89, 96, 98, 99, 103, 108, 121, 124, 125], "506": [43, 124], "518": [43, 124, 127], "2017": [43, 124, 125], "doi": [43, 122, 125], "1038": 43, "nprot": 43, "2016": [43, 88, 89, 96, 104, 105, 106, 124], "178": [43, 127], "y_mean_": 43, "show": [43, 84, 93, 101, 109, 113, 120, 126, 127, 135, 136, 138], "x_y_correlations_": 43, "significant_mask_": 43, "had": [43, 105, 136, 138], "pos_mask_": 43, "pos_significant_mask_": 43, "neg_significant_mask_": 43, "used_significant_mask_": 43, "threhsold": 43, "mask": [43, 45, 49], "per": [43, 85, 89, 96, 103, 118, 126], "get_feature_names_out": [43, 44, 46, 47, 48, 49], "input_featur": [43, 44, 46, 47, 48, 49], "x_types_renam": 44, "Not": [44, 45, 46, 47, 48, 110], "here": [44, 45, 46, 48, 87, 88, 89, 96, 98, 111, 117, 118, 122, 130, 135, 136, 137], "kept": [44, 46, 47, 48, 49, 111], "jutransform": [44, 45, 46, 47, 48, 49], "get_support": [45, 49], "support": [45, 49, 55, 76, 85, 89, 90, 96, 99, 104, 105, 106, 118, 126, 127, 129, 130, 136, 137, 138], "support_mask": [45, 49], "numpi": [45, 49, 85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 114, 121, 124, 125, 126, 129, 130], "keep": [46, 88, 90, 93, 97, 99, 103, 107, 110, 111, 118, 121, 122, 127, 130, 137], "wrapper": [47, 55, 138], "around": 47, "directli": [47, 88, 122, 131], "feature_names_in_": 47, "undefin": [47, 117], "x0": 47, "x1": 47, "n_features_in_": 47, "model_confound": [49, 56, 111, 125], "keep_confound": [49, 111], "specif": [49, 90, 96, 98, 111, 125, 127, 128, 129, 132, 133, 134], "subtract": [49, 56, 111, 116], "regular": [49, 104, 105, 111, 116, 127, 133], "express": [49, 111, 133], "syntax": [49, 111], "linearregress": [49, 56, 111, 116, 124, 125], "By": [49, 56, 96, 97, 98, 111, 116, 124, 127, 129, 136], "residu": [49, 56, 111, 125], "fall": [49, 56, 111, 124, 136], "under": [49, 56, 111, 114, 120, 121, 136, 137], "togeth": [49, 86, 87, 102, 103, 111, 114, 116], "deconfound": [49, 111], "transformer_nam": [52, 60], "transformer_cl": [52, 60], "arg": [54, 57, 66, 67, 68, 69], "_model_": 55, "transform_target": 55, "confoundremov": [56, 111, 116, 125, 138], "notifi": [57, 62], "with_traceback": 57, "except": [57, 64, 118, 121], "tb": 57, "__traceback__": 57, "fname": 62, "output_format": 62, "debug": [62, 132], "info": [62, 63, 85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 118, 124, 125, 127, 129, 130, 131, 135, 136, 137], "messag": [62, 64, 70, 118, 124, 138], "pathlib": 62, "path": 62, "filenam": [62, 118], "stdout": 62, "file": [62, 88, 91, 94, 100, 108, 112, 115, 118], "statement": 62, "append": [62, 97, 110, 123, 126, 129], "entri": [62, 137], "doc": [62, 87, 118, 123, 138], "python": [62, 85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 118, 121, 123, 126, 127, 138], "dev": [62, 118, 123], "howto": 62, "asctim": 62, "levelnam": 62, "msg": [64, 70], "klass": [64, 127], "subclass": [64, 70], "fashion": [66, 67, 68, 69, 125], "juestim": 69, "categori": 70, "width": [71, 90, 93, 99, 107, 110], "800": 71, "height": 71, "600": [71, 87], "ci": [71, 110, 123], "95": [71, 90, 93, 98, 99, 103, 107, 110, 126, 127], "plot": [71, 85, 86, 87, 93, 96, 97, 98, 103, 110, 122, 126, 135], "panel": [71, 93, 120, 121, 135], "dashboard": 71, "confid": [71, 110, 129], "interv": [71, 110], "dynam": [72, 121, 122], "prepar": [72, 85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 104, 105, 106, 110, 114, 122, 124, 125, 129, 130], "visual": [72, 96, 121, 122, 126, 132, 134], "julearn": [74, 76, 83, 85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 116, 118, 119, 120, 121, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137], "depend": [76, 83, 88, 89, 96, 104, 105, 106, 118, 122, 126, 129, 135, 138], "instal": [76, 83, 118, 120, 122, 123, 135, 138], "protocol": 82, "experiment": [83, 127], "futur": [83, 85, 87, 97, 110, 126, 127], "complet": [83, 118], "particularli": [83, 126, 136], "reli": 83, "beta": 83, "releas": [83, 121, 122, 138], "packag": [83, 87, 90, 97, 110, 118, 120, 121, 126, 127, 130], "viz": [83, 93, 121, 122, 135], "basic": [84, 118, 127, 133, 134, 136, 137, 138], "galleri": [84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 118], "sphinx": [84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 118, 138], "end": [85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 121], "download": [85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114], "code": [85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 118, 122, 125, 137, 138], "iri": [85, 90, 93, 97, 99, 107, 110, 118, 127, 133, 136, 137], "vector": [85, 89, 90, 96, 99, 104, 105, 106, 118, 127, 129, 130, 136, 137], "machin": [85, 88, 89, 90, 96, 99, 104, 105, 106, 118, 122, 124, 125, 127, 129, 132, 133, 134, 135, 137], "classifi": [85, 89, 90, 96, 97, 99, 104, 105, 106, 107, 110, 118, 129, 136, 137], "heatmap": [85, 86, 103], "accuraci": [85, 90, 105, 110, 125, 126, 135, 136], "confus": [85, 98, 136, 137], "matrix": 85, "author": [85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 118, 124], "shammi": [85, 86, 87, 89, 96, 98, 103, 110, 114, 122, 125, 138], "fz": [85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 124], "juelich": [85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 124], "de": [85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 124, 125], "federico": [85, 86, 87, 88, 89, 90, 93, 96, 97, 99, 103, 104, 105, 106, 107, 110, 114, 122], "raimondo": [85, 86, 87, 88, 89, 90, 93, 96, 97, 99, 103, 104, 105, 106, 107, 110, 114, 122, 138], "f": [85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 103, 104, 105, 106, 107, 110, 114, 124, 125, 127, 130], "licens": [85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 118, 124], "agpl": [85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 124], "seaborn": [85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 103, 104, 105, 106, 107, 110, 118, 121, 122, 126, 127, 129, 133, 136, 137], "sn": [85, 86, 87, 96, 97, 98, 103, 110, 126, 129], "matplotlib": [85, 86, 87, 96, 97, 98, 103, 110, 122, 126], "pyplot": [85, 86, 87, 96, 97, 98, 103, 110, 126], "plt": [85, 86, 87, 96, 97, 98, 103, 110, 126], "load_dataset": [85, 88, 89, 90, 93, 96, 97, 99, 104, 105, 106, 107, 110, 118, 127, 129, 133, 136, 137], "model_select": [85, 86, 87, 89, 93, 96, 99, 102, 103, 110, 126, 129, 135, 136, 138], "train_test_split": [85, 86, 102, 103], "repeatedkfold": [85, 129], "confusion_matrix": 85, "configure_log": [85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 114, 118, 129, 130], "2024": [85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 122, 124, 125, 127, 129, 130, 131, 135, 136, 137], "09": [85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 122, 124, 125, 127, 129, 130, 131, 135, 136, 137], "26": [85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 122, 124, 125, 127, 129, 130, 131, 135, 136, 137], "13": [85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 121, 124, 125, 127, 129, 130, 131, 135, 136, 137], "20": [85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 106, 110, 114, 124, 125, 126, 129, 130, 131, 135, 137], "49": [85, 87, 125], "090": [85, 93, 137], "lib": [85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 114, 126, 127, 129, 130], "14": [85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 114, 125, 129, 130, 135], "dev25": [85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 114, 122, 129, 130], "load": [85, 86, 87, 102, 103, 104, 105, 106, 110, 111, 114, 118, 127, 131, 133, 136], "df_iri": [85, 90, 93, 97, 99, 107, 110, 118], "sepal_length": [85, 90, 93, 97, 99, 107, 110, 127, 133, 136, 137], "sepal_width": [85, 90, 93, 97, 99, 107, 110, 127, 133, 136, 137], "petal_length": [85, 90, 93, 97, 99, 107, 110, 127, 133, 136, 137], "speci": [85, 90, 93, 97, 99, 107, 110, 118, 127, 129, 133, 136, 137], "train_iri": 85, "test_iri": 85, "200": [85, 98, 99, 110, 124, 126, 129, 130], "we": [85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 117, 118, 120, 121, 122, 125, 126, 127, 129, 130, 131, 132, 133, 135, 136, 137], "model_iri": [85, 97], "094": [85, 110], "expand": [85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 117, 124, 125, 127, 129, 130, 131, 135, 136, 137], "treat": [85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 104, 105, 106, 110, 114, 124, 129, 130], "home": [85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 104, 105, 106, 110, 114, 124, 127, 129, 130, 135], "runner": [85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 104, 105, 106, 110, 114, 124, 127, 129, 130, 135], "py": [85, 86, 87, 88, 89, 90, 91, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 118, 124, 126, 127, 129, 130, 135], "509": [85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 104, 105, 106, 110, 114, 124, 129, 130], "warn_with_log": [85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 104, 105, 106, 110, 114, 124, 129, 130, 135], "095": [85, 110], "__continu": [85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 110, 111, 114, 124, 127, 129, 131, 135, 136, 137], "096": 85, "120": [85, 105], "097": 85, "versicolor": [85, 90, 93, 97, 99, 107, 110, 118, 127, 136, 137], "40": [85, 86, 87], "virginica": [85, 90, 93, 97, 99, 107, 110, 118, 127, 136, 137], "setosa": [85, 133, 136, 137], "count": [85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 126, 127, 129, 131, 135, 136, 137], "dtype": [85, 86, 87, 89, 90, 93, 96, 97, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 127, 129, 131, 135, 136, 137], "int64": [85, 89, 90, 93, 96, 97, 99, 104, 105, 106, 107, 110, 127, 129, 135, 136, 137], "scheme": [85, 86, 87, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 124, 125, 127, 129, 130, 131, 132, 135, 136, 137, 138], "incl": [85, 86, 87, 89, 96, 97, 98, 99, 102, 103, 104, 105, 106, 111, 114, 124, 127, 129, 130, 136], "multi": [85, 88, 135, 136, 137], "detect": [85, 89, 90, 93, 96, 97, 99, 104, 105, 106, 107, 110, 117, 127, 129, 132, 135, 136, 137, 138], "head": [85, 86, 87, 88, 89, 96, 102, 103, 104, 105, 106, 110, 111, 114, 131, 133, 135, 137], "score_tim": [85, 86, 99, 102, 103, 111, 114, 125, 131, 136, 137], "test_accuraci": [85, 90, 110, 135], "n_train": [85, 86, 111, 114, 125], "n_test": [85, 86, 111, 114, 125], "cv_mdsum": [85, 86, 99, 102, 103, 111, 114, 125, 131, 136, 137], "005100": 85, "002721": 85, "916667": 85, "96": [85, 98, 99, 138], "24": [85, 121, 138], "fa5ab7a2b930761687a8e82d9971ebca": 85, "004765": 85, "002666": 85, "833333": 85, "004633": 85, "002607": 85, "958333": 85, "004572": [85, 136], "002621": 85, "004550": 85, "002614": 85, "now": [85, 86, 87, 88, 90, 93, 96, 97, 99, 102, 103, 104, 105, 106, 110, 111, 114, 118, 125, 126, 127, 129, 130, 133, 135, 136, 137], "df_accuraci": 85, "set_index": [85, 86, 88, 103, 110], "unstack": [85, 86, 103], "index": [85, 86, 87, 88, 89, 96, 98, 102, 103, 104, 105, 106, 110, 114, 118, 122, 129], "875000": 85, "750000": 85, "000000": [85, 86, 87, 93, 98, 102, 103, 110, 111, 114, 131, 135], "791667": 85, "font_scal": [85, 86], "fig": [85, 86, 87, 96, 97, 98, 103, 126], "ax": [85, 86, 87, 96, 97, 98, 103, 126], "subplot": [85, 86, 87, 96, 97, 98, 103, 126], "figsiz": [85, 86, 87, 96, 97, 98, 103, 126], "7": [85, 86, 87, 88, 89, 96, 99, 103, 118, 122, 126, 130, 132, 133, 136, 138], "cmap": [85, 86, 103], "ylgnbu": [85, 86, 103], "titl": [85, 86, 103, 118], "text": [85, 86, 96, 98, 103, 118, 126], "our": [85, 88, 89, 90, 96, 98, 107, 111, 118, 122, 125, 126, 127, 129, 130, 132, 133, 135, 136, 137], "annot": [85, 86], "cm": 85, "uniqu": [85, 89, 96, 127, 129], "9": [85, 86, 88, 89, 96, 98, 99, 103, 111, 125, 127, 133, 136, 137], "8": [85, 88, 89, 96, 99, 102, 103, 121, 125, 126, 127, 131, 132, 136, 137, 138], "let": [85, 86, 87, 88, 89, 96, 98, 102, 103, 104, 105, 110, 111, 114, 125, 126, 127, 129, 130, 131, 133, 137], "anoth": [85, 88, 98, 114, 126, 130, 137], "cm_sum": 85, "keepdim": 85, "cm_perc": 85, "astyp": 85, "100": [85, 90, 93, 97, 98, 99, 107, 110, 125, 127], "empty_lik": 85, "nrow": 85, "ncol": 85, "rang": [85, 88, 98, 116, 124, 130], "j": [85, 125], "c": [85, 88, 89, 96, 104, 105, 106, 120, 121, 127, 129, 130, 137], "els": 85, "1f": [85, 86], "00_start": [85, 87], "plot_cm_acc_multiclass": [85, 91], "104": 85, "deprecationwarn": 85, "convers": 85, "ndim": 85, "deprec": [85, 87, 97, 110, 118, 126, 138], "extract": [85, 88, 89, 96, 129], "singl": [85, 117, 129, 135], "your": [85, 88, 118, 121, 122, 124, 125, 126, 129, 134, 137], "25": [85, 86, 87, 88, 98, 102, 103, 111, 114, 127, 131, 135], "fmt": [85, 86], "total": [85, 86, 87, 88, 89, 90, 91, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 124, 125, 126, 127, 129, 130, 131, 133, 135, 136, 137], "script": [85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 118, 123, 124, 125, 126, 127, 129, 130, 131, 133, 135, 136, 137], "minut": [85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 124, 125, 126, 127, 129, 130, 131, 133, 135, 136, 137], "543": [85, 91], "sourc": [85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114], "jupyt": [85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 120, 136], "notebook": [85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114, 120, 136], "ipynb": [85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 110, 111, 114], "diabet": [86, 87, 102, 103, 114, 131], "ridg": [86, 102, 103, 114, 116], "load_diabet": [86, 87, 102, 103, 111, 114, 131], "mean_absolute_error": [86, 103], "858": 86, "return_x_i": [86, 87, 102, 103, 111, 114, 131], "as_fram": [86, 87, 102, 103, 111, 114, 131], "ten": [86, 87, 102, 103, 114], "ag": [86, 87, 88, 102, 103, 111, 114, 131], "sex": [86, 87, 102, 103, 111, 114, 125, 129, 131], "bodi": [86, 87, 102, 103, 114], "mass": [86, 87, 102, 103, 114], "averag": [86, 87, 102, 103, 111, 114, 124, 126, 135], "blood": [86, 87, 102, 103, 111, 114], "pressur": [86, 87, 102, 103, 111, 114], "six": [86, 87, 102, 103, 114], "serum": [86, 87, 102, 103, 114], "measur": [86, 87, 102, 103, 111, 114, 125, 126, 127, 129], "s1": [86, 87, 88, 89, 96, 102, 103, 111, 114, 131], "s6": [86, 87, 88, 89, 96, 102, 103, 111, 114, 131], "patient": [86, 87, 102, 103, 114], "quantit": [86, 87, 102, 103, 114], "diseas": [86, 87, 102, 103, 114], "progress": [86, 87, 102, 103, 114, 118], "year": [86, 87, 102, 103, 114], "baselin": [86, 87, 102, 103, 114], "interest": [86, 87, 90, 102, 103, 110, 114, 134, 136, 137], "bmi": [86, 87, 102, 103, 111, 114, 131], "s4": [86, 87, 88, 89, 96, 102, 103, 111, 114, 131], "s5": [86, 87, 88, 89, 96, 102, 103, 104, 105, 106, 111, 114, 131], "038076": [86, 87, 102, 103, 111, 114, 131], "050680": [86, 87, 102, 103, 111, 114, 131], "061696": [86, 87, 102, 103, 111, 114, 131], "002592": [86, 87, 102, 103, 111, 114, 131], "019907": [86, 87, 102, 103, 111, 114, 131], "017646": [86, 87, 102, 103, 111, 114, 131], "001882": [86, 87, 102, 103, 111, 114, 131], "044642": [86, 87, 102, 103, 111, 114, 131], "051474": [86, 87, 102, 103, 111, 114, 131], "039493": [86, 87, 102, 103, 111, 114, 131], "068332": [86, 87, 102, 103, 111, 114, 131], "092204": [86, 87, 102, 103, 111, 114, 131], "085299": [86, 87, 102, 103, 111, 114, 131], "044451": [86, 87, 102, 103, 111, 114, 131], "002861": [86, 87, 102, 103, 111, 114, 131], "025930": [86, 87, 102, 103, 111, 114, 131], "089063": [86, 87, 102, 103, 111, 114, 131], "011595": [86, 87, 102, 103, 111, 114, 131], "034309": [86, 87, 102, 103, 111, 114, 131], "022688": [86, 87, 102, 103, 111, 114, 131], "009362": [86, 87, 102, 103, 111, 114, 131], "005383": [86, 87, 102, 103, 111, 114, 131], "036385": [86, 87, 102, 103, 111, 114, 131], "031988": [86, 87, 102, 103, 111, 114, 131], "046641": [86, 87, 102, 103, 111, 114, 131], "442": [86, 87, 102, 103, 111, 114, 131], "152": [86, 87, 102, 103, 111, 114, 131, 137, 138], "133484": [86, 87, 102, 103, 111, 114, 131], "std": [86, 87, 98, 102, 103, 111, 114, 125, 131], "77": [86, 87, 102, 103, 111, 114, 131, 135, 138], "093005": [86, 87, 102, 103, 111, 114, 131], "min": [86, 87, 98, 102, 103, 111, 114, 131], "87": [86, 87, 102, 103, 111, 114, 131], "140": [86, 87, 102, 103, 111, 114, 131], "500000": [86, 87, 102, 103, 111, 114, 131], "75": [86, 87, 90, 93, 98, 102, 103, 111, 114, 131], "211": [86, 87, 102, 103, 111, 114, 131, 135], "max": [86, 87, 98, 102, 103, 111, 114, 116, 131], "346": [86, 87, 102, 103, 111, 114, 131, 136], "float64": [86, 87, 90, 93, 98, 102, 103, 107, 111, 114, 124, 125, 130, 131], "combin": [86, 87, 88, 102, 103, 110, 114, 127, 137], "data_diabet": [86, 102, 103, 114, 131], "concat": [86, 87, 97, 102, 103, 110, 114, 131], "bp": [86, 87, 102, 103, 111, 114, 131], "s2": [86, 87, 88, 89, 96, 102, 103, 111, 114, 131], "s3": [86, 87, 88, 89, 96, 102, 103, 111, 114, 131], "calcul": 86, "heat": 86, "corr": [86, 103], "xticklabel": 86, "yticklabel": 86, "train_diabet": [86, 102, 103], "test_diabet": [86, 102, 103], "neg_mean_absolute_error": [86, 87, 98, 102, 114, 136], "51": [86, 87, 93, 102, 127], "062": [86, 127], "063": [86, 127], "064": [86, 127], "065": [86, 127], "309": [86, 102, 103], "test_scor": [86, 87, 89, 90, 93, 96, 102, 103, 104, 105, 106, 107, 111, 114, 125, 127, 136], "005180": 86, "002367": 86, "48": [86, 88, 89, 127], "783874": 86, "247": [86, 138], "62": 86, "b10eef89b4192178d482d7a1587a248a": [86, 102, 103, 111, 114, 125, 131, 136, 137], "004532": [86, 136, 137], "002317": 86, "47": [86, 89, 90, 114, 138], "573568": 86, "004417": 86, "002350": 86, "37": [86, 130], "617474": 86, "004450": 86, "002325": 86, "686852": 86, "004441": 86, "002309": [86, 114], "45": 86, "558655": 86, "248": 86, "61": 86, "444084441470615": 86, "mae": [86, 103], "df_mae": [86, 103], "coef_": [86, 111], "sort_valu": 86, "ascend": 86, "inplac": 86, "barh": 86, "color": [86, 87, 96, 110, 126], "blue": 86, "red": 86, "xlabel": [86, 103], "249999999999986": 86, "scatterplot": [86, 96, 98, 103], "v": [86, 103, 123, 126, 128, 137], "2f": [86, 103], "corrcoef": [86, 103], "set_styl": [86, 87, 103], "darkgrid": [86, 87, 103], "scatter": [86, 98, 103], "xmin": [86, 103], "xmax": [86, 103], "get_xlim": [86, 96, 103], "ymin": [86, 103], "ymax": [86, 103], "get_ylim": [86, 96, 103], "ylabel": [86, 103, 126], "01": [86, 91, 98, 100, 103, 104, 105, 108, 122, 124, 127, 129, 130], "verticalalign": [86, 103], "top": [86, 103, 122, 136], "horizontalalign": [86, 103], "right": [86, 103, 104, 105, 106, 126, 127], "fontsiz": [86, 103], "scale": [86, 103, 104, 105, 116, 127, 129, 137], "649999999999999": 86, "347": 86, "35": [86, 88], "684": [86, 91, 105, 124], "plot_example_regress": [86, 91], "leonard": [87, 98, 110, 122, 124], "sass": [87, 98, 110, 122, 124], "l": [87, 88, 89, 96, 98, 102, 104, 105, 106, 110, 124], "846": 87, "outlier": 87, "data_df": 87, "new_df": 87, "145": [87, 103], "150": [87, 111, 125, 136, 137], "590": [87, 89, 111], "580": [87, 104, 124], "597": [87, 136], "595": [87, 136], "reset_index": [87, 88, 89, 96, 104, 105, 106, 110], "plot_stratified_kfold_reg": [87, 91], "settingwithcopywarn": 87, "try": [87, 89, 90, 93, 96, 99, 105, 107, 126, 127, 136], "slice": 87, "loc": 87, "row_index": 87, "col_index": 87, "caveat": 87, "pydata": 87, "user_guid": 87, "view": [87, 118], "versu": 87, "idea": [87, 132], "chosen": 87, "coupl": 87, "histrogram": 87, "displot": 87, "60": 87, "opt": [87, 90, 97, 110, 126, 127], "hostedtoolcach": [87, 90, 97, 110, 126, 127], "15": [87, 88, 89, 90, 96, 97, 98, 99, 110, 121, 125, 126, 127, 129], "x64": [87, 90, 97, 110, 126, 127], "python3": [87, 90, 97, 110, 126, 127], "site": [87, 90, 97, 110, 126, 127], "_oldcor": [87, 97, 110, 126], "1119": [87, 97, 110, 126], "futurewarn": [87, 97, 110, 126], "use_inf_as_na": [87, 97, 110, 126], "inf": [87, 97, 110, 126], "nan": [87, 97, 110, 126, 129], "option_context": [87, 97, 110, 126], "mode": [87, 97, 110, 126], "axisgrid": 87, "facetgrid": 87, "0x7f58abde2f20": 87, "histogram": 87, "abov": [87, 110, 125, 127, 129, 136], "uniformli": [87, 126], "skew": 87, "toward": 87, "lower": [87, 126], "even": [87, 111, 127, 136, 137], "low": [87, 98, 106, 116, 124, 127], "give": [87, 116, 125, 127, 134, 135, 136], "good": [87, 90, 105, 121, 126, 134, 135], "granular": 87, "cv_stratifi": [87, 89], "linear": [87, 93, 104, 105, 106, 111, 124, 125, 127, 129, 130, 137], "scores_strat": 87, "linreg": [87, 111, 116, 124, 125], "449": 87, "450": 87, "451": [87, 136], "452": [87, 135], "_split": [87, 126], "737": [87, 126, 127], "popul": [87, 110, 126], "member": [87, 126], "500": 87, "501": 87, "502": 87, "compar": [87, 93, 110, 122, 125, 127, 132, 135, 136], "With": [87, 126, 129, 136], "df_score": 87, "boxplot": [87, 110], "higher": [87, 110, 126], "were": [87, 88, 89, 96, 97, 110, 129, 136], "swarmplot": [87, 97], "872": [87, 91], "fmri": [88, 89, 96, 104, 105, 106], "waskom": [88, 89, 96, 104, 105, 106], "m": [88, 89, 96, 104, 105, 106, 118, 123, 137], "frank": [88, 89, 96, 104, 105, 106], "wagner": [88, 89, 96, 104, 105, 106], "adapt": [88, 89, 96, 104, 105, 106], "engag": [88, 89, 96, 104, 105, 106], "cognit": [88, 89, 96, 104, 105, 106], "cerebr": [88, 89, 96, 104, 105, 106], "cortex": [88, 89, 96, 104, 105, 106], "similar": [88, 127, 130, 136, 137], "excel": [88, 126], "spreadsheet": 88, "csv": 88, "ideal": 88, "everyth": [88, 134], "tabul": 88, "organis": [88, 125], "demograph": [88, 125], "diagnost": 88, "manual": [88, 120, 135, 137], "edit": 88, "sure": [88, 96, 118, 123, 125, 126, 127], "readi": [88, 135, 137], "do": [88, 96, 98, 103, 104, 105, 110, 111, 114, 116, 118, 122, 123, 125, 126, 127, 130, 132, 133, 134, 135, 136, 137], "howev": [88, 93, 96, 97, 98, 111, 117, 120, 121, 125, 126, 127, 130, 131, 132, 135, 136, 137, 138], "prone": [88, 132, 135], "fortun": [88, 126, 127], "tool": [88, 117, 121, 129, 135], "deal": [88, 124, 133], "task": [88, 96, 111, 127, 131], "collect": [88, 110, 129], "start": [88, 118, 119, 122, 126, 127, 129, 130, 131, 134, 135, 137], "df_fmri": [88, 89, 96, 104, 105, 106], "subject": [88, 89, 96, 104, 105, 106, 126], "timepoint": [88, 89, 96, 104, 105, 106], "event": [88, 89, 96, 104, 105, 106], "region": [88, 89, 96, 104, 105, 106], "signal": [88, 89, 96, 104, 105, 106], "s13": [88, 89, 96, 104, 105, 106], "18": [88, 89, 96, 99, 104, 105, 106, 124, 125], "stim": [88, 89, 96, 104, 105, 106], "pariet": [88, 89, 96, 104, 105, 106], "017552": [88, 89, 96, 104, 105, 106], "080883": [88, 89, 96, 104, 105, 106], "s12": [88, 89, 96, 104, 105, 106], "081033": [88, 89, 96, 104, 105, 106], "s11": [88, 89, 96, 104, 105, 106], "046134": [88, 89, 96, 104, 105, 106], "s10": [88, 89, 96, 104, 105, 106], "037970": [88, 89, 96, 104, 105, 106], "long": [88, 110], "wide": 88, "seen": [88, 137], "pivot": [88, 89, 96, 104, 105, 106], "reshap": [88, 96], "tabl": [88, 89, 96], "becom": [88, 132, 137], "identifi": [88, 90, 124, 125, 129, 135], "rule": [88, 116, 126, 137], "duplic": [88, 117], "frontal": [88, 89, 96, 104, 105, 106], "s0": [88, 89, 96, 104, 105, 106], "cue": [88, 89, 96, 104, 105, 106], "007766": [88, 104, 105, 106], "006899": [88, 104, 105, 106], "021452": [88, 104, 105, 106], "039327": [88, 104, 105, 106], "016440": [88, 104, 105, 106], "000300": [88, 104, 105, 106], "021054": [88, 104, 105, 106], "035735": [88, 104, 105, 106], "024296": [88, 104, 105, 106], "033220": [88, 104, 105, 106], "subtl": 88, "For": [88, 90, 93, 98, 103, 111, 116, 117, 118, 120, 121, 124, 126, 127, 129, 130, 131, 133, 136, 137], "place": 88, "scan": 88, "ll": [88, 103], "23": [88, 122, 125, 130], "31": [88, 127, 135], "29": [88, 135], "43": [88, 114], "28": 88, "34": [88, 135], "scanner": 88, "6": [88, 89, 93, 96, 97, 98, 99, 106, 111, 124, 126, 129, 132, 133, 136], "b": [88, 118, 127, 137], "df_meta": 88, "s7": [88, 89, 96], "s8": [88, 89, 96], "s9": [88, 89, 96], "11": [88, 89, 96, 99, 105, 124, 125, 129, 130, 135, 136], "16": [88, 89, 96, 98, 99, 110, 122, 127, 129], "036739": 88, "131641": 88, "17": [88, 89, 96, 98, 99, 127, 129, 135], "004900": 88, "036362": 88, "030099": 88, "121574": 88, "000643": 88, "051040": 88, "009959": 88, "103513": 88, "532": [88, 89, 96, 104, 105, 106, 124, 135], "frame": 88, "suppos": [88, 90, 125], "dure": [88, 89, 96, 121, 124, 125, 127, 129], "There": [88, 126, 132, 134, 137], "009038": 88, "009642": 88, "047859": 88, "026727": 88, "085040": 88, "086399": 88, "069775": 88, "070558": 88, "115321": 88, "154058": 88, "010535": 88, "061817": 88, "034386": 88, "130267": 88, "002170": 88, "048007": 88, "038257": 88, "134828": 88, "004290": 88, "035395": 88, "266": [88, 89, 96, 104, 105, 106], "sinc": [88, 93, 98, 102, 104, 122, 127, 137], "previou": [88, 93, 97, 98, 118, 130, 135, 136, 137, 138], "multiindex": 88, "trick": 88, "underscor": 88, "_": [88, 97, 110, 118], "frontal_cu": 88, "frontal_stim": 88, "parietal_cu": 88, "parietal_stim": 88, "593": [88, 91], "run_combine_panda": [88, 91], "groupkfold": 89, "kimia": 89, "nazarzadeh": 89, "necessari": [89, 120, 125, 130], "librari": [89, 120, 122, 127], "stratifiedgroupkfold": 89, "554": 89, "555": [89, 124], "infer": [89, 96], "studi": [89, 96, 125, 126, 127], "condit": [89, 96], "groupbi": [89, 96], "1064": [89, 96], "exactli": [89, 96, 129, 137], "rf": [89, 93, 97, 98, 107, 110, 116, 127, 130, 135], "574": 89, "575": 89, "576": 89, "577": 89, "578": [89, 104], "6841826838300122": 89, "215": 89, "216": [89, 98], "217": [89, 127], "218": [89, 127], "219": [89, 127], "6898496240601504": 89, "588": [89, 111], "589": [89, 111], "591": 89, "592": [89, 100], "6879699248120301": 89, "402": [89, 91], "run_grouped_cv": [89, 91], "201": 90, "202": [90, 129], "three": [90, 93, 97, 99, 107, 110, 118, 122, 127, 135, 136], "isin": [90, 93, 97, 99, 107, 110, 118, 127], "sepal": [90, 93, 99, 107, 110, 133, 137], "length": [90, 93, 99, 107, 110], "petal": [90, 93, 99, 107, 110, 133, 137], "275": 90, "276": 90, "277": 90, "278": 90, "279": 90, "280": 90, "90": [90, 93, 135], "70": [90, 93], "assess": [90, 93, 125, 129], "unbalanc": [90, 93], "df_unbalanc": [90, 93], "value_count": [90, 93], "30": [90, 93, 96, 98, 125, 135], "account": [90, 125], "imbal": 90, "suitabl": [90, 121], "balanced_accuraci": [90, 93, 136], "balanced_accuracy_scor": 90, "42": [90, 93, 96, 104, 105, 106, 110, 114, 126, 129, 130, 135, 136], "test_balanced_accuraci": [90, 93], "323": 90, "324": 90, "325": 90, "326": 90, "80": [90, 93, 125, 135], "327": [90, 125], "_classif": 90, "2458": 90, "8625": 90, "8678571428571429": 90, "u": [90, 97, 110, 111, 121, 125, 129, 135, 136], "correctli": 90, "precis": [90, 136], "ratio": 90, "tp": 90, "precision_scor": 90, "373": [90, 105, 135], "374": [90, 105], "375": [90, 105], "376": 90, "377": 90, "227": [90, 91, 130], "run_simple_binary_classif": [90, 91], "00": [91, 94, 98, 100, 107, 108, 112, 115, 129, 130, 135], "04": [91, 104, 108], "321": 91, "execut": [91, 94, 100, 108, 112, 115, 118], "auto_examples_00_start": 91, "mb": [91, 94, 100, 108, 112, 115], "At": [93, 122, 132, 137], "statist": [93, 98, 110, 122, 134, 136], "repeatedstratifiedkfold": [93, 99, 135, 136], "corrected_ttest": [93, 135], "738": [93, 127], "739": [93, 97, 127], "741": [93, 125], "742": [93, 97], "743": [93, 97], "744": [93, 97], "745": [93, 97], "roc_auc": [93, 110, 135, 136], "scores1": [93, 120, 127, 135], "786": [93, 106], "787": [93, 106], "788": [93, 106], "789": [93, 106], "scores2": [93, 120, 127, 135], "52": 93, "087": [93, 130, 137], "088": [93, 137], "089": [93, 137], "third": [93, 136], "kernel": [93, 104, 105, 106, 125, 127, 129, 130, 137], "scores3": [93, 120, 127, 135], "svm__kernel": [93, 105, 127], "svm_linear": 93, "54": [93, 127, 130], "760": [93, 125], "761": 93, "762": 93, "763": 93, "764": 93, "stats_df": [93, 135], "model_2": [93, 130, 135], "val": [93, 135], "175075": 93, "062567": 93, "895662": 93, "151390": 93, "782741": 93, "test_roc_auc": [93, 110, 135], "108944": 93, "835331": 93, "236153": 93, "685092": 93, "669010": 93, "324331": 93, "viewer": 93, "plot_scor": [93, 120, 135], "uncom": [93, 135], "line": [93, 118, 126, 135], "read": [93, 97, 118, 122, 123, 126, 132, 134, 135, 137], "holoviz": [93, 135], "getting_start": [93, 135], "build_app": [93, 135], "deploi": [93, 129, 135], "look": [93, 96, 98, 103, 111, 116, 124, 126, 127, 129, 130, 132, 133, 134, 136, 137], "interact": [93, 96, 122, 129, 135], "zoom": [93, 135], "hover": [93, 135], "button": [93, 135], "441": [93, 94], "plot_simple_model_comparison": [93, 94], "03": [94, 100, 108, 122], "auto_examples_01_model_comparison": 94, "demonstr": [95, 118, 130, 136], "analys": [96, 97, 125], "groupshufflesplit": 96, "57": [96, 98, 135], "329": [96, 131], "348": 96, "349": 96, "350": 96, "351": 96, "7218303650149884": 96, "decod": [96, 125], "claim": [96, 110, 126], "acquir": 96, "randomli": 96, "could": [96, 98, 111, 122, 124, 129, 133, 135, 136, 137], "characterist": 96, "unseen": [96, 126, 132], "whom": 96, "later": [96, 99, 118, 135], "409": 96, "410": 96, "411": 96, "412": 96, "7210526315789474": 96, "part": [96, 120, 122, 124, 126, 132, 135, 137], "raw": [96, 98, 137], "hue": [96, 110], "set_titl": [96, 97, 98, 126], "pre_x": 96, "pre_df": 96, "join": 96, "parietal__": 96, "frontal__": 96, "noth": [96, 127, 136], "standardscal": [96, 106, 116, 127, 129, 131, 136, 137], "seem": [96, 104, 105, 106, 110, 127, 134, 135, 136], "quit": [96, 121, 124, 129], "linearli": 96, "clf": 96, "figur": [96, 118], "xlim": 96, "ylim": 96, "xx": 96, "linspac": [96, 126], "yy": 96, "meshgrid": 96, "xy": 96, "vstack": 96, "ravel": 96, "xy_df": 96, "contour": 96, "alpha": [96, 124, 126], "linestyl": [96, 126], "boundari": [96, 127], "503": [96, 100], "plot_groupcv_inspect_svm": [96, 100], "55": [97, 99], "746": 97, "intern": [97, 129, 130, 136, 137, 138], "caution": [97, 126], "proper": [97, 110, 123, 134], "randomforestclassifi": [97, 116, 127], "understand": [97, 111, 122, 125, 129, 134, 135, 137], "to_plot": 97, "feature_importances_": [97, 110], "barplot": 97, "tight_layout": [97, 110], "review": [97, 118], "wander": 97, "about": [97, 118, 122, 125, 126, 129, 130, 132, 134, 135, 136, 137], "entir": [97, 136, 137], "56": 97, "458": 97, "459": [97, 135], "460": [97, 135], "461": 97, "462": 97, "463": 97, "i_fold": [97, 110], "enumer": [97, 110], "this_import": [97, 110], "440": [97, 100], "plot_inspect_random_forest": [97, 100], "make_regress": [98, 124, 125, 130], "normal": [98, 111, 116, 118, 125, 126, 137, 138], "reduct": 98, "990": 98, "991": 98, "n_inform": 98, "nois": [98, 125], "first_two": 98, "determin": [98, 127, 137], "belong": [98, 111], "x_to_zscor": 98, "summari": [98, 118], "111790": 98, "141618": 98, "023682": 98, "167718": 98, "686170": 98, "977322": 98, "972988": 98, "087946": 98, "895011": 98, "79": [98, 118], "741431": 98, "069985": 98, "772593": 98, "552990": 98, "659172": 98, "204": 98, "293317": 98, "751257": 98, "484100": 98, "759419": 98, "688891": 98, "64": 98, "724008": 98, "206729": 98, "194442": 98, "028152": 98, "174160": 98, "789944": 98, "421885": 98, "724302": 98, "772156": 98, "408321": 98, "392804": 98, "943621": 98, "256723": 98, "383145": 98, "259309": 98, "221085": 98, "explicitli": [98, 104, 125, 127], "declar": 98, "constructor": 98, "special": 98, "cannot": [98, 137], "tree": [98, 116], "pipeline_cr": [98, 103, 107, 111, 125, 127, 129, 130], "select_vari": [98, 116], "n_compon": [98, 103, 127, 137], "n_estim": [98, 130], "becaus": [98, 111, 125, 126, 127, 129, 132, 134, 135, 136, 137], "creator": [98, 99, 102, 103, 104, 105, 110, 111, 124, 127, 131, 136, 137], "simpli": [98, 124, 125, 126, 129, 130, 137], "did": [98, 105], "hand": [98, 118, 124, 125, 130, 133], "r2": [98, 103, 125, 136], "x_after_pca": 98, "earlier": 98, "x_after_zscor": 98, "high": [98, 106, 117, 124, 127], "pca__pca0": [98, 111], "pca__pca1": [98, 111], "58": [98, 135], "006": [98, 114], "007": [98, 114], "__x_to_zscor": 98, "008": [98, 114], "009": 98, "010": [98, 105], "011": 98, "725696": 98, "582295": 98, "314458": 98, "942935": 98, "977336": 98, "463217": 98, "525139": 98, "219493": 98, "618559": 98, "908592": 98, "395105": 98, "743192": 98, "328111": 98, "670912": 98, "97": [98, 99, 110], "573900": 98, "401304": 98, "98": [98, 99, 126], "918034": 98, "137435": 98, "99": [98, 99, 135], "894566": 98, "357729": 98, "1__": 98, "4__": 98, "013728": 98, "426259": 98, "364686": 98, "944446": 98, "118838": 98, "931848": 98, "004437": 98, "030684": 98, "309092": 98, "523891": 98, "206189": 98, "157667": 98, "099154": 98, "028182": 98, "335538": 98, "252795": 98, "049139": 98, "133702": 98, "240085": 98, "443863": 98, "deviat": [98, 125], "000000e": 98, "02": [98, 108, 129, 130], "689893e": 98, "387779e": 98, "005038e": 98, "013728e": 98, "010202e": 98, "576015e": 98, "463286e": 98, "763131e": 98, "456486e": 98, "488094e": 98, "018781e": 98, "113700e": 98, "184776e": 98, "381": [98, 100], "plot_preprocess": [98, 100], "shufflesplit": 99, "333": [99, 131], "334": 99, "337": 99, "338": 99, "339": [99, 104, 108], "340": 99, "341": 99, "005637": 99, "003127": 99, "42489ff0163b2f12752440a6b7ef74c7": 99, "005434": 99, "003003": 99, "005380": 99, "002611": 99, "004928": 99, "002568": 99, "005144": 99, "002773": 99, "005197": 99, "002881": 99, "005369": 99, "002565": 99, "005023": 99, "002812": 99, "005241": 99, "002906": 99, "004939": 99, "002893": 99, "005280": 99, "002876": 99, "005274": 99, "003006": 99, "005205": 99, "002923": 99, "005269": 99, "002837": 99, "005449": 99, "003196": 99, "005603": 99, "003086": 99, "004962": 99, "002559": 99, "004517": [99, 136], "002450": 99, "004421": 99, "002562": 99, "19": [99, 114, 122, 124, 127, 135], "004515": 99, "cv_predict": 99, "repeat0_p0": [99, 129], "repeat1_p0": [99, 129], "repeat2_p0": [99, 129], "repeat3_p0": 99, "_pipelin": 99, "0x7f58abcb3af0": 99, "268": [99, 100, 138], "run_binary_inspect_fold": [99, 100], "auto_examples_02_inspect": 100, "Then": [102, 111, 123, 130, 132, 137], "lya": 102, "paa": 102, "olivero": 102, "sami": [102, 111, 122, 125, 138], "hamdan": [102, 111, 122, 125, 138], "59": [102, 106, 127], "551": 102, "target_cr": [102, 131], "target_pipeline_cr": [102, 125], "0x7f58ab885210": 102, "567": 102, "568": 102, "569": [102, 104, 135], "570": 102, "004612": 102, "002292": 102, "004315": 102, "002241": 102, "004112": 102, "002259": 102, "004122": 102, "002237": 102, "004115": 102, "002340": 102, "51357151914367": 102, "076": [102, 108, 127], "run_apply_to_target": [102, 108], "reduc": [103, 111, 137], "dimension": [103, 111, 124, 127, 137], "subset": [103, 127, 132], "georgio": 103, "antonopoulo": 103, "kaustubh": [103, 122, 138], "r": [103, 114, 122], "patil": [103, 122, 138], "614": 103, "assign": [103, 118], "pca1": 103, "pca2": 103, "process": [103, 127, 133, 136, 137], "pca_feats1": 103, "pca_feats2": 103, "629": 103, "__pca1": 103, "__pca2": 103, "630": 103, "__categor": [103, 131], "0x7f58ac232cb0": 103, "631": 103, "632": 103, "633": 103, "634": 103, "013892": 103, "005948": 103, "012925": 103, "005952": 103, "013047": 103, "005866": 103, "012866": 103, "005924": 103, "013032": 103, "3107976743678922": 103, "untouch": 103, "data_processed1": 103, "pca_feats1__pca0": 103, "161": 103, "063175": 103, "133274": 103, "131461": 103, "039719": 103, "108111": 103, "075741": 103, "085907": 103, "054779": 103, "030464": 103, "001314": 103, "043401": 103, "033246": 103, "015491": 103, "098172": 103, "033216": 103, "032629": 103, "011824": 103, "015999": 103, "050783": 103, "032289": 103, "012577": 103, "034508": 103, "024993": 103, "067737": 103, "013504": 103, "315": 103, "045025": 103, "031454": 103, "020607": 103, "056003": 103, "010903": 103, "001078": 103, "data_processed2": 103, "pca_feats2__pca0": 103, "234716": 103, "012141": 103, "078784": 103, "006290": 103, "026190": 103, "341472": 103, "348168": 103, "269257": 103, "286067": 103, "309025": 103, "362": [103, 111], "367": [103, 108], "run_example_pca_featset": [103, 108], "attempt": [104, 105], "579": 104, "581": 104, "5939164168576971": [104, 105], "gamma": [104, 105, 106, 127, 129], "But": [104, 110, 111, 126, 127, 129, 134, 136, 137], "rbf": [104, 105, 106, 127], "auto": [104, 127], "1e": [104, 105, 106, 127, 129, 130], "speed": [104, 105, 106], "638": 104, "639": 104, "001": [104, 105, 127, 129], "640": 104, "641": 104, "svm__c": [104, 105, 106, 127, 129, 130], "inner": [104, 105, 106, 127, 129, 130, 138], "642": 104, "svm__gamma": [104, 105, 106, 127], "643": 104, "set_column_typ": [104, 106, 127, 129, 136], "setcolumntyp": [104, 106, 127, 129, 136], "svc": [104, 106, 116, 127, 129, 136, 137], "644": 104, "645": 104, "7087109857168048": [104, 105], "best_params_": [104, 105, 106, 127], "best_estimator_": [104, 105], "_gamma": [104, 105], "run_hyperparameter_multiple_grid": [104, 108], "analyz": [105, 106, 129], "019": 105, "020": 105, "021": [105, 137], "022": [105, 132, 137], "023": [105, 137], "optim": [105, 121, 127, 129, 137], "find": [105, 106, 117, 127, 134], "best": [105, 106, 127, 137], "079": 105, "080": [105, 130], "081": [105, 130], "082": [105, 130, 137], "083": [105, 130, 137], "588308940222183": 105, "much": [105, 126, 127, 129, 132], "explor": [105, 111, 129, 130], "too": [105, 127], "poli": 105, "370": 105, "371": [105, 135], "372": [105, 135], "lest": 105, "116": 105, "117": 105, "118": [105, 138], "119": 105, "5188855581026275": 105, "happen": [105, 129, 130], "681": 105, "682": 105, "683": [105, 124], "685": [105, 124], "479": [105, 108], "run_hyperparameter_tun": [105, 108], "logger": [106, 129, 130], "774": 106, "hyperparamt": 106, "creator1": [106, 127, 135], "1e3": 106, "uniform": [106, 116, 126, 127, 138], "creator2": [106, 127, 135], "1e1": 106, "n_iter": [106, 127], "784": 106, "06": [106, 107, 112, 127], "1000": 106, "785": 106, "790": 106, "791": 106, "real": [106, 125, 127, 129], "prior": [106, 127], "792": 106, "793": 106, "794": 106, "803": 106, "804": 106, "805": 106, "6203007518796992": 106, "ordereddict": [106, 127], "193": 106, "62585277239563": 106, "909675645518994": 106, "660": [106, 108], "run_hyperparameter_tuning_bayessearch": [106, 108], "logist": [107, 116, 135, 137], "031": 107, "032": 107, "petal_width": [107, 110, 127, 133, 136, 137], "model_sep": 107, "model_pet": 107, "035": 107, "__sepal": [107, 137], "036": 107, "__petal": [107, 137], "0x7f58ac2321d0": 107, "0x7f58ac232ef0": 107, "037": 107, "039": 107, "040": 107, "146": [107, 138], "147": 107, "85": 107, "843": [107, 108], "run_stacked_model": [107, 108], "766": 108, "auto_examples_03_complex_model": 108, "relat": [109, 125, 133], "stratifiedbootstrap": 110, "926": 110, "ml": [110, 122], "classic": 110, "frequentist": 110, "contrast": 110, "gap": 110, "approach": [110, 124, 126, 127, 132, 137], "below": [110, 121, 124, 127], "2000": 110, "n_bootstrap": 110, "n_element": 110, "len": [110, 111, 125], "scores_ncr": 110, "929": 110, "930": 110, "931": 110, "932": 110, "933": [110, 136], "next": [110, 121, 123, 131, 133, 137], "again": [110, 125, 126, 127, 129, 132, 137], "tell": [110, 125, 136], "confound_remov": [110, 111, 116, 125], "scores_cr": 110, "091": [110, 137], "__confound": [110, 125], "__featur": [110, 125], "092": [110, 131], "easier": [110, 118, 137, 138], "df_ncr_metric": 110, "df_cr_metric": 110, "df_metric": 110, "933333": 110, "968889": 110, "948889": 110, "catplot": 110, "col": 110, "swarm": 110, "them": [110, 118, 120, 121, 122, 124, 126, 127, 135, 136, 137], "pair": 110, "systemat": 110, "df_diff_metr": 110, "whisker": 110, "box": [110, 122], "whi": 110, "axhlin": 110, "roc": 110, "auc": 110, "term": [110, 126, 133, 137], "mayb": [110, 135], "percentil": [110, 116], "amount": [110, 122, 129], "ncr_fi": 110, "cr_fi": 110, "feature_import": 110, "dodg": [110, 126], "diff_fi": 110, "axvlin": [110, 126], "782": [110, 112], "plot_confound_removal_classif": [110, 112], "most": [111, 121, 124, 125, 126, 129, 132, 137], "remove_confound": 111, "sometim": [111, 125, 129, 130, 131], "discuss": 111, "df_featur": 111, "furthermor": [111, 127], "put": [111, 125], "148": 111, "149": 111, "0x7f58abce5030": 111, "feature_nam": [111, 135], "151": [111, 129, 138], "153": 111, "df_deconfound": 111, "029271": 111, "057228": 111, "009658": 111, "046011": 111, "042050": 111, "024189": 111, "019424": 111, "012310": 111, "028194": 111, "005874": 111, "047538": 111, "015568": 111, "006874": 111, "012796": 111, "057488": 111, "024667": 111, "061639": 111, "082913": 111, "076494": 111, "039983": 111, "017885": 111, "047387": 111, "041423": 111, "013144": 111, "004736": 111, "036479": 111, "081307": 111, "007659": 111, "025897": 111, "013765": 111, "031358": 111, "052961": 111, "049135": 111, "029380": 111, "000071": 111, "013139": 111, "032449": 111, "032631": 111, "005510": 111, "021964": 111, "008781": 111, "012234": 111, "025295": 111, "037349": 111, "assum": [111, 126], "closer": [111, 116, 136], "achiev": [111, 125, 131, 136, 137], "359": 111, "360": 111, "0x7f58abce7010": 111, "361": 111, "363": 111, "df_transform": 111, "pca__pca2": 111, "pca__pca3": 111, "pca__pca4": 111, "pca__pca5": 111, "pca__pca6": 111, "pca__pca7": 111, "pca__pca8": 111, "014051": 111, "075715": 111, "017395": 111, "012591": 111, "046676": 111, "013408": 111, "034497": 111, "008604": 111, "002330": 111, "099883": 111, "062829": 111, "014516": 111, "013673": 111, "048058": 111, "010254": 111, "004124": 111, "024022": 111, "002075": 111, "029015": 111, "053253": 111, "032477": 111, "061933": 111, "049167": 111, "029565": 111, "042031": 111, "001197": 111, "002579": 111, "035162": 111, "001324": 111, "106807": 111, "028981": 111, "020850": 111, "023413": 111, "008421": 111, "006566": 111, "003545": 111, "003951": 111, "025445": 111, "000421": 111, "018411": 111, "039692": 111, "025022": 111, "043086": 111, "002095": 111, "000517": 111, "lastli": [111, 125], "586": 111, "587": 111, "023045": 111, "008563": 111, "429556": 111, "353": [111, 114], "89": [111, 114, 127], "022781": 111, "008567": 111, "522599": 111, "022652": 111, "008520": 111, "482681": 111, "354": [111, 114], "88": [111, 114], "022881": 111, "008510": 111, "426498": 111, "022761": 111, "008498": 111, "550248": 111, "656": [111, 112], "run_return_confound": [111, 112], "438": 112, "auto_examples_04_confound": 112, "extend": [113, 136], "variou": 113, "aspect": [113, 126, 137], "make_scor": 114, "register_scor": 114, "889": 114, "890": 114, "906": 114, "907": 114, "908": 114, "004746": 114, "002326": 114, "104359": 114, "004484": 114, "002293": 114, "44": 114, "861364": 114, "004439": 114, "002289": 114, "981407": 114, "004523": 114, "002332": 114, "956254": 114, "004416": 114, "419886": 114, "264653948271885": 114, "thing": [114, 132, 137], "r2_corr": [114, 136], "956": 114, "957": 114, "958": 114, "test_neg_mean_absolute_error": 114, "test_r2_corr": 114, "264654": 114, "486498": 114, "take": [114, 126, 129, 137], "def": 114, "pearson_scor": 114, "squeez": 114, "005": 114, "175": [114, 115, 127, 135], "run_custom_scorers_regress": [114, 115], "auto_examples_05_custom": 115, "descript": [116, 117, 118, 137], "short": [116, 118, 125], "link": [116, 118, 134, 137, 138], "unit": [116, 122], "scaler_robust": 116, "median": 116, "iqr": 116, "robustscal": [116, 127], "scaler_minmax": 116, "minmaxscal": 116, "scaler_maxab": 116, "maxabsscal": 116, "scaler_norm": 116, "norm": 116, "scaler_quantil": 116, "robust": [116, 120], "quantiletransform": 116, "scaler_pow": 116, "gaussianis": 116, "powertransform": 116, "select_univari": 116, "genericunivariateselect": 116, "select_percentil": 116, "rank": 116, "selectpercentil": 116, "select_k": [116, 127], "selectkbest": [116, 127], "select_fdr": 116, "selectfdr": 116, "select_fpr": 116, "fpr": 116, "selectfpr": 116, "select_fw": 116, "fwe": 116, "selectfw": 116, "variancethreshold": 116, "drop_column": 116, "dropcolumn": 116, "change_column_typ": 116, "changecolumntyp": 116, "filtercolumn": 116, "princip": [116, 137], "svr": [116, 130, 131], "randomforestregressor": 116, "extratreesclassifi": 116, "extratreesregressor": 116, "adaboost": 116, "adaboostclassifi": 116, "adaboostregressor": 116, "bag": 116, "baggingclassifi": 116, "baggingregressor": 116, "gradientboost": 116, "gradient": 116, "boost": 116, "gradientboostingclassifi": 116, "gradientboostingregressor": 116, "stackingclassifi": [116, 130], "stackingregressor": [116, 130], "gauss": 116, "gaussianprocessclassifi": 116, "gaussianprocessregressor": 116, "logit": [116, 127, 135], "aka": 116, "maxent": 116, "logisticregress": [116, 127], "logitcv": 116, "logisticregressioncv": 116, "l2": [116, 127], "ridgeclassifi": 116, "ridgecv": 116, "built": [116, 122, 130, 135, 136, 137], "ridgeclassifiercv": 116, "sgd": 116, "minim": 116, "empir": [116, 126], "loss": [116, 125], "sgdclassifi": 116, "sgdregressor": 116, "nb_bernoulli": 116, "multivari": 116, "bernoulli": 116, "bernoullinb": 116, "nb_categor": 116, "categoricalnb": 116, "nb_complement": 116, "complementnb": 116, "nb_gaussian": 116, "gaussiannb": 116, "nb_multinomi": 116, "multinomi": 116, "multinomialnb": 116, "dynamicselect": [116, 138], "dummyclassifi": 116, "dummyregressor": 116, "meant": 117, "friendli": [117, 137], "come": [117, 118, 126, 129, 133, 137], "cost": 117, "potenti": [117, 125, 129], "These": [117, 120, 121, 124, 136], "therefor": [117, 121, 124, 125, 136, 137], "flag": [117, 118], "enabl": [117, 138], "disabl": 117, "config": 117, "disable_x_check": 117, "unmatch": 117, "think": [117, 125], "disable_xtypes_check": 117, "miss": [117, 138], "disable_x_verbos": 117, "disable_xtypes_verbos": 117, "fork": 118, "com": [118, 126, 132, 138], "juaml": 118, "repositori": 118, "never": [118, 137], "offici": [118, 121], "clone": 118, "virtual": [118, 121], "pip": [118, 120, 121], "branch": [118, 123], "refactor": [118, 138], "feat": 118, "prefix": 118, "git": [118, 123, 138], "checkout": [118, 123], "pre": [118, 121, 123, 138], "commit": [118, 123, 138], "hook": [118, 138], "help": [118, 121, 122, 125, 129, 135, 137], "regularli": 118, "On": [118, 125, 136], "save": [118, 137], "smaller": 118, "semant": 118, "wip": 118, "verifi": [118, 136], "suit": [118, 129], "tox": 118, "push": [118, 123], "open": 118, "displai": [118, 129, 135], "submit": 118, "templat": 118, "web": 118, "interfac": [118, 127, 130], "meet": 118, "directori": 118, "rare": 118, "circumst": 118, "coverag": 118, "decreas": 118, "report": 118, "codecov": 118, "usag": [118, 121, 132, 137, 138], "draft": [118, 123], "id": 118, "liner": [118, 135], "newsfrag": 118, "bug": [118, 138], "bugfix": 118, "enhanc": 118, "enh": 118, "improv": [118, 121], "miscellan": 118, "misc": 118, "record": 118, "101": 118, "content": 118, "typo": [118, 138], "intro": 118, "biggest": 118, "fan": 118, "yourself": 118, "contributor": 118, "inc": 118, "against": 118, "someon": [118, 126], "core": [118, 132, 135], "team": 118, "success": [118, 127, 132], "pytest": [118, 138], "intend": 118, "cd": 118, "_build": 118, "situat": 118, "clean": [118, 121], "rest": 118, "rst": [118, 123], "plot_": 118, "run_": 118, "block": 118, "comment": 118, "render": [118, 136], "emb": 118, "shall": [118, 126], "preced": 118, "bokeh": [120, 121, 138], "develop": [120, 121, 122, 123, 138], "usual": [120, 127, 137], "through": [120, 137], "manag": [120, 138], "conda": [120, 121], "forg": [120, 121], "standalon": 120, "applic": [120, 124, 125, 129], "browser": 120, "jupyter_bokeh": 120, "servabl": 120, "27": [121, 125], "statsmodel": 121, "nevertheless": [121, 137], "although": 121, "strongli": 121, "recommend": [121, 133], "environ": [121, 122, 136], "promin": 121, "venv": 121, "env": 121, "latest": [121, 123, 138], "often": [121, 125, 132, 137], "newest": 121, "sens": [121, 127], "aim": [121, 122, 137], "pypi": [121, 123], "via": [121, 123, 134], "relas": 121, "yet": [121, 133], "newer": 121, "unmaintain": 121, "skopt": [121, 127], "optuna_integr": 121, "orient": 122, "aml": 122, "institut": 122, "neurosci": [122, 124], "medicin": 122, "behaviour": [122, 127, 136], "inm": 122, "thought": [122, 137], "research": [122, 124, 125, 126], "simpler": 122, "abstract": 122, "power": [122, 129, 130], "minor": [122, 123], "flexibl": [122, 130], "video": 122, "tutori": 122, "offer": [122, 133], "essenti": [122, 129], "benefit": 122, "therebi": 122, "avoid": [122, 125, 126, 127, 138], "nice": [122, 133, 136, 137], "system": [122, 123], "accord": [122, 124, 126, 130, 138], "setup": [122, 134], "suggest": [122, 126], "deeper": [122, 129, 134, 135], "topic": [122, 126, 134, 135], "overview": [122, 129, 135, 137], "contribut": 122, "local": 122, "github": [122, 136, 138], "pull": [122, 123], "guidelin": 122, "write": [122, 137], "maintain": 122, "faq": 122, "issu": [122, 123, 126, 129, 138], "2023": 122, "07": 122, "2022": [122, 125], "scientif": 122, "public": 122, "vera": 122, "komey": 122, "free": 122, "arxiv": [122, 125], "octob": 122, "48550": 122, "2310": 122, "12568": 122, "heavili": 122, "reliant": 122, "cite": 122, "major": [123, 127], "micro": 123, "devn": 123, "distanc": 123, "setuptools_scm": 123, "plugin": 123, "tag": 123, "increment": [123, 137], "segment": 123, "publish": 123, "onc": [123, 129, 132, 134, 137], "mileston": 123, "reach": 123, "towncrier": 123, "proceed": [123, 137], "sync": 123, "rebas": 123, "changelog": 123, "properli": 123, "reflect": [123, 138], "whats_new": 123, "pr": 123, "merg": 123, "vx": 123, "setuptools_scm_debug": 123, "outdir": 123, "dist": 123, "bump": [123, 138], "vd": 123, "neuroimag": [124, 125], "typic": 124, "problemat": 124, "due": [124, 126, 127], "curs": 124, "especi": 124, "recent": 124, "propos": 124, "fluid": 124, "intellig": 124, "sustain": 124, "attent": 124, "nutshel": 124, "summar": 124, "subsequ": 124, "commonli": [124, 137], "principl": 124, "leverag": [124, 129], "workflow": [124, 129, 134, 137], "x_name": [124, 130], "feature_": [124, 125, 130], "cbpm_pipeline_cr": 124, "final_model": [124, 129], "530": 124, "feature_1": [124, 125, 130], "feature_2": [124, 125, 130], "feature_3": [124, 125, 130], "feature_4": [124, 125, 130], "feature_5": [124, 125, 130], "feature_6": [124, 125, 130], "feature_7": [124, 125, 130], "feature_8": [124, 125, 130], "feature_9": [124, 125, 130], "feature_10": [124, 125, 130], "feature_11": [124, 125, 130], "feature_12": [124, 125, 130], "feature_13": [124, 125, 130], "feature_14": [124, 125, 130], "feature_15": [124, 125, 130], "feature_16": [124, 125, 130], "feature_17": [124, 125, 130], "feature_18": [124, 125, 130], "feature_19": [124, 125, 130], "feature_20": [124, 130], "531": [124, 135], "533": [124, 135], "No": [124, 126], "rid": 124, "267": 124, "604": 124, "628": 124, "653": 124, "678": 124, "customis": 124, "increas": 124, "cbpm__significance_threshold": 124, "noteworthi": 124, "sign": 124, "spearmanr": 124, "686": 124, "0x7f58b1785e10": 124, "0x7f58d3958e50": 124, "0x7f58d395c530": 124, "guess": 124, "spearman": 124, "xilin": 124, "mar": [124, 125], "emili": 124, "fingerprint": 124, "2015": 124, "nov": 124, "1664": 124, "71": 124, "rosenberg": 124, "monica": 124, "neuromark": 124, "whole": [124, 127], "jan": [124, 125], "165": [124, 127], "159": [124, 127], "ultim": 125, "world": [125, 129], "scenario": [125, 136, 137], "relationship": 125, "un": 125, "observ": 125, "similarli": [125, 129], "rather": 125, "jointli": 125, "prevent": [125, 127], "laid": 125, "rel": [125, 130], "littl": 125, "involv": 125, "simul": 125, "artifici": [125, 130, 137], "normal_dist_conf_on": 125, "normal_dist_conf_two": 125, "noise_conf_on": 125, "rand": [125, 126], "noise_conf_two": 125, "multipli": 125, "factor": 125, "confound_on": 125, "confound_two": 125, "prefer": 125, "human": 125, "readabl": 125, "confound_1": 125, "confound_2": 125, "my_target": 125, "distinguish": [125, 130, 137], "predictor": 125, "accordingli": [125, 132], "crucial": 125, "parametr": [125, 127, 133, 137], "41": [125, 135], "712": 125, "whose": 125, "713": 125, "714": 125, "feature_0": 125, "715": 125, "717": 125, "22": [125, 127], "024559": 125, "007006": 125, "786706": 125, "023676": 125, "006975": 125, "592156": 125, "023837": 125, "007004": 125, "722494": 125, "023584": 125, "006900": 125, "674188": 125, "023749": 125, "006996": 125, "570243": 125, "slightli": 125, "target_confound_remov": 125, "0x7f58ac233790": 125, "insert": 125, "importantli": [125, 126, 129, 132, 133, 137], "879": [125, 137], "880": [125, 137], "0x7f58ababf8b0": 125, "881": [125, 130, 137], "882": [125, 130], "883": 125, "884": 125, "007328": 125, "003944": 125, "253033": 125, "005912": 125, "003881": 125, "059126": 125, "005856": 125, "003816": 125, "256962": 125, "005955": 125, "003841": 125, "096475": 125, "005926": 125, "003822": 125, "534386": 125, "reason": [125, 126], "further": [125, 127, 132], "consider": 125, "why": [125, 126, 127, 134], "mitig": 125, "bia": [125, 126], "accur": 125, "argu": 125, "appropri": 125, "valuabl": [125, 129, 132], "difficult": [125, 127], "challeng": 125, "ineffect": 125, "particular": [125, 129, 137], "fact": [125, 129], "collid": 125, "spuriou": 125, "evid": [125, 126], "leak": [125, 132], "bias": [125, 126], "care": [125, 137], "question": [125, 126], "thorough": 125, "strength": 125, "limit": 125, "techniqu": [125, 126, 127, 129], "rao": 125, "anil": 125, "presenc": 125, "volum": [125, 126], "april": 125, "snoek": 125, "luka": 125, "184": [125, 135], "januari": 125, "2019": 125, "he": 125, "tong": 125, "neural": [125, 137], "network": [125, 137], "206": 125, "februari": 125, "2020": 125, "116276": 125, "practic": [125, 126], "knowledg": [125, 129], "discoveri": 125, "databas": 125, "scienc": [125, 132], "demo": 125, "track": 125, "2021": 125, "12461": 125, "chyzhyk": 125, "darya": 125, "biomark": 125, "gigasci": 125, "holmberg": 125, "mathia": 125, "jama": 125, "1282": 125, "1283": 125, "1001": [125, 135], "1820": 125, "2210": 125, "09232": 125, "revis": 125, "oct": 125, "234": [125, 138], "mention": 126, "don": [126, 127], "almost": 126, "infinit": 126, "unbias": 126, "overestim": 126, "rememb": [126, 129, 136], "surpris": 126, "would": [126, 127, 133, 135, 137], "answer": 126, "imposs": 126, "bengio": 126, "grandvalet": 126, "colleagu": 126, "few": [126, 129, 132, 138], "word": [126, 127], "thumb": [126, 137], "compromis": 126, "loocv": 126, "holdout": 126, "taken": 126, "intens": 126, "unconclus": 126, "intuit": [126, 129, 135], "direct": [126, 127], "thread": 126, "extrem": 126, "choic": 126, "fun": 126, "begin": 126, "variant": 126, "solv": [126, 132], "shed": 126, "light": 126, "poorli": 126, "stratifiedkfold": [126, 136], "rescu": 126, "matter": [126, 132, 135], "quantiz": 126, "divid": 126, "histplot": 126, "train_set": 126, "test_set": 126, "shrink": [126, 129], "suptitl": 126, "gaussian": 126, "discrete_i": 126, "digit": 126, "kdeplot": 126, "layer": 126, "dash": 126, "repeatedcontinuousstratifiedkfold": [126, 138], "repeatedcontinuousstratifiedgroupkfold": 126, "jmlr": 126, "decemb": 126, "2004": 126, "1089": 126, "1105": 126, "stackexchang": 126, "61783": 126, "kohavi": 126, "ijcai": 126, "1137": 126, "1145": 126, "610": 126, "flower": 127, "pprint": [127, 129, 136], "pretti": 127, "tolist": [127, 135], "132": [127, 135], "133": 127, "who": 127, "common": [127, 132], "134": 127, "135": [127, 135, 138], "136": 127, "137": [127, 130], "8099999999999999": 127, "176": 127, "177": 127, "etc": 127, "optimist": 127, "loop": 127, "scores_tun": 127, "model_tun": 127, "220": 127, "221": 127, "9100000000000001": 127, "tri": 127, "conclud": 127, "156": 127, "157": 127, "158": 127, "160": 127, "735": 127, "736": 127, "0001": 127, "740": 127, "072": 127, "073": 127, "select_k__k": 127, "074": 127, "075": 127, "077": 127, "concept": [127, 132], "receiv": 127, "veri": [127, 129, 130, 132, 133], "construct": 127, "_grid_": 127, "diment": 127, "lot": [127, 129], "consum": 127, "constraint": 127, "framework": 127, "164": 127, "166": 127, "167": 127, "061": 127, "066": 127, "067": 127, "77140446796582": 127, "022636153281629743": 127, "accept": 127, "53": 127, "996": 127, "997": 127, "998": 127, "999": 127, "002": 127, "003": 127, "9099999999999999": 127, "8975984906619887": 127, "028707916525659204": 127, "shown": 127, "modifi": [127, 137], "exemplarili": 127, "class_weight": [127, 129], "balanc": 127, "513": 127, "514": 127, "svm__class_weight": 127, "trial": 127, "create_studi": 127, "maxim": 127, "study_nam": 127, "load_if_exist": 127, "516": 127, "517": 127, "519": 127, "0x7f58ab729180": 127, "1045": 127, "experimentalwarn": 127, "v0": 127, "520": 127, "521": 127, "125": 127, "new_object": 127, "new_object_param": 127, "7699999999999999": 127, "825052695671807": 127, "0025647141705406463": 127, "toolbox": 127, "with_mean": [127, 129, 137], "423": 127, "zscore__with_mean": 127, "424": 127, "425": 127, "categoricaldistribut": 127, "floatdistribut": 127, "intdistribut": 127, "426": 127, "427": 127, "pca__n_compon": 127, "428": 127, "those": [127, 132], "unnecessari": 127, "model1": 127, "429": 127, "430": 127, "431": 127, "432": 127, "433": 127, "434": 127, "435": 127, "436": 127, "437": 127, "93": 127, "forc": 127, "repat": 127, "model2": 127, "052": 127, "053": 127, "054": 127, "055": 127, "056": 127, "057": 127, "058": 127, "059": 127, "inde": [127, 136], "equival": 127, "param_grid": [127, 129], "stop": 127, "creator3": [127, 135], "max_depth": [127, 130], "creator4": 127, "penalti": 127, "l1": 127, "dual": 127, "solver": 127, "liblinear": 127, "model3": 127, "726": 127, "727": 127, "728": 127, "729": 127, "model__c": 127, "model__gamma": 127, "730": 127, "731": 127, "model__max_depth": 127, "732": 127, "model__penalti": 127, "733": 127, "734": 127, "9200000000000002": 127, "beat": 127, "623": 127, "gain": 129, "insight": 129, "impact": 129, "abil": 129, "critic": 129, "influenc": 129, "deploy": 129, "focu": [129, 133], "anomali": 129, "toi": [129, 130], "plai": 129, "penguin": 129, "penguins_df": 129, "island": 129, "queri": 129, "chinstrap": 129, "dropna": 129, "adeli": 129, "gentoo": 129, "817": 129, "fairli": 129, "geomspac": [129, 130], "1e2": [129, 130], "288": 129, "289": 129, "notic": [129, 137], "290": 129, "bill_length_mm": 129, "bill_depth_mm": 129, "flipper_length_mm": 129, "body_mass_g": 129, "291": 129, "293": [129, 138], "274": 129, "294": [129, 136], "123": 129, "quick": 129, "error_scor": 129, "jucolumntransform": 129, "with_std": 129, "wrapmodel": 129, "break_ti": 129, "cache_s": 129, "coef0": 129, "decision_function_shap": 129, "ovr": 129, "max_it": 129, "tol": 129, "estimator__memori": 129, "estimator__set_column_typ": 129, "estimator__set_column_types__x_typ": 129, "estimator__set_column_types__row_select_col_typ": 129, "estimator__set_column_types__row_select_v": 129, "estimator__step": 129, "estimator__svm": 129, "estimator__svm__c": 129, "estimator__svm__apply_to": 129, "estimator__svm__break_ti": 129, "estimator__svm__cache_s": 129, "estimator__svm__class_weight": 129, "estimator__svm__coef0": 129, "estimator__svm__decision_function_shap": 129, "estimator__svm__degre": 129, "estimator__svm__gamma": 129, "estimator__svm__kernel": 129, "estimator__svm__max_it": 129, "estimator__svm__model": 129, "estimator__svm__needed_typ": 129, "estimator__svm__prob": 129, "estimator__svm__random_st": 129, "estimator__svm__shrink": 129, "estimator__svm__tol": 129, "estimator__svm__verbos": 129, "estimator__verbos": 129, "estimator__zscor": 129, "estimator__zscore__apply_to": 129, "estimator__zscore__copi": 129, "estimator__zscore__nam": 129, "estimator__zscore__needed_typ": 129, "estimator__zscore__row_select_col_typ": 129, "estimator__zscore__row_select_v": 129, "estimator__zscore__transform": 129, "estimator__zscore__with_mean": 129, "estimator__zscore__with_std": 129, "pre_dispatch": 129, "refit": 129, "get_fitted_param": 129, "set_column_types__column_mapper_": 129, "bill_depth_mm__": 129, "bill_length_mm__": 129, "body_mass_g__": 129, "flipper_length_mm__": 129, "set_column_types__feature_names_in_": 129, "svm__model_": 129, "zscore__column_transformer_": 129, "remaind": 129, "passthrough": 129, "make_type_selector": 129, "0x7f58abcfae00": 129, "verbose_feature_names_out": 129, "zscore__feature_names_in_": 129, "zscore__mean_": 129, "70291971": 129, "83613139": 129, "17883212": 129, "4318": 129, "06569343": 129, "zscore__n_features_in_": 129, "zscore__n_samples_seen_": 129, "zscore__scale_": 129, "18607683": 129, "00973207": 129, "02045287": 129, "834": 129, "40628575": 129, "zscore__var_": 129, "68953929e": 129, "03902299e": 129, "25614004e": 129, "96233850e": 129, "somewhat": [129, 130], "structur": [129, 133], "made": [129, 134, 135], "handi": [129, 133, 137], "fold_predict": 129, "repeat8_p0": 129, "repeat9_p0": 129, "269": 129, "270": [129, 138], "271": [129, 138], "272": 129, "273": 129, "c_valu": 129, "fold_inspector": 129, "fold_model": 129, "realiz": 129, "ever": 129, "address": 129, "aris": 129, "serv": 129, "asset": 129, "transpar": [129, 132], "reliabl": 129, "capabl": [129, 130, 138], "navig": 129, "har": 129, "342": 129, "customiz": 130, "cours": 130, "078": 130, "mind": 130, "arbitrari": [130, 136], "model_1": [130, 135], "00000000e": 130, "78255940e": 130, "74263683e": 130, "15443469e": 130, "99484250e": 130, "66810054e": 130, "64158883e": 130, "29154967e": 130, "59381366e": 130, "0x7f58ab85cd30": 130, "min_samples_leaf": 130, "min_samples_split": 130, "0x7f58ab85d180": 130, "0x7f58ab85e170": 130, "084": [130, 137], "085": [130, 137], "086": [130, 137], "rf__max_depth": 130, "rf__min_samples_leaf": 130, "rf__min_samples_split": 130, "228": 130, "desir": [130, 137], "type1": 130, "type2": 130, "type1_": 130, "type2_": 130, "689": 130, "__type1": 130, "690": 130, "0x7f58ab85c940": 130, "691": 130, "__type2": 130, "0x7f58ac08bc10": 130, "692": 130, "type1_1": 130, "type1_2": 130, "type1_3": 130, "type1_4": 130, "type1_5": 130, "type1_6": 130, "type1_7": 130, "type1_8": 130, "type1_9": 130, "type1_10": 130, "type2_1": 130, "type2_2": 130, "type2_3": 130, "type2_4": 130, "type2_5": 130, "type2_6": 130, "type2_7": 130, "type2_8": 130, "type2_9": 130, "type2_10": 130, "693": 130, "694": 130, "695": 130, "696": 130, "697": 130, "698": 130, "flexibli": 130, "Of": 130, "cover": [131, 133, 137], "far": [131, 133, 136, 137], "conist": 131, "manner": [131, 132, 133, 135, 137], "clear": 131, "330": 131, "target_jutargetpipelin": 131, "0x7f58ab9935e0": 131, "331": 131, "332": 131, "009932": 131, "003253": 131, "008737": 131, "009188": 131, "003209": 131, "009011": 131, "003205": 131, "009026": 131, "003159": 131, "overal": 131, "goal": 132, "beyond": 132, "exact": 132, "domingo": 132, "2012": 132, "resourc": 132, "effici": 132, "disadvantag": 132, "small": 132, "unstabl": 132, "overcom": 132, "accident": 132, "quickli": 132, "obviou": 132, "straightforward": [132, 137], "mistak": 132, "www": 132, "sciencedirect": 132, "articl": 132, "pii": 132, "s105381191630595x": 132, "natur": 132, "s41746": 132, "00592": 132, "s1053811917305311": 132, "cross_valid": 132, "commun": 133, "known": [133, 137], "capac": 133, "colum": 133, "manipul": 133, "anyth": [133, 136], "meaning": 133, "hundr": 133, "thousand": 133, "saw": [133, 135, 136, 137], "advanc": 133, "004": 133, "backbon": 134, "magic": 134, "goe": 134, "utmost": 134, "glanc": [134, 136], "chapter": 134, "familiar": 134, "along": 134, "fundament": 134, "essenc": 134, "click": 134, "fanci": 134, "stuff": 134, "decent": 135, "benchmark": 135, "enough": 135, "tediou": 135, "sound": 135, "switch": 135, "breast": 135, "cancer": 135, "malign": 135, "benign": 135, "load_breast_canc": 135, "radiu": 135, "textur": 135, "perimet": 135, "area": 135, "worst": 135, "concav": 135, "symmetri": 135, "fractal": 135, "dimens": 135, "38": [135, 136, 137], "122": [135, 138], "2654": 135, "4601": 135, "11890": 135, "1326": 135, "1860": 135, "2750": 135, "08902": 135, "69": 135, "130": 135, "1203": 135, "2430": 135, "3613": 135, "08758": 135, "386": 135, "2575": 135, "6638": 135, "17300": 135, "1297": 135, "1625": 135, "2364": 135, "07678": 135, "cv_splitter": [135, 136], "39": [135, 137], "368": 135, "369": 135, "smooth": 135, "compact": 135, "357": [135, 137], "212": 135, "534": 135, "535": 135, "253": 135, "254": 135, "255": [135, 138], "256": 135, "453": 135, "456": 135, "pairwis": 135, "neither": 135, "nor": 135, "946304": 135, "083461": 135, "250382": 135, "140882": 135, "891066": 135, "285373": 135, "048138": 135, "144413": 135, "361847": 135, "206356": 135, "619069": 135, "029499": 135, "977110": 135, "084010": 135, "306544": 135, "919632": 135, "dive": 135, "curiou": 135, "295": 136, "296": 136, "297": 136, "005147": 136, "002619": 136, "004644": 136, "002493": [136, 137], "004539": 136, "002454": 136, "004525": 136, "002479": 136, "004495": 136, "002463": [136, 137], "overfit": 136, "344": 136, "345": 136, "004666": 136, "002481": 136, "004680": 136, "002483": 136, "004470": 136, "002520": 136, "004481": 136, "002469": 136, "004556": 136, "train_scor": 136, "cryptic": 136, "worri": 136, "doesn": 136, "405": 136, "406": 136, "407": 136, "408": 136, "004662": 136, "004673": 136, "002466": 136, "002474": 136, "002499": 136, "x27": 136, "rerun": 136, "cell": 136, "represent": 136, "trust": 136, "unabl": 136, "nbviewer": 136, "nbsp": 136, "pipelineifittedpipelin": 136, "setcolumntypessetcolumntyp": 136, "standardscalerstandardscal": 136, "svcsvc": 136, "didn": 136, "got": 136, "five": 136, "back": 136, "ourselv": 136, "fourth": 136, "480": 136, "481": 136, "482": 136, "483": 136, "004714": 136, "002428": 136, "7449876d309382acfef94df9d102aa76": 136, "004573": 136, "002455": 136, "004597": 136, "002437": 136, "004553": 136, "002409": 136, "004588": 136, "002434": 136, "004499": 136, "002451": 136, "004526": 136, "002445": 136, "004496": 136, "002458": 136, "004534": 136, "002402": 136, "assumpt": 136, "list_scor": 136, "adjusted_mutual_info_scor": 136, "adjusted_rand_scor": 136, "average_precis": 136, "completeness_scor": 136, "explained_vari": 136, "f1": 136, "f1_macro": 136, "f1_micro": 136, "f1_sampl": 136, "f1_weight": 136, "fowlkes_mallows_scor": 136, "homogeneity_scor": 136, "jaccard": 136, "jaccard_macro": 136, "jaccard_micro": 136, "jaccard_sampl": 136, "jaccard_weight": 136, "matthews_corrcoef": 136, "max_error": 136, "mutual_info_scor": 136, "neg_brier_scor": 136, "neg_log_loss": 136, "neg_mean_absolute_percentage_error": 136, "neg_mean_gamma_devi": 136, "neg_mean_poisson_devi": 136, "neg_mean_squared_error": 136, "neg_mean_squared_log_error": 136, "neg_median_absolute_error": 136, "neg_negative_likelihood_ratio": 136, "neg_root_mean_squared_error": 136, "neg_root_mean_squared_log_error": 136, "normalized_mutual_info_scor": 136, "positive_likelihood_ratio": 136, "precision_macro": 136, "precision_micro": 136, "precision_sampl": 136, "precision_weight": 136, "rand_scor": 136, "recal": 136, "recall_macro": 136, "recall_micro": 136, "recall_sampl": 136, "recall_weight": 136, "roc_auc_ovo": 136, "roc_auc_ovo_weight": 136, "roc_auc_ovr": 136, "roc_auc_ovr_weight": 136, "top_k_accuraci": 136, "v_measure_scor": 136, "r_corr": 136, "594": 136, "596": 136, "004721": 136, "004070": 136, "004009": 136, "004545": 136, "004093": 136, "004621": 136, "003964": 136, "004527": 136, "003949": 136, "004575": 136, "004023": 136, "004558": 136, "004053": 136, "004574": 136, "003998": 136, "004635": 136, "003990": 136, "004578": 136, "003994": 136, "autom": 137, "pipe": 137, "fed": 137, "safe": 137, "878": 137, "003183": 137, "001743": 137, "002891": 137, "001691": 137, "002826": 137, "001668": 137, "002777": 137, "001674": 137, "002756": 137, "001690": 137, "voil\u00e0": 137, "resembl": 137, "scaler": 137, "914": 137, "915": 137, "916": 137, "917": 137, "004684": 137, "002461": 137, "004502": 137, "004542": 137, "002429": 137, "002442": 137, "004507": 137, "decomposit": 137, "previous": 137, "962": 137, "963": 137, "964": 137, "965": 137, "006007": 137, "003320": 137, "005730": 137, "003294": 137, "005659": 137, "003290": 137, "005670": 137, "003274": 137, "005693": 137, "003327": 137, "opaqu": 137, "simplifi": 137, "neat": 137, "024": 137, "025": 137, "026": 137, "005879": 137, "003241": 137, "005737": 137, "003311": 137, "005796": 137, "003270": 137, "005699": 137, "005677": 137, "003260": 137, "awesom": 137, "prepreprocess": 137, "jump": 137, "aren": 137, "shouldn": 137, "ye": 137, "turn": 137, "learnt": 137, "experi": 137, "heurist": 137, "rate": 137, "sigma": 137, "sai": 137, "basi": 137, "comma": 137, "wonder": 137, "besid": 137, "definit": 137, "pca_1": 137, "017636": 137, "007399": 137, "017152": 137, "007680": 137, "016996": 137, "007491": 137, "017190": 137, "007468": 137, "017205": 137, "007409": 137, "boser": 137, "guyon": 137, "vapnik": 137, "margin": 137, "colt": 137, "92": 137, "fifth": 137, "annual": 137, "workshop": 137, "theori": 137, "1992": 137, "jul": 137, "144": 137, "older": 138, "fede": 138, "run_fit": 138, "logic": 138, "optimis": 138, "integr": 138, "265": 138, "dant": 138, "culaciati": 138, "258": 138, "hyperparemt": 138, "249": 138, "262": 138, "260": 138, "hyperparmet": 138, "action": 138, "mark": 138, "stale": 138, "synchon": 138, "mandal": 138, "224": 138, "244": 138, "lazi": 138, "fixtur": 138, "251": 138, "skip": 138, "236": 138, "245": 138, "168": 138, "header": 138, "languag": 138, "snippet": 138, "235": 138, "170": 138, "adopt": 138, "ruff": 138, "linter": 138, "codebas": 138, "231": 138, "codespel": 138, "232": 138, "233": 138, "surround": 138, "instruct": 138, "94": 138, "108": 138, "multiprocess": 138, "nos": 138, "extendeddataframepipelin": 138, "tranform_until": 138, "63": 138, "minimum": 138, "face": 138, "create_pipelin": 138, "register_model": 138, "105": 138}, "objects": {"julearn": [[1, 0, 1, "", "PipelineCreator"], [2, 0, 1, "", "TargetPipelineCreator"], [74, 3, 0, "-", "api"], [0, 3, 0, "-", "base"], [73, 3, 0, "-", "inspect"], [75, 3, 0, "-", "model_selection"], [76, 3, 0, "-", "models"], [77, 3, 0, "-", "pipeline"], [78, 3, 0, "-", "prepare"], [33, 5, 1, "", "run_cross_validation"], [34, 5, 1, "", "run_fit"], [79, 3, 0, "-", "scoring"], [80, 3, 0, "-", "stats"], [81, 3, 0, "-", "transformers"], [82, 3, 0, "-", "utils"], [83, 3, 0, "-", "viz"]], "julearn.PipelineCreator": [[1, 1, 1, "", "__init__"], [1, 1, 1, "", "add"], [1, 1, 1, "", "copy"], [1, 1, 1, "", "from_list"], [1, 1, 1, "", "has_model"], [1, 1, 1, "", "split"], [1, 2, 1, "", "steps"], [1, 1, 1, "", "to_pipeline"]], "julearn.TargetPipelineCreator": [[2, 1, 1, "", "__init__"], [2, 1, 1, "", "add"], [2, 1, 1, "", "to_pipeline"]], "julearn.base": [[3, 0, 1, "", "ColumnTypes"], [4, 4, 1, "", "ColumnTypesLike"], [5, 0, 1, "", "JuBaseEstimator"], [6, 0, 1, "", "JuTransformer"], [7, 0, 1, "", "WrapModel"], [8, 5, 1, "", "change_column_type"], [9, 5, 1, "", "ensure_column_types"], [10, 5, 1, "", "get_column_type"], [11, 5, 1, "", "make_type_selector"]], "julearn.base.ColumnTypes": [[3, 1, 1, "", "__init__"], [3, 1, 1, "", "add"], [3, 1, 1, "", "copy"], [3, 2, 1, "", "pattern"], [3, 1, 1, "", "to_type_selector"]], "julearn.base.JuBaseEstimator": [[5, 1, 1, "", "__init__"], [5, 1, 1, "", "filter_columns"], [5, 1, 1, "", "get_apply_to"], [5, 1, 1, "", "get_metadata_routing"], [5, 1, 1, "", "get_needed_types"], [5, 1, 1, "", "get_params"], [5, 1, 1, "", "set_params"]], "julearn.base.JuTransformer": [[6, 1, 1, "", "__init__"], [6, 1, 1, "", "filter_columns"], [6, 1, 1, "", "fit"], [6, 1, 1, "", "fit_transform"], [6, 1, 1, "", "get_apply_to"], [6, 1, 1, "", "get_metadata_routing"], [6, 1, 1, "", "get_needed_types"], [6, 1, 1, "", "get_params"], [6, 1, 1, "", "set_output"], [6, 1, 1, "", "set_params"]], "julearn.base.WrapModel": [[7, 1, 1, "", "__init__"], [7, 2, 1, "", "classes_"], [7, 1, 1, "", "decision_function"], [7, 1, 1, "", "filter_columns"], [7, 1, 1, "", "fit"], [7, 1, 1, "", "get_apply_to"], [7, 1, 1, "", "get_metadata_routing"], [7, 1, 1, "", "get_needed_types"], [7, 1, 1, "", "get_params"], [7, 1, 1, "", "predict"], [7, 1, 1, "", "predict_log_proba"], [7, 1, 1, "", "predict_proba"], [7, 1, 1, "", "score"], [7, 1, 1, "", "set_params"]], "julearn.inspect": [[12, 0, 1, "", "FoldsInspector"], [13, 0, 1, "", "Inspector"], [14, 5, 1, "", "preprocess"]], "julearn.inspect.FoldsInspector": [[12, 1, 1, "", "__init__"], [12, 1, 1, "", "decision_function"], [12, 1, 1, "", "predict"], [12, 1, 1, "", "predict_log_proba"], [12, 1, 1, "", "predict_proba"]], "julearn.inspect.Inspector": [[13, 1, 1, "", "__init__"], [13, 2, 1, "", "folds"], [13, 2, 1, "", "model"]], "julearn.model_selection": [[15, 0, 1, "", "ContinuousStratifiedGroupKFold"], [16, 0, 1, "", "ContinuousStratifiedKFold"], [17, 0, 1, "", "RepeatedContinuousStratifiedGroupKFold"], [18, 0, 1, "", "RepeatedContinuousStratifiedKFold"], [19, 0, 1, "", "StratifiedBootstrap"], [20, 5, 1, "", "get_searcher"], [21, 5, 1, "", "list_searchers"], [22, 5, 1, "", "register_searcher"], [23, 5, 1, "", "reset_searcher_register"]], "julearn.model_selection.ContinuousStratifiedGroupKFold": [[15, 1, 1, "", "__init__"], [15, 1, 1, "", "get_metadata_routing"], [15, 1, 1, "", "get_n_splits"], [15, 1, 1, "", "set_split_request"], [15, 1, 1, "", "split"]], "julearn.model_selection.ContinuousStratifiedKFold": [[16, 1, 1, "", "__init__"], [16, 1, 1, "", "get_metadata_routing"], [16, 1, 1, "", "get_n_splits"], [16, 1, 1, "", "split"]], "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold": [[17, 1, 1, "", "__init__"], [17, 1, 1, "", "get_metadata_routing"], [17, 1, 1, "", "get_n_splits"], [17, 1, 1, "", "split"]], "julearn.model_selection.RepeatedContinuousStratifiedKFold": [[18, 1, 1, "", "__init__"], [18, 1, 1, "", "get_metadata_routing"], [18, 1, 1, "", "get_n_splits"], [18, 1, 1, "", "split"]], "julearn.model_selection.StratifiedBootstrap": [[19, 1, 1, "", "__init__"], [19, 1, 1, "", "get_metadata_routing"], [19, 1, 1, "", "get_n_splits"], [19, 1, 1, "", "split"]], "julearn.models": [[76, 3, 0, "-", "dynamic"], [25, 5, 1, "", "get_model"], [26, 5, 1, "", "list_models"], [27, 5, 1, "", "register_model"], [28, 5, 1, "", "reset_model_register"]], "julearn.models.dynamic": [[24, 0, 1, "", "DynamicSelection"]], "julearn.models.dynamic.DynamicSelection": [[24, 1, 1, "", "__init__"], [24, 1, 1, "", "fit"], [24, 1, 1, "", "get_metadata_routing"], [24, 1, 1, "", "get_params"], [24, 1, 1, "", "predict"], [24, 1, 1, "", "predict_proba"], [24, 1, 1, "", "score"], [24, 1, 1, "", "set_params"], [24, 1, 1, "", "set_score_request"]], "julearn.pipeline": [[29, 0, 1, "", "JuTargetPipeline"]], "julearn.pipeline.JuTargetPipeline": [[29, 1, 1, "", "__init__"], [29, 1, 1, "", "can_inverse_transform"], [29, 1, 1, "", "fit"], [29, 1, 1, "", "fit_transform"], [29, 1, 1, "", "inverse_transform"], [29, 2, 1, "", "needed_types"], [29, 1, 1, "", "transform"]], "julearn.pipeline.pipeline_creator": [[30, 0, 1, "", "Step"]], "julearn.pipeline.pipeline_creator.Step": [[30, 1, 1, "", "__init__"], [30, 4, 1, "", "apply_to"], [30, 4, 1, "", "estimator"], [30, 4, 1, "", "name"], [30, 4, 1, "", "needed_types"], [30, 4, 1, "", "params_to_tune"], [30, 4, 1, "", "row_select_col_type"], [30, 4, 1, "", "row_select_vals"]], "julearn.prepare": [[31, 5, 1, "", "check_consistency"], [32, 5, 1, "", "prepare_input_data"]], "julearn.scoring": [[35, 5, 1, "", "check_scoring"], [36, 5, 1, "", "get_scorer"], [37, 5, 1, "", "list_scorers"], [79, 3, 0, "-", "metrics"], [40, 5, 1, "", "register_scorer"], [41, 5, 1, "", "reset_scorer_register"]], "julearn.scoring.metrics": [[38, 5, 1, "", "r2_corr"], [39, 5, 1, "", "r_corr"]], "julearn.stats": [[42, 5, 1, "", "corrected_ttest"]], "julearn.transformers": [[43, 0, 1, "", "CBPM"], [44, 0, 1, "", "ChangeColumnTypes"], [45, 0, 1, "", "DropColumns"], [46, 0, 1, "", "FilterColumns"], [47, 0, 1, "", "JuColumnTransformer"], [48, 0, 1, "", "SetColumnTypes"], [50, 5, 1, "", "get_transformer"], [51, 5, 1, "", "list_transformers"], [52, 5, 1, "", "register_transformer"], [53, 5, 1, "", "reset_transformer_register"], [81, 3, 0, "-", "target"]], "julearn.transformers.CBPM": [[43, 1, 1, "", "__init__"], [43, 1, 1, "", "aggregate"], [43, 1, 1, "", "fit"], [43, 1, 1, "", "fit_transform"], [43, 1, 1, "", "get_feature_names_out"], [43, 1, 1, "", "get_metadata_routing"], [43, 1, 1, "", "get_params"], [43, 1, 1, "", "set_output"], [43, 1, 1, "", "set_params"], [43, 1, 1, "", "transform"]], "julearn.transformers.ChangeColumnTypes": [[44, 1, 1, "", "__init__"], [44, 1, 1, "", "filter_columns"], [44, 1, 1, "", "fit"], [44, 1, 1, "", "fit_transform"], [44, 1, 1, "", "get_apply_to"], [44, 1, 1, "", "get_feature_names_out"], [44, 1, 1, "", "get_metadata_routing"], [44, 1, 1, "", "get_needed_types"], [44, 1, 1, "", "get_params"], [44, 1, 1, "", "set_output"], [44, 1, 1, "", "set_params"], [44, 1, 1, "", "transform"]], "julearn.transformers.DropColumns": [[45, 1, 1, "", "__init__"], [45, 1, 1, "", "filter_columns"], [45, 1, 1, "", "fit"], [45, 1, 1, "", "fit_transform"], [45, 1, 1, "", "get_apply_to"], [45, 1, 1, "", "get_metadata_routing"], [45, 1, 1, "", "get_needed_types"], [45, 1, 1, "", "get_params"], [45, 1, 1, "", "get_support"], [45, 1, 1, "", "set_output"], [45, 1, 1, "", "set_params"], [45, 1, 1, "", "transform"]], "julearn.transformers.FilterColumns": [[46, 1, 1, "", "__init__"], [46, 1, 1, "", "filter_columns"], [46, 1, 1, "", "fit"], [46, 1, 1, "", "fit_transform"], [46, 1, 1, "", "get_apply_to"], [46, 1, 1, "", "get_feature_names_out"], [46, 1, 1, "", "get_metadata_routing"], [46, 1, 1, "", "get_needed_types"], [46, 1, 1, "", "get_params"], [46, 1, 1, "", "set_output"], [46, 1, 1, "", "set_params"], [46, 1, 1, "", "transform"]], "julearn.transformers.JuColumnTransformer": [[47, 1, 1, "", "__init__"], [47, 1, 1, "", "filter_columns"], [47, 1, 1, "", "fit"], [47, 1, 1, "", "fit_transform"], [47, 1, 1, "", "get_apply_to"], [47, 1, 1, "", "get_feature_names_out"], [47, 1, 1, "", "get_metadata_routing"], [47, 1, 1, "", "get_needed_types"], [47, 1, 1, "", "get_params"], [47, 1, 1, "", "set_output"], [47, 1, 1, "", "set_params"], [47, 1, 1, "", "transform"]], "julearn.transformers.SetColumnTypes": [[48, 1, 1, "", "__init__"], [48, 1, 1, "", "filter_columns"], [48, 1, 1, "", "fit"], [48, 1, 1, "", "fit_transform"], [48, 1, 1, "", "get_apply_to"], [48, 1, 1, "", "get_feature_names_out"], [48, 1, 1, "", "get_metadata_routing"], [48, 1, 1, "", "get_needed_types"], [48, 1, 1, "", "get_params"], [48, 1, 1, "", "set_output"], [48, 1, 1, "", "set_params"], [48, 1, 1, "", "transform"]], "julearn.transformers.confound_remover": [[49, 0, 1, "", "ConfoundRemover"]], "julearn.transformers.confound_remover.ConfoundRemover": [[49, 1, 1, "", "__init__"], [49, 1, 1, "", "filter_columns"], [49, 1, 1, "", "fit"], [49, 1, 1, "", "fit_transform"], [49, 1, 1, "", "get_apply_to"], [49, 1, 1, "", "get_feature_names_out"], [49, 1, 1, "", "get_metadata_routing"], [49, 1, 1, "", "get_needed_types"], [49, 1, 1, "", "get_params"], [49, 1, 1, "", "get_support"], [49, 1, 1, "", "set_output"], [49, 1, 1, "", "set_params"], [49, 1, 1, "", "transform"]], "julearn.transformers.target": [[54, 0, 1, "", "JuTargetTransformer"], [55, 0, 1, "", "JuTransformedTargetModel"], [56, 0, 1, "", "TargetConfoundRemover"], [57, 0, 1, "", "TransformedTargetWarning"], [58, 5, 1, "", "get_target_transformer"], [59, 5, 1, "", "list_target_transformers"], [60, 5, 1, "", "register_target_transformer"], [61, 5, 1, "", "reset_target_transformer_register"]], "julearn.transformers.target.JuTargetTransformer": [[54, 1, 1, "", "__init__"], [54, 1, 1, "", "fit"], [54, 1, 1, "", "fit_transform"], [54, 1, 1, "", "transform"]], "julearn.transformers.target.JuTransformedTargetModel": [[55, 1, 1, "", "__init__"], [55, 1, 1, "", "can_inverse_transform"], [55, 2, 1, "", "classes_"], [55, 1, 1, "", "decision_function"], [55, 1, 1, "", "filter_columns"], [55, 1, 1, "", "fit"], [55, 1, 1, "", "get_apply_to"], [55, 1, 1, "", "get_metadata_routing"], [55, 1, 1, "", "get_needed_types"], [55, 1, 1, "", "get_params"], [55, 1, 1, "", "predict"], [55, 1, 1, "", "predict_proba"], [55, 1, 1, "", "score"], [55, 1, 1, "", "set_params"], [55, 1, 1, "", "transform_target"]], "julearn.transformers.target.TargetConfoundRemover": [[56, 1, 1, "", "__init__"], [56, 1, 1, "", "fit"], [56, 1, 1, "", "fit_transform"], [56, 2, 1, "", "needed_types"], [56, 1, 1, "", "transform"]], "julearn.transformers.target.TransformedTargetWarning": [[57, 1, 1, "", "__init__"], [57, 4, 1, "", "args"], [57, 1, 1, "", "with_traceback"]], "julearn.utils": [[62, 5, 1, "", "configure_logging"], [63, 4, 1, "", "logger"], [64, 5, 1, "", "raise_error"], [82, 3, 0, "-", "typing"], [70, 5, 1, "", "warn_with_log"]], "julearn.utils.typing": [[65, 4, 1, "", "EstimatorLike"], [66, 0, 1, "", "EstimatorLikeFit1"], [67, 0, 1, "", "EstimatorLikeFit2"], [68, 0, 1, "", "EstimatorLikeFity"], [69, 0, 1, "", "JuEstimatorLike"]], "julearn.utils.typing.EstimatorLikeFit1": [[66, 1, 1, "", "__init__"], [66, 1, 1, "", "fit"], [66, 1, 1, "", "get_params"], [66, 1, 1, "", "set_params"]], "julearn.utils.typing.EstimatorLikeFit2": [[67, 1, 1, "", "__init__"], [67, 1, 1, "", "fit"], [67, 1, 1, "", "get_params"], [67, 1, 1, "", "set_params"]], "julearn.utils.typing.EstimatorLikeFity": [[68, 1, 1, "", "__init__"], [68, 1, 1, "", "fit"], [68, 1, 1, "", "get_params"], [68, 1, 1, "", "set_params"]], "julearn.utils.typing.JuEstimatorLike": [[69, 1, 1, "", "__init__"], [69, 1, 1, "", "fit"], [69, 1, 1, "", "get_apply_to"], [69, 1, 1, "", "get_needed_types"], [69, 1, 1, "", "get_params"], [69, 1, 1, "", "set_params"]], "julearn.viz": [[71, 5, 1, "", "plot_scores"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:module", "4": "py:attribute", "5": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "module", "Python module"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "titleterms": {"base": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 124], "class": [0, 73, 75, 76, 77, 81, 82], "function": [0, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 114], "julearn": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 84, 117, 122, 124, 125, 138], "pipelinecr": [1, 137], "exampl": [1, 2, 13, 14, 16, 19, 33, 37, 40, 42, 62, 71, 118, 119], "us": [1, 2, 13, 14, 16, 19, 33, 37, 40, 42, 62, 71, 106, 111, 120, 125, 137], "targetpipelinecr": 2, "columntyp": 3, "columntypeslik": 4, "jubaseestim": 5, "jutransform": 6, "wrapmodel": 7, "change_column_typ": 8, "ensure_column_typ": 9, "get_column_typ": 10, "make_type_selector": 11, "inspect": [12, 13, 14, 73, 95, 96, 97, 99, 129], "foldsinspector": 12, "inspector": 13, "preprocess": [14, 98, 131, 137], "model_select": [15, 16, 17, 18, 19, 20, 21, 22, 23], "continuousstratifiedgroupkfold": 15, "continuousstratifiedkfold": 16, "repeatedcontinuousstratifiedgroupkfold": 17, "repeatedcontinuousstratifiedkfold": 18, "stratifiedbootstrap": 19, "get_search": 20, "list_search": 21, "register_search": 22, "reset_searcher_regist": 23, "model": [24, 25, 26, 27, 28, 75, 76, 92, 93, 96, 97, 101, 110, 116, 124, 127, 129, 130, 135, 136, 137], "dynam": [24, 76, 116], "dynamicselect": 24, "get_model": 25, "list_model": 26, "register_model": 27, "reset_model_regist": 28, "pipelin": [29, 30, 77, 116, 137], "jutargetpipelin": 29, "pipeline_cr": 30, "step": [30, 116], "prepar": [31, 32, 78], "check_consist": 31, "prepare_input_data": 32, "run_cross_valid": [33, 132, 133, 136, 137], "run_fit": 34, "score": [35, 36, 37, 38, 39, 40, 41, 79, 102, 114, 135, 136], "check_scor": 35, "get_scor": 36, "list_scor": 37, "metric": [38, 39, 79, 136], "r2_corr": 38, "r_corr": 39, "register_scor": 40, "reset_scorer_regist": 41, "stat": [42, 80], "corrected_ttest": 42, "transform": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 81, 102, 116], "cbpm": [43, 124], "changecolumntyp": 44, "dropcolumn": 45, "filtercolumn": 46, "jucolumntransform": 47, "setcolumntyp": 48, "confound_remov": 49, "confoundremov": 49, "get_transform": 50, "list_transform": 51, "register_transform": 52, "reset_transformer_regist": 53, "target": [54, 55, 56, 57, 58, 59, 60, 61, 81, 102, 125, 131], "jutargettransform": 54, "jutransformedtargetmodel": 55, "targetconfoundremov": 56, "transformedtargetwarn": 57, "get_target_transform": 58, "list_target_transform": 59, "register_target_transform": 60, "reset_target_transformer_regist": 61, "util": [62, 63, 64, 65, 66, 67, 68, 69, 70, 82], "configure_log": 62, "logger": 63, "raise_error": 64, "type": [65, 66, 67, 68, 69, 82, 130, 133, 137], "estimatorlik": 65, "estimatorlikefit1": 66, "estimatorlikefit2": 67, "estimatorlikef": 68, "juestimatorlik": 69, "warn_with_log": 70, "viz": [71, 120], "plot_scor": 71, "api": [72, 74, 138], "refer": [72, 88, 89, 96, 104, 105, 106, 124, 125, 126, 132, 137], "main": 74, "select": [75, 76, 116, 128, 137], "deslib": 76, "visual": [83, 135], "start": [84, 121], "multiclass": 85, "classif": [85, 90, 107], "regress": [86, 87, 103, 114, 125], "analysi": [86, 87, 103], "stratifi": 87, "k": 87, "fold": [87, 99], "cv": [87, 89], "work": 88, "panda": 88, "merg": 88, "join": 88, "datafram": [88, 116], "group": [89, 126], "deal": [89, 96], "cross": [89, 96, 125, 126, 132, 136], "valid": [89, 96, 125, 126, 132, 136], "techniqu": [89, 96], "simpl": [90, 93], "binari": 90, "comput": [91, 94, 100, 108, 112, 115], "time": [91, 94, 100, 108, 112, 115], "comparison": [92, 93, 110, 135], "svm": 96, "random": 97, "forest": 97, "variabl": [97, 102], "import": 97, "varianc": 98, "threshold": 98, "zscore": 98, "pca": 98, "wise": 99, "predict": [99, 124], "complex": 101, "z": 102, "tune": [104, 105, 106, 127], "multipl": 104, "hyperparamet": [104, 105, 106, 127, 137], "grid": [104, 127], "bayesian": 106, "search": 106, "stack": [107, 130], "confound": [109, 110, 111, 125], "remov": [110, 111, 125], "return": [111, 136], "typic": 111, "case": 111, "custom": [113, 114, 116], "overview": 116, "avail": 116, "scaler": 116, "featur": [116, 125, 130, 133, 137, 138], "oper": 116, "decomposit": 116, "estim": [116, 130, 136], "support": 116, "vector": 116, "machin": 116, "ensembl": 116, "gaussian": 116, "process": 116, "linear": 116, "naiv": 116, "bay": 116, "dummi": 116, "configur": 117, "contribut": 118, "set": [118, 137], "up": 118, "local": 118, "develop": 118, "environ": 118, "github": 118, "pull": 118, "request": 118, "guidelin": 118, "run": 118, "unit": 118, "test": 118, "ad": 118, "build": [118, 137], "document": [118, 122, 138], "write": 118, "content": [119, 122, 128], "faq": 120, "i": [120, 122, 125], "have": 120, "issu": 120, "depend": [120, 121], "modul": 120, "how": 120, "do": 120, "interact": 120, "plot": 120, "get": 121, "requir": 121, "setup": 121, "suggest": 121, "instal": 121, "option": 121, "welcom": 122, "": [122, 138], "what": [122, 134, 138], "why": [122, 132], "tabl": [122, 128], "indic": 122, "maintain": 123, "version": 123, "releas": 123, "new": [123, 138], "connectom": 124, "consist": 125, "from": 125, "should": 125, "splitter": [126, 136], "stratif": 126, "paramet": 127, "v": 127, "searcher": 127, "specifi": 127, "distribut": 127, "more": 127, "than": 127, "one": 127, "deeper": 128, "topic": 128, "fit": 130, "each": 130, "all": 130, "specif": [130, 137], "appli": 131, "The": [132, 136], "fundament": 132, "essenc": 132, "data": 133, "input": 133, "give": 133, "you": 134, "realli": 134, "need": 134, "know": 134, "statist": 135, "evalu": 136, "output": 136, "made": 137, "easi": 137, "0": 138, "3": 138, "4": 138, "dev25": 138, "2024": 138, "09": 138, "26": 138, "bugfix": 138, "enhanc": 138, "05": 138, "16": 138, "improv": 138, "2": 138, "03": 138, "misc": 138, "1": 138, "01": 138, "23": 138, "2023": 138, "07": 138, "19": 138, "5": 138, "2022": 138, "21": 138, "chang": 138}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"Base": [[0, "module-julearn.base"]], "Classes": [[0, "classes"], [73, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [81, "classes"], [81, "id1"], [82, "classes"], [82, "id1"]], "Functions": [[0, "functions"], [73, "functions"], [74, "functions"], [75, "functions"], [76, "functions"], [78, "functions"], [79, "functions"], [79, "id1"], [80, "functions"], [81, "functions"], [81, "id2"], [82, "functions"], [83, "functions"]], "julearn.PipelineCreator": [[1, "julearn-pipelinecreator"]], "Examples using julearn.PipelineCreator": [[1, "examples-using-julearn-pipelinecreator"]], "julearn.TargetPipelineCreator": [[2, "julearn-targetpipelinecreator"]], "Examples using julearn.TargetPipelineCreator": [[2, "examples-using-julearn-targetpipelinecreator"]], "julearn.base.ColumnTypes": [[3, "julearn-base-columntypes"]], "julearn.base.ColumnTypesLike": [[4, "julearn-base-columntypeslike"]], "julearn.base.JuBaseEstimator": [[5, "julearn-base-jubaseestimator"]], "julearn.base.JuTransformer": [[6, "julearn-base-jutransformer"]], "julearn.base.WrapModel": [[7, "julearn-base-wrapmodel"]], "julearn.base.change_column_type": [[8, "julearn-base-change-column-type"]], "julearn.base.ensure_column_types": [[9, "julearn-base-ensure-column-types"]], "julearn.base.get_column_type": [[10, "julearn-base-get-column-type"]], "julearn.base.make_type_selector": [[11, "julearn-base-make-type-selector"]], "julearn.inspect.FoldsInspector": [[12, "julearn-inspect-foldsinspector"]], "julearn.inspect.Inspector": [[13, "julearn-inspect-inspector"]], "Examples using julearn.inspect.Inspector": [[13, "examples-using-julearn-inspect-inspector"]], "julearn.inspect.preprocess": [[14, "julearn-inspect-preprocess"]], "Examples using julearn.inspect.preprocess": [[14, "examples-using-julearn-inspect-preprocess"]], "julearn.model_selection.ContinuousStratifiedGroupKFold": [[15, "julearn-model-selection-continuousstratifiedgroupkfold"]], "julearn.model_selection.ContinuousStratifiedKFold": [[16, "julearn-model-selection-continuousstratifiedkfold"]], "Examples using julearn.model_selection.ContinuousStratifiedKFold": [[16, "examples-using-julearn-model-selection-continuousstratifiedkfold"]], "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold": [[17, "julearn-model-selection-repeatedcontinuousstratifiedgroupkfold"]], "julearn.model_selection.RepeatedContinuousStratifiedKFold": [[18, "julearn-model-selection-repeatedcontinuousstratifiedkfold"]], "julearn.model_selection.StratifiedBootstrap": [[19, "julearn-model-selection-stratifiedbootstrap"]], "Examples using julearn.model_selection.StratifiedBootstrap": [[19, "examples-using-julearn-model-selection-stratifiedbootstrap"]], "julearn.model_selection.get_searcher": [[20, "julearn-model-selection-get-searcher"]], "julearn.model_selection.list_searchers": [[21, "julearn-model-selection-list-searchers"]], "julearn.model_selection.register_searcher": [[22, "julearn-model-selection-register-searcher"]], "julearn.model_selection.reset_searcher_register": [[23, "julearn-model-selection-reset-searcher-register"]], "julearn.models.dynamic.DynamicSelection": [[24, "julearn-models-dynamic-dynamicselection"]], "julearn.models.get_model": [[25, "julearn-models-get-model"]], "julearn.models.list_models": [[26, "julearn-models-list-models"]], "julearn.models.register_model": [[27, "julearn-models-register-model"]], "julearn.models.reset_model_register": [[28, "julearn-models-reset-model-register"]], "julearn.pipeline.JuTargetPipeline": [[29, "julearn-pipeline-jutargetpipeline"]], "julearn.pipeline.pipeline_creator.Step": [[30, "julearn-pipeline-pipeline-creator-step"]], "julearn.prepare.check_consistency": [[31, "julearn-prepare-check-consistency"]], "julearn.prepare.prepare_input_data": [[32, "julearn-prepare-prepare-input-data"]], "julearn.run_cross_validation": [[33, "julearn-run-cross-validation"]], "Examples using julearn.run_cross_validation": [[33, "examples-using-julearn-run-cross-validation"]], "julearn.run_fit": [[34, "julearn-run-fit"]], "julearn.scoring.check_scoring": [[35, "julearn-scoring-check-scoring"]], "julearn.scoring.get_scorer": [[36, "julearn-scoring-get-scorer"]], "julearn.scoring.list_scorers": [[37, "julearn-scoring-list-scorers"]], "Examples using julearn.scoring.list_scorers": [[37, "examples-using-julearn-scoring-list-scorers"]], "julearn.scoring.metrics.r2_corr": [[38, "julearn-scoring-metrics-r2-corr"]], "julearn.scoring.metrics.r_corr": [[39, "julearn-scoring-metrics-r-corr"]], "julearn.scoring.register_scorer": [[40, "julearn-scoring-register-scorer"]], "Examples using julearn.scoring.register_scorer": [[40, "examples-using-julearn-scoring-register-scorer"]], "julearn.scoring.reset_scorer_register": [[41, "julearn-scoring-reset-scorer-register"]], "julearn.stats.corrected_ttest": [[42, "julearn-stats-corrected-ttest"]], "Examples using julearn.stats.corrected_ttest": [[42, "examples-using-julearn-stats-corrected-ttest"]], "julearn.transformers.CBPM": [[43, "julearn-transformers-cbpm"]], "julearn.transformers.ChangeColumnTypes": [[44, "julearn-transformers-changecolumntypes"]], "julearn.transformers.DropColumns": [[45, "julearn-transformers-dropcolumns"]], "julearn.transformers.FilterColumns": [[46, "julearn-transformers-filtercolumns"]], "julearn.transformers.JuColumnTransformer": [[47, "julearn-transformers-jucolumntransformer"]], "julearn.transformers.SetColumnTypes": [[48, "julearn-transformers-setcolumntypes"]], "julearn.transformers.confound_remover.ConfoundRemover": [[49, "julearn-transformers-confound-remover-confoundremover"]], "julearn.transformers.get_transformer": [[50, "julearn-transformers-get-transformer"]], "julearn.transformers.list_transformers": [[51, "julearn-transformers-list-transformers"]], "julearn.transformers.register_transformer": [[52, "julearn-transformers-register-transformer"]], "julearn.transformers.reset_transformer_register": [[53, "julearn-transformers-reset-transformer-register"]], "julearn.transformers.target.JuTargetTransformer": [[54, "julearn-transformers-target-jutargettransformer"]], "julearn.transformers.target.JuTransformedTargetModel": [[55, "julearn-transformers-target-jutransformedtargetmodel"]], "julearn.transformers.target.TargetConfoundRemover": [[56, "julearn-transformers-target-targetconfoundremover"]], "julearn.transformers.target.TransformedTargetWarning": [[57, "julearn-transformers-target-transformedtargetwarning"]], "julearn.transformers.target.get_target_transformer": [[58, "julearn-transformers-target-get-target-transformer"]], "julearn.transformers.target.list_target_transformers": [[59, "julearn-transformers-target-list-target-transformers"]], "julearn.transformers.target.register_target_transformer": [[60, "julearn-transformers-target-register-target-transformer"]], "julearn.transformers.target.reset_target_transformer_register": [[61, "julearn-transformers-target-reset-target-transformer-register"]], "julearn.utils.configure_logging": [[62, "julearn-utils-configure-logging"]], "Examples using julearn.utils.configure_logging": [[62, "examples-using-julearn-utils-configure-logging"]], "julearn.utils.logger": [[63, "julearn-utils-logger"]], "julearn.utils.raise_error": [[64, "julearn-utils-raise-error"]], "julearn.utils.typing.EstimatorLike": [[65, "julearn-utils-typing-estimatorlike"]], "julearn.utils.typing.EstimatorLikeFit1": [[66, "julearn-utils-typing-estimatorlikefit1"]], "julearn.utils.typing.EstimatorLikeFit2": [[67, "julearn-utils-typing-estimatorlikefit2"]], "julearn.utils.typing.EstimatorLikeFity": [[68, "julearn-utils-typing-estimatorlikefity"]], "julearn.utils.typing.JuEstimatorLike": [[69, "julearn-utils-typing-juestimatorlike"]], "julearn.utils.warn_with_log": [[70, "julearn-utils-warn-with-log"]], "julearn.viz.plot_scores": [[71, "julearn-viz-plot-scores"]], "Examples using julearn.viz.plot_scores": [[71, "examples-using-julearn-viz-plot-scores"]], "API Reference": [[72, "api-reference"]], "Inspect": [[73, "module-julearn.inspect"]], "Main API": [[74, "module-julearn.api"]], "Model Selection": [[75, "module-julearn.model_selection"]], "Models": [[76, "module-julearn.models"]], "Dynamic Selection (DESLib)": [[76, "dynamic-selection-deslib"]], "Pipeline": [[77, "module-julearn.pipeline"]], "Prepare": [[78, "module-julearn.prepare"]], "Scoring": [[79, "module-julearn.scoring"]], "Scoring Metrics": [[79, "module-julearn.scoring.metrics"]], "Stats": [[80, "module-julearn.stats"]], "Transformers": [[81, "module-julearn.transformers"], [116, "transformers"]], "Target Transformers": [[81, "module-julearn.transformers.target"]], "Utils": [[82, "module-julearn.utils"]], "Typing": [[82, "module-julearn.utils.typing"]], "Visualization": [[83, "visualization"]], "Starting with julearn": [[84, "starting-with-julearn"]], "Multiclass Classification": [[85, "multiclass-classification"]], "Regression Analysis": [[86, "regression-analysis"], [103, "regression-analysis"]], "Stratified K-fold CV for regression analysis": [[87, "stratified-k-fold-cv-for-regression-analysis"]], "Working with pandas": [[88, "working-with-pandas"]], "References": [[88, "references"], [89, "references"], [96, "references"], [104, "references"], [105, "references"], [106, "references"]], "Merging or joining DataFrame": [[88, "merging-or-joining-dataframe"]], "Grouped CV": [[89, "grouped-cv"]], "Dealing with Cross-Validation techniques": [[89, "dealing-with-cross-validation-techniques"], [96, "dealing-with-cross-validation-techniques"]], "Simple Binary Classification": [[90, "simple-binary-classification"]], "Computation times": [[91, "computation-times"], [94, "computation-times"], [100, "computation-times"], [108, "computation-times"], [112, "computation-times"], [115, "computation-times"]], "Model Comparison": [[92, "model-comparison"], [135, "model-comparison"]], "Simple Model Comparison": [[93, "simple-model-comparison"]], "Inspection": [[95, "inspection"]], "Inspecting SVM models": [[96, "inspecting-svm-models"]], "Inspecting Random Forest models": [[97, "inspecting-random-forest-models"]], "Random Forest variable importance": [[97, "random-forest-variable-importance"]], "Preprocessing with variance threshold, zscore and PCA": [[98, "preprocessing-with-variance-threshold-zscore-and-pca"]], "Inspecting the fold-wise predictions": [[99, "inspecting-the-fold-wise-predictions"]], "Complex Models": [[101, "complex-models"]], "Transforming target variable with z-score": [[102, "transforming-target-variable-with-z-score"]], "Tuning Multiple Hyperparameters Grids": [[104, "tuning-multiple-hyperparameters-grids"]], "Tuning Hyperparameters": [[105, "tuning-hyperparameters"]], "Tuning Hyperparameters using Bayesian Search": [[106, "tuning-hyperparameters-using-bayesian-search"]], "Stacking Classification": [[107, "stacking-classification"]], "Confounds": [[109, "confounds"]], "Confound Removal (model comparison)": [[110, "confound-removal-model-comparison"]], "Return Confounds in Confound Removal": [[111, "return-confounds-in-confound-removal"]], "Confound Removal Typical Use Case": [[111, "confound-removal-typical-use-case"]], "Customization": [[113, "customization"]], "Custom Scoring Function for Regression": [[114, "custom-scoring-function-for-regression"]], "Overview of available Pipeline Steps": [[116, "overview-of-available-pipeline-steps"]], "Scalers": [[116, "scalers"]], "Feature Selection": [[116, "feature-selection"]], "DataFrame operations": [[116, "dataframe-operations"]], "Decomposition": [[116, "decomposition"]], "Custom": [[116, "custom"]], "Models (Estimators)": [[116, "models-estimators"]], "Support Vector Machines": [[116, "support-vector-machines"]], "Ensemble": [[116, "ensemble"]], "Gaussian Processes": [[116, "gaussian-processes"]], "Linear Models": [[116, "linear-models"]], "Naive Bayes": [[116, "naive-bayes"]], "Dynamic Selection": [[116, "dynamic-selection"]], "Dummy": [[116, "dummy"]], "Configuring julearn": [[117, "configuring-julearn"]], "Contributing": [[118, "contributing"]], "Setting up the local development environment": [[118, "setting-up-the-local-development-environment"]], "GitHub Pull Request guidelines": [[118, "github-pull-request-guidelines"]], "Running unit tests": [[118, "running-unit-tests"]], "Adding and building documentation": [[118, "adding-and-building-documentation"]], "Writing Examples": [[118, "writing-examples"]], "Examples": [[119, "examples"]], "Contents:": [[119, null]], "FAQs": [[120, "faqs"]], "I have issues with the dependencies for the viz module.": [[120, "i-have-issues-with-the-dependencies-for-the-viz-module"]], "How do I use the viz interactive plots?": [[120, "how-do-i-use-the-viz-interactive-plots"]], "Getting started": [[121, "getting-started"]], "Requirements": [[121, "requirements"]], "Setup suggestion": [[121, "setup-suggestion"]], "Installing": [[121, "installing"]], "Optional Dependencies": [[121, "optional-dependencies"]], "Welcome to julearn\u2019s documentation!": [[122, "welcome-to-julearn-s-documentation"]], "What is julearn?": [[122, "what-is-julearn"]], "Why julearn?": [[122, "why-julearn"]], "Table of Contents": [[122, "table-of-contents"], [128, null]], "Indices and tables": [[122, "indices-and-tables"], [122, "id1"]], "Maintaining": [[123, "maintaining"]], "Versioning": [[123, "versioning"]], "Releasing a new version": [[123, "releasing-a-new-version"]], "Connectome-based Predictive Modeling (CBPM)": [[124, "connectome-based-predictive-modeling-cbpm"]], "CBPM in julearn": [[124, "cbpm-in-julearn"]], "References:": [[124, null], [125, null], [126, null], [132, null], [137, null]], "Cross-validation consistent Confound Removal": [[125, "cross-validation-consistent-confound-removal"]], "Confound Removal in julearn": [[125, "confound-removal-in-julearn"]], "Removing Confounds from the Features": [[125, "removing-confounds-from-the-features"]], "Removing Confounds from the Target": [[125, "removing-confounds-from-the-target"]], "Should I use Confound Regression?": [[125, "should-i-use-confound-regression"]], "Cross-validation splitters": [[126, "cross-validation-splitters"], [136, "cross-validation-splitters"]], "Stratification": [[126, "stratification"]], "Grouping": [[126, "grouping"]], "Hyperparameter Tuning": [[127, "hyperparameter-tuning"], [127, "id1"]], "Parameters vs Hyperparameters": [[127, "parameters-vs-hyperparameters"]], "Searchers": [[127, "searchers"]], "Specifying distributions": [[127, "specifying-distributions"]], "Tuning more than one grid": [[127, "tuning-more-than-one-grid"]], "Models as hyperparameters": [[127, "models-as-hyperparameters"]], "Selected deeper topics": [[128, "selected-deeper-topics"]], "Inspecting Models": [[129, "inspecting-models"]], "Stacking Models": [[130, "stacking-models"]], "Fitting each estimator on all of the features": [[130, "fitting-each-estimator-on-all-of-the-features"]], "Fitting each estimator on a specific feature type": [[130, "fitting-each-estimator-on-a-specific-feature-type"]], "Applying preprocessing to the target": [[131, "applying-preprocessing-to-the-target"]], "Why cross validation?": [[132, "why-cross-validation"]], "Cross-validation - The fundamentals": [[132, "cross-validation-the-fundamentals"]], "The essence of run_cross_validation()": [[132, "the-essence-of-run-cross-validation"]], "Data": [[133, "data"]], "Data input to run_cross_validation()": [[133, "data-input-to-run-cross-validation"]], "Giving types to features": [[133, "giving-types-to-features"]], "What you really need to know": [[134, "what-you-really-need-to-know"]], "Statistical comparisons": [[135, "statistical-comparisons"]], "Score visualizations": [[135, "score-visualizations"]], "Model Evaluation": [[136, "model-evaluation"]], "The output of run_cross_validation()": [[136, "the-output-of-run-cross-validation"]], "Cross-validation scores": [[136, "cross-validation-scores"]], "Returning a model (estimator)": [[136, "returning-a-model-estimator"]], "Scoring metrics": [[136, "scoring-metrics"]], "Model Building": [[137, "model-building"]], "Pipeline specification in run_cross_validation()": [[137, "pipeline-specification-in-run-cross-validation"]], "Feature preprocessing": [[137, "feature-preprocessing"]], "Pipeline specification made easy with the PipelineCreator": [[137, "pipeline-specification-made-easy-with-the-pipelinecreator"]], "Setting hyperparameters": [[137, "setting-hyperparameters"]], "Selective preprocessing using feature types": [[137, "selective-preprocessing-using-feature-types"]], "What\u2019s new": [[138, "what-s-new"]], "Julearn 0.3.4.dev25 (2024-09-26)": [[138, "julearn-0-3-4-dev25-2024-09-26"]], "Bugfixes": [[138, "bugfixes"], [138, "id1"], [138, "id2"], [138, "id5"], [138, "id10"]], "Enhancements": [[138, "enhancements"], [138, "id4"], [138, "id7"], [138, "id12"]], "Julearn 0.3.3 (2024-05-16)": [[138, "julearn-0-3-3-2024-05-16"]], "Improved Documentation": [[138, "improved-documentation"], [138, "id3"], [138, "id6"], [138, "id11"]], "Julearn 0.3.2 (2024-05-03)": [[138, "julearn-0-3-2-2024-05-03"]], "Features": [[138, "features"], [138, "id8"], [138, "id13"]], "Misc": [[138, "misc"], [138, "id9"]], "Julearn 0.3.1 (2024-01-23)": [[138, "julearn-0-3-1-2024-01-23"]], "Julearn 0.3.0 (2023-07-19)": [[138, "julearn-0-3-0-2023-07-19"]], "Julearn 0.2.5 (2022-07-21)": [[138, "julearn-0-2-5-2022-07-21"]], "API Changes": [[138, "api-changes"]]}, "indexentries": {"julearn.base": [[0, "module-julearn.base"]], "module": [[0, "module-julearn.base"], [73, "module-julearn.inspect"], [74, "module-julearn.api"], [75, "module-julearn.model_selection"], [76, "module-julearn.models"], [76, "module-julearn.models.dynamic"], [77, "module-julearn.pipeline"], [78, "module-julearn.prepare"], [79, "module-julearn.scoring"], [79, "module-julearn.scoring.metrics"], [80, "module-julearn.stats"], [81, "module-julearn.transformers"], [81, "module-julearn.transformers.target"], [82, "module-julearn.utils"], [82, "module-julearn.utils.typing"], [83, "module-julearn.viz"]], "pipelinecreator (class in julearn)": [[1, "julearn.PipelineCreator"]], "__init__() (julearn.pipelinecreator method)": [[1, "julearn.PipelineCreator.__init__"]], "add() (julearn.pipelinecreator method)": [[1, "julearn.PipelineCreator.add"]], "copy() (julearn.pipelinecreator method)": [[1, "julearn.PipelineCreator.copy"]], "from_list() (julearn.pipelinecreator class method)": [[1, "julearn.PipelineCreator.from_list"]], "has_model() (julearn.pipelinecreator method)": [[1, "julearn.PipelineCreator.has_model"]], "split() (julearn.pipelinecreator method)": [[1, "julearn.PipelineCreator.split"]], "steps (julearn.pipelinecreator property)": [[1, "julearn.PipelineCreator.steps"]], "to_pipeline() (julearn.pipelinecreator method)": [[1, "julearn.PipelineCreator.to_pipeline"]], "targetpipelinecreator (class in julearn)": [[2, "julearn.TargetPipelineCreator"]], "__init__() (julearn.targetpipelinecreator method)": [[2, "julearn.TargetPipelineCreator.__init__"]], "add() (julearn.targetpipelinecreator method)": [[2, "julearn.TargetPipelineCreator.add"]], "to_pipeline() (julearn.targetpipelinecreator method)": [[2, "julearn.TargetPipelineCreator.to_pipeline"]], "columntypes (class in julearn.base)": [[3, "julearn.base.ColumnTypes"]], "__init__() (julearn.base.columntypes method)": [[3, "julearn.base.ColumnTypes.__init__"]], "add() (julearn.base.columntypes method)": [[3, "julearn.base.ColumnTypes.add"]], "copy() (julearn.base.columntypes method)": [[3, "julearn.base.ColumnTypes.copy"]], "pattern (julearn.base.columntypes property)": [[3, "julearn.base.ColumnTypes.pattern"]], "to_type_selector() (julearn.base.columntypes method)": [[3, "julearn.base.ColumnTypes.to_type_selector"]], "columntypeslike (in module julearn.base)": [[4, "julearn.base.ColumnTypesLike"]], "jubaseestimator (class in julearn.base)": [[5, "julearn.base.JuBaseEstimator"]], "__init__() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.__init__"]], "filter_columns() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.filter_columns"]], "get_apply_to() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.get_apply_to"]], "get_metadata_routing() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.get_metadata_routing"]], "get_needed_types() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.get_needed_types"]], "get_params() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.get_params"]], "set_params() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.set_params"]], "jutransformer (class in julearn.base)": [[6, "julearn.base.JuTransformer"]], "__init__() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.__init__"]], "filter_columns() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.filter_columns"]], "fit() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.fit"]], "fit_transform() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.fit_transform"]], "get_apply_to() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.get_apply_to"]], "get_metadata_routing() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.get_metadata_routing"]], "get_needed_types() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.get_needed_types"]], "get_params() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.get_params"]], "set_output() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.set_output"]], "set_params() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.set_params"]], "wrapmodel (class in julearn.base)": [[7, "julearn.base.WrapModel"]], "__init__() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.__init__"]], "classes_ (julearn.base.wrapmodel property)": [[7, "julearn.base.WrapModel.classes_"]], "decision_function() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.decision_function"]], "filter_columns() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.filter_columns"]], "fit() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.fit"]], "get_apply_to() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.get_apply_to"]], "get_metadata_routing() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.get_metadata_routing"]], "get_needed_types() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.get_needed_types"]], "get_params() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.get_params"]], "predict() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.predict"]], "predict_log_proba() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.predict_log_proba"]], "predict_proba() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.predict_proba"]], "score() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.score"]], "set_params() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.set_params"]], "change_column_type() (in module julearn.base)": [[8, "julearn.base.change_column_type"]], "ensure_column_types() (in module julearn.base)": [[9, "julearn.base.ensure_column_types"]], "get_column_type() (in module julearn.base)": [[10, "julearn.base.get_column_type"]], "make_type_selector() (in module julearn.base)": [[11, "julearn.base.make_type_selector"]], "foldsinspector (class in julearn.inspect)": [[12, "julearn.inspect.FoldsInspector"]], "__init__() (julearn.inspect.foldsinspector method)": [[12, "julearn.inspect.FoldsInspector.__init__"]], "decision_function() (julearn.inspect.foldsinspector method)": [[12, "julearn.inspect.FoldsInspector.decision_function"]], "predict() (julearn.inspect.foldsinspector method)": [[12, "julearn.inspect.FoldsInspector.predict"]], "predict_log_proba() (julearn.inspect.foldsinspector method)": [[12, "julearn.inspect.FoldsInspector.predict_log_proba"]], "predict_proba() (julearn.inspect.foldsinspector method)": [[12, "julearn.inspect.FoldsInspector.predict_proba"]], "inspector (class in julearn.inspect)": [[13, "julearn.inspect.Inspector"]], "__init__() (julearn.inspect.inspector method)": [[13, "julearn.inspect.Inspector.__init__"]], "folds (julearn.inspect.inspector property)": [[13, "julearn.inspect.Inspector.folds"]], "model (julearn.inspect.inspector property)": [[13, "julearn.inspect.Inspector.model"]], "preprocess() (in module julearn.inspect)": [[14, "julearn.inspect.preprocess"]], "continuousstratifiedgroupkfold (class in julearn.model_selection)": [[15, "julearn.model_selection.ContinuousStratifiedGroupKFold"]], "__init__() (julearn.model_selection.continuousstratifiedgroupkfold method)": [[15, "julearn.model_selection.ContinuousStratifiedGroupKFold.__init__"]], "get_metadata_routing() (julearn.model_selection.continuousstratifiedgroupkfold method)": [[15, "julearn.model_selection.ContinuousStratifiedGroupKFold.get_metadata_routing"]], "get_n_splits() (julearn.model_selection.continuousstratifiedgroupkfold method)": [[15, "julearn.model_selection.ContinuousStratifiedGroupKFold.get_n_splits"]], "set_split_request() (julearn.model_selection.continuousstratifiedgroupkfold method)": [[15, "julearn.model_selection.ContinuousStratifiedGroupKFold.set_split_request"]], "split() (julearn.model_selection.continuousstratifiedgroupkfold method)": [[15, "julearn.model_selection.ContinuousStratifiedGroupKFold.split"]], "continuousstratifiedkfold (class in julearn.model_selection)": [[16, "julearn.model_selection.ContinuousStratifiedKFold"]], "__init__() (julearn.model_selection.continuousstratifiedkfold method)": [[16, "julearn.model_selection.ContinuousStratifiedKFold.__init__"]], "get_metadata_routing() (julearn.model_selection.continuousstratifiedkfold method)": [[16, "julearn.model_selection.ContinuousStratifiedKFold.get_metadata_routing"]], "get_n_splits() (julearn.model_selection.continuousstratifiedkfold method)": [[16, "julearn.model_selection.ContinuousStratifiedKFold.get_n_splits"]], "split() (julearn.model_selection.continuousstratifiedkfold method)": [[16, "julearn.model_selection.ContinuousStratifiedKFold.split"]], "repeatedcontinuousstratifiedgroupkfold (class in julearn.model_selection)": [[17, "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold"]], "__init__() (julearn.model_selection.repeatedcontinuousstratifiedgroupkfold method)": [[17, "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold.__init__"]], "get_metadata_routing() (julearn.model_selection.repeatedcontinuousstratifiedgroupkfold method)": [[17, "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold.get_metadata_routing"]], "get_n_splits() (julearn.model_selection.repeatedcontinuousstratifiedgroupkfold method)": [[17, "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold.get_n_splits"]], "split() (julearn.model_selection.repeatedcontinuousstratifiedgroupkfold method)": [[17, "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold.split"]], "repeatedcontinuousstratifiedkfold (class in julearn.model_selection)": [[18, "julearn.model_selection.RepeatedContinuousStratifiedKFold"]], "__init__() (julearn.model_selection.repeatedcontinuousstratifiedkfold method)": [[18, "julearn.model_selection.RepeatedContinuousStratifiedKFold.__init__"]], "get_metadata_routing() (julearn.model_selection.repeatedcontinuousstratifiedkfold method)": [[18, "julearn.model_selection.RepeatedContinuousStratifiedKFold.get_metadata_routing"]], "get_n_splits() (julearn.model_selection.repeatedcontinuousstratifiedkfold method)": [[18, "julearn.model_selection.RepeatedContinuousStratifiedKFold.get_n_splits"]], "split() (julearn.model_selection.repeatedcontinuousstratifiedkfold method)": [[18, "julearn.model_selection.RepeatedContinuousStratifiedKFold.split"]], "stratifiedbootstrap (class in julearn.model_selection)": [[19, "julearn.model_selection.StratifiedBootstrap"]], "__init__() (julearn.model_selection.stratifiedbootstrap method)": [[19, "julearn.model_selection.StratifiedBootstrap.__init__"]], "get_metadata_routing() (julearn.model_selection.stratifiedbootstrap method)": [[19, "julearn.model_selection.StratifiedBootstrap.get_metadata_routing"]], "get_n_splits() (julearn.model_selection.stratifiedbootstrap method)": [[19, "julearn.model_selection.StratifiedBootstrap.get_n_splits"]], "split() (julearn.model_selection.stratifiedbootstrap method)": [[19, "julearn.model_selection.StratifiedBootstrap.split"]], "get_searcher() (in module julearn.model_selection)": [[20, "julearn.model_selection.get_searcher"]], "list_searchers() (in module julearn.model_selection)": [[21, "julearn.model_selection.list_searchers"]], "register_searcher() (in module julearn.model_selection)": [[22, "julearn.model_selection.register_searcher"]], "reset_searcher_register() (in module julearn.model_selection)": [[23, "julearn.model_selection.reset_searcher_register"]], "dynamicselection (class in julearn.models.dynamic)": [[24, "julearn.models.dynamic.DynamicSelection"]], "__init__() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.__init__"]], "fit() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.fit"]], "get_metadata_routing() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.get_metadata_routing"]], "get_params() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.get_params"]], "predict() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.predict"]], "predict_proba() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.predict_proba"]], "score() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.score"]], "set_params() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.set_params"]], "set_score_request() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.set_score_request"]], "get_model() (in module julearn.models)": [[25, "julearn.models.get_model"]], "list_models() (in module julearn.models)": [[26, "julearn.models.list_models"]], "register_model() (in module julearn.models)": [[27, "julearn.models.register_model"]], "reset_model_register() (in module julearn.models)": [[28, "julearn.models.reset_model_register"]], "jutargetpipeline (class in julearn.pipeline)": [[29, "julearn.pipeline.JuTargetPipeline"]], "__init__() (julearn.pipeline.jutargetpipeline method)": [[29, "julearn.pipeline.JuTargetPipeline.__init__"]], "can_inverse_transform() (julearn.pipeline.jutargetpipeline method)": [[29, "julearn.pipeline.JuTargetPipeline.can_inverse_transform"]], "fit() (julearn.pipeline.jutargetpipeline method)": [[29, "julearn.pipeline.JuTargetPipeline.fit"]], "fit_transform() (julearn.pipeline.jutargetpipeline method)": [[29, "julearn.pipeline.JuTargetPipeline.fit_transform"]], "inverse_transform() (julearn.pipeline.jutargetpipeline method)": [[29, "julearn.pipeline.JuTargetPipeline.inverse_transform"]], "needed_types (julearn.pipeline.jutargetpipeline property)": [[29, "julearn.pipeline.JuTargetPipeline.needed_types"]], "transform() (julearn.pipeline.jutargetpipeline method)": [[29, "julearn.pipeline.JuTargetPipeline.transform"]], "step (class in julearn.pipeline.pipeline_creator)": [[30, "julearn.pipeline.pipeline_creator.Step"]], "__init__() (julearn.pipeline.pipeline_creator.step method)": [[30, "julearn.pipeline.pipeline_creator.Step.__init__"]], "apply_to (julearn.pipeline.pipeline_creator.step attribute)": [[30, "julearn.pipeline.pipeline_creator.Step.apply_to"]], "estimator (julearn.pipeline.pipeline_creator.step attribute)": [[30, "julearn.pipeline.pipeline_creator.Step.estimator"]], "name (julearn.pipeline.pipeline_creator.step attribute)": [[30, "julearn.pipeline.pipeline_creator.Step.name"]], "needed_types (julearn.pipeline.pipeline_creator.step attribute)": [[30, "julearn.pipeline.pipeline_creator.Step.needed_types"]], "params_to_tune (julearn.pipeline.pipeline_creator.step attribute)": [[30, "julearn.pipeline.pipeline_creator.Step.params_to_tune"]], "row_select_col_type (julearn.pipeline.pipeline_creator.step attribute)": [[30, "julearn.pipeline.pipeline_creator.Step.row_select_col_type"]], "row_select_vals (julearn.pipeline.pipeline_creator.step attribute)": [[30, "julearn.pipeline.pipeline_creator.Step.row_select_vals"]], "check_consistency() (in module julearn.prepare)": [[31, "julearn.prepare.check_consistency"]], "prepare_input_data() (in module julearn.prepare)": [[32, "julearn.prepare.prepare_input_data"]], "run_cross_validation() (in module julearn)": [[33, "julearn.run_cross_validation"]], "run_fit() (in module julearn)": [[34, "julearn.run_fit"]], "check_scoring() (in module julearn.scoring)": [[35, "julearn.scoring.check_scoring"]], "get_scorer() (in module julearn.scoring)": [[36, "julearn.scoring.get_scorer"]], "list_scorers() (in module julearn.scoring)": [[37, "julearn.scoring.list_scorers"]], "r2_corr() (in module julearn.scoring.metrics)": [[38, "julearn.scoring.metrics.r2_corr"]], "r_corr() (in module julearn.scoring.metrics)": [[39, "julearn.scoring.metrics.r_corr"]], "register_scorer() (in module julearn.scoring)": [[40, "julearn.scoring.register_scorer"]], "reset_scorer_register() (in module julearn.scoring)": [[41, "julearn.scoring.reset_scorer_register"]], "corrected_ttest() (in module julearn.stats)": [[42, "julearn.stats.corrected_ttest"]], "cbpm (class in julearn.transformers)": [[43, "julearn.transformers.CBPM"]], "__init__() (julearn.transformers.cbpm method)": [[43, "julearn.transformers.CBPM.__init__"]], "aggregate() (julearn.transformers.cbpm method)": [[43, "julearn.transformers.CBPM.aggregate"]], "fit() (julearn.transformers.cbpm method)": [[43, "julearn.transformers.CBPM.fit"]], "fit_transform() (julearn.transformers.cbpm method)": [[43, "julearn.transformers.CBPM.fit_transform"]], "get_feature_names_out() (julearn.transformers.cbpm method)": [[43, "julearn.transformers.CBPM.get_feature_names_out"]], "get_metadata_routing() (julearn.transformers.cbpm method)": [[43, "julearn.transformers.CBPM.get_metadata_routing"]], "get_params() (julearn.transformers.cbpm method)": [[43, "julearn.transformers.CBPM.get_params"]], "set_output() (julearn.transformers.cbpm method)": [[43, "julearn.transformers.CBPM.set_output"]], "set_params() (julearn.transformers.cbpm method)": [[43, "julearn.transformers.CBPM.set_params"]], "transform() (julearn.transformers.cbpm method)": [[43, "julearn.transformers.CBPM.transform"]], "changecolumntypes (class in julearn.transformers)": [[44, "julearn.transformers.ChangeColumnTypes"]], "__init__() (julearn.transformers.changecolumntypes method)": [[44, "julearn.transformers.ChangeColumnTypes.__init__"]], "filter_columns() (julearn.transformers.changecolumntypes method)": [[44, "julearn.transformers.ChangeColumnTypes.filter_columns"]], "fit() (julearn.transformers.changecolumntypes method)": [[44, "julearn.transformers.ChangeColumnTypes.fit"]], "fit_transform() (julearn.transformers.changecolumntypes method)": [[44, "julearn.transformers.ChangeColumnTypes.fit_transform"]], "get_apply_to() (julearn.transformers.changecolumntypes method)": [[44, "julearn.transformers.ChangeColumnTypes.get_apply_to"]], "get_feature_names_out() (julearn.transformers.changecolumntypes method)": [[44, "julearn.transformers.ChangeColumnTypes.get_feature_names_out"]], "get_metadata_routing() (julearn.transformers.changecolumntypes method)": [[44, "julearn.transformers.ChangeColumnTypes.get_metadata_routing"]], "get_needed_types() (julearn.transformers.changecolumntypes method)": [[44, "julearn.transformers.ChangeColumnTypes.get_needed_types"]], "get_params() (julearn.transformers.changecolumntypes method)": [[44, "julearn.transformers.ChangeColumnTypes.get_params"]], "set_output() (julearn.transformers.changecolumntypes method)": [[44, "julearn.transformers.ChangeColumnTypes.set_output"]], "set_params() (julearn.transformers.changecolumntypes method)": [[44, "julearn.transformers.ChangeColumnTypes.set_params"]], "transform() (julearn.transformers.changecolumntypes method)": [[44, "julearn.transformers.ChangeColumnTypes.transform"]], "dropcolumns (class in julearn.transformers)": [[45, "julearn.transformers.DropColumns"]], "__init__() (julearn.transformers.dropcolumns method)": [[45, "julearn.transformers.DropColumns.__init__"]], "filter_columns() (julearn.transformers.dropcolumns method)": [[45, "julearn.transformers.DropColumns.filter_columns"]], "fit() (julearn.transformers.dropcolumns method)": [[45, "julearn.transformers.DropColumns.fit"]], "fit_transform() (julearn.transformers.dropcolumns method)": [[45, "julearn.transformers.DropColumns.fit_transform"]], "get_apply_to() (julearn.transformers.dropcolumns method)": [[45, "julearn.transformers.DropColumns.get_apply_to"]], "get_metadata_routing() (julearn.transformers.dropcolumns method)": [[45, "julearn.transformers.DropColumns.get_metadata_routing"]], "get_needed_types() (julearn.transformers.dropcolumns method)": [[45, "julearn.transformers.DropColumns.get_needed_types"]], "get_params() (julearn.transformers.dropcolumns method)": [[45, "julearn.transformers.DropColumns.get_params"]], "get_support() (julearn.transformers.dropcolumns method)": [[45, "julearn.transformers.DropColumns.get_support"]], "set_output() (julearn.transformers.dropcolumns method)": [[45, "julearn.transformers.DropColumns.set_output"]], "set_params() (julearn.transformers.dropcolumns method)": [[45, "julearn.transformers.DropColumns.set_params"]], "transform() (julearn.transformers.dropcolumns method)": [[45, "julearn.transformers.DropColumns.transform"]], "filtercolumns (class in julearn.transformers)": [[46, "julearn.transformers.FilterColumns"]], "__init__() (julearn.transformers.filtercolumns method)": [[46, "julearn.transformers.FilterColumns.__init__"]], "filter_columns() (julearn.transformers.filtercolumns method)": [[46, "julearn.transformers.FilterColumns.filter_columns"]], "fit() (julearn.transformers.filtercolumns method)": [[46, "julearn.transformers.FilterColumns.fit"]], "fit_transform() (julearn.transformers.filtercolumns method)": [[46, "julearn.transformers.FilterColumns.fit_transform"]], "get_apply_to() (julearn.transformers.filtercolumns method)": [[46, "julearn.transformers.FilterColumns.get_apply_to"]], "get_feature_names_out() (julearn.transformers.filtercolumns method)": [[46, "julearn.transformers.FilterColumns.get_feature_names_out"]], "get_metadata_routing() (julearn.transformers.filtercolumns method)": [[46, "julearn.transformers.FilterColumns.get_metadata_routing"]], "get_needed_types() (julearn.transformers.filtercolumns method)": [[46, "julearn.transformers.FilterColumns.get_needed_types"]], "get_params() (julearn.transformers.filtercolumns method)": [[46, "julearn.transformers.FilterColumns.get_params"]], "set_output() (julearn.transformers.filtercolumns method)": [[46, "julearn.transformers.FilterColumns.set_output"]], "set_params() (julearn.transformers.filtercolumns method)": [[46, "julearn.transformers.FilterColumns.set_params"]], "transform() (julearn.transformers.filtercolumns method)": [[46, "julearn.transformers.FilterColumns.transform"]], "jucolumntransformer (class in julearn.transformers)": [[47, "julearn.transformers.JuColumnTransformer"]], "__init__() (julearn.transformers.jucolumntransformer method)": [[47, "julearn.transformers.JuColumnTransformer.__init__"]], "filter_columns() (julearn.transformers.jucolumntransformer method)": [[47, "julearn.transformers.JuColumnTransformer.filter_columns"]], "fit() (julearn.transformers.jucolumntransformer method)": [[47, "julearn.transformers.JuColumnTransformer.fit"]], "fit_transform() (julearn.transformers.jucolumntransformer method)": [[47, "julearn.transformers.JuColumnTransformer.fit_transform"]], "get_apply_to() (julearn.transformers.jucolumntransformer method)": [[47, "julearn.transformers.JuColumnTransformer.get_apply_to"]], "get_feature_names_out() (julearn.transformers.jucolumntransformer method)": [[47, "julearn.transformers.JuColumnTransformer.get_feature_names_out"]], "get_metadata_routing() (julearn.transformers.jucolumntransformer method)": [[47, "julearn.transformers.JuColumnTransformer.get_metadata_routing"]], "get_needed_types() (julearn.transformers.jucolumntransformer method)": [[47, "julearn.transformers.JuColumnTransformer.get_needed_types"]], "get_params() (julearn.transformers.jucolumntransformer method)": [[47, "julearn.transformers.JuColumnTransformer.get_params"]], "set_output() (julearn.transformers.jucolumntransformer method)": [[47, "julearn.transformers.JuColumnTransformer.set_output"]], "set_params() (julearn.transformers.jucolumntransformer method)": [[47, "julearn.transformers.JuColumnTransformer.set_params"]], "transform() (julearn.transformers.jucolumntransformer method)": [[47, "julearn.transformers.JuColumnTransformer.transform"]], "setcolumntypes (class in julearn.transformers)": [[48, "julearn.transformers.SetColumnTypes"]], "__init__() (julearn.transformers.setcolumntypes method)": [[48, "julearn.transformers.SetColumnTypes.__init__"]], "filter_columns() (julearn.transformers.setcolumntypes method)": [[48, "julearn.transformers.SetColumnTypes.filter_columns"]], "fit() (julearn.transformers.setcolumntypes method)": [[48, "julearn.transformers.SetColumnTypes.fit"]], "fit_transform() (julearn.transformers.setcolumntypes method)": [[48, "julearn.transformers.SetColumnTypes.fit_transform"]], "get_apply_to() (julearn.transformers.setcolumntypes method)": [[48, "julearn.transformers.SetColumnTypes.get_apply_to"]], "get_feature_names_out() (julearn.transformers.setcolumntypes method)": [[48, "julearn.transformers.SetColumnTypes.get_feature_names_out"]], "get_metadata_routing() (julearn.transformers.setcolumntypes method)": [[48, "julearn.transformers.SetColumnTypes.get_metadata_routing"]], "get_needed_types() (julearn.transformers.setcolumntypes method)": [[48, "julearn.transformers.SetColumnTypes.get_needed_types"]], "get_params() (julearn.transformers.setcolumntypes method)": [[48, "julearn.transformers.SetColumnTypes.get_params"]], "set_output() (julearn.transformers.setcolumntypes method)": [[48, "julearn.transformers.SetColumnTypes.set_output"]], "set_params() (julearn.transformers.setcolumntypes method)": [[48, "julearn.transformers.SetColumnTypes.set_params"]], "transform() (julearn.transformers.setcolumntypes method)": [[48, "julearn.transformers.SetColumnTypes.transform"]], "confoundremover (class in julearn.transformers.confound_remover)": [[49, "julearn.transformers.confound_remover.ConfoundRemover"]], "__init__() (julearn.transformers.confound_remover.confoundremover method)": [[49, "julearn.transformers.confound_remover.ConfoundRemover.__init__"]], "filter_columns() (julearn.transformers.confound_remover.confoundremover method)": [[49, "julearn.transformers.confound_remover.ConfoundRemover.filter_columns"]], "fit() (julearn.transformers.confound_remover.confoundremover method)": [[49, "julearn.transformers.confound_remover.ConfoundRemover.fit"]], "fit_transform() (julearn.transformers.confound_remover.confoundremover method)": [[49, "julearn.transformers.confound_remover.ConfoundRemover.fit_transform"]], "get_apply_to() (julearn.transformers.confound_remover.confoundremover method)": [[49, "julearn.transformers.confound_remover.ConfoundRemover.get_apply_to"]], "get_feature_names_out() (julearn.transformers.confound_remover.confoundremover method)": [[49, "julearn.transformers.confound_remover.ConfoundRemover.get_feature_names_out"]], "get_metadata_routing() (julearn.transformers.confound_remover.confoundremover method)": [[49, "julearn.transformers.confound_remover.ConfoundRemover.get_metadata_routing"]], "get_needed_types() (julearn.transformers.confound_remover.confoundremover method)": [[49, "julearn.transformers.confound_remover.ConfoundRemover.get_needed_types"]], "get_params() (julearn.transformers.confound_remover.confoundremover method)": [[49, "julearn.transformers.confound_remover.ConfoundRemover.get_params"]], "get_support() (julearn.transformers.confound_remover.confoundremover method)": [[49, "julearn.transformers.confound_remover.ConfoundRemover.get_support"]], "set_output() (julearn.transformers.confound_remover.confoundremover method)": [[49, "julearn.transformers.confound_remover.ConfoundRemover.set_output"]], "set_params() (julearn.transformers.confound_remover.confoundremover method)": [[49, "julearn.transformers.confound_remover.ConfoundRemover.set_params"]], "transform() (julearn.transformers.confound_remover.confoundremover method)": [[49, "julearn.transformers.confound_remover.ConfoundRemover.transform"]], "get_transformer() (in module julearn.transformers)": [[50, "julearn.transformers.get_transformer"]], "list_transformers() (in module julearn.transformers)": [[51, "julearn.transformers.list_transformers"]], "register_transformer() (in module julearn.transformers)": [[52, "julearn.transformers.register_transformer"]], "reset_transformer_register() (in module julearn.transformers)": [[53, "julearn.transformers.reset_transformer_register"]], "jutargettransformer (class in julearn.transformers.target)": [[54, "julearn.transformers.target.JuTargetTransformer"]], "__init__() (julearn.transformers.target.jutargettransformer method)": [[54, "julearn.transformers.target.JuTargetTransformer.__init__"]], "fit() (julearn.transformers.target.jutargettransformer method)": [[54, "julearn.transformers.target.JuTargetTransformer.fit"]], "fit_transform() (julearn.transformers.target.jutargettransformer method)": [[54, "julearn.transformers.target.JuTargetTransformer.fit_transform"]], "transform() (julearn.transformers.target.jutargettransformer method)": [[54, "julearn.transformers.target.JuTargetTransformer.transform"]], "jutransformedtargetmodel (class in julearn.transformers.target)": [[55, "julearn.transformers.target.JuTransformedTargetModel"]], "__init__() (julearn.transformers.target.jutransformedtargetmodel method)": [[55, "julearn.transformers.target.JuTransformedTargetModel.__init__"]], "can_inverse_transform() (julearn.transformers.target.jutransformedtargetmodel method)": [[55, "julearn.transformers.target.JuTransformedTargetModel.can_inverse_transform"]], "classes_ (julearn.transformers.target.jutransformedtargetmodel property)": [[55, "julearn.transformers.target.JuTransformedTargetModel.classes_"]], "decision_function() (julearn.transformers.target.jutransformedtargetmodel method)": [[55, "julearn.transformers.target.JuTransformedTargetModel.decision_function"]], "filter_columns() (julearn.transformers.target.jutransformedtargetmodel method)": [[55, "julearn.transformers.target.JuTransformedTargetModel.filter_columns"]], "fit() (julearn.transformers.target.jutransformedtargetmodel method)": [[55, "julearn.transformers.target.JuTransformedTargetModel.fit"]], "get_apply_to() (julearn.transformers.target.jutransformedtargetmodel method)": [[55, "julearn.transformers.target.JuTransformedTargetModel.get_apply_to"]], "get_metadata_routing() (julearn.transformers.target.jutransformedtargetmodel method)": [[55, "julearn.transformers.target.JuTransformedTargetModel.get_metadata_routing"]], "get_needed_types() (julearn.transformers.target.jutransformedtargetmodel method)": [[55, "julearn.transformers.target.JuTransformedTargetModel.get_needed_types"]], "get_params() (julearn.transformers.target.jutransformedtargetmodel method)": [[55, "julearn.transformers.target.JuTransformedTargetModel.get_params"]], "predict() (julearn.transformers.target.jutransformedtargetmodel method)": [[55, "julearn.transformers.target.JuTransformedTargetModel.predict"]], "predict_proba() (julearn.transformers.target.jutransformedtargetmodel method)": [[55, "julearn.transformers.target.JuTransformedTargetModel.predict_proba"]], "score() (julearn.transformers.target.jutransformedtargetmodel method)": [[55, "julearn.transformers.target.JuTransformedTargetModel.score"]], "set_params() (julearn.transformers.target.jutransformedtargetmodel method)": [[55, "julearn.transformers.target.JuTransformedTargetModel.set_params"]], "transform_target() (julearn.transformers.target.jutransformedtargetmodel method)": [[55, "julearn.transformers.target.JuTransformedTargetModel.transform_target"]], "targetconfoundremover (class in julearn.transformers.target)": [[56, "julearn.transformers.target.TargetConfoundRemover"]], "__init__() (julearn.transformers.target.targetconfoundremover method)": [[56, "julearn.transformers.target.TargetConfoundRemover.__init__"]], "fit() (julearn.transformers.target.targetconfoundremover method)": [[56, "julearn.transformers.target.TargetConfoundRemover.fit"]], "fit_transform() (julearn.transformers.target.targetconfoundremover method)": [[56, "julearn.transformers.target.TargetConfoundRemover.fit_transform"]], "needed_types (julearn.transformers.target.targetconfoundremover property)": [[56, "julearn.transformers.target.TargetConfoundRemover.needed_types"]], "transform() (julearn.transformers.target.targetconfoundremover method)": [[56, "julearn.transformers.target.TargetConfoundRemover.transform"]], "transformedtargetwarning (class in julearn.transformers.target)": [[57, "julearn.transformers.target.TransformedTargetWarning"]], "__init__() (julearn.transformers.target.transformedtargetwarning method)": [[57, "julearn.transformers.target.TransformedTargetWarning.__init__"]], "args (julearn.transformers.target.transformedtargetwarning attribute)": [[57, "julearn.transformers.target.TransformedTargetWarning.args"]], "with_traceback() (julearn.transformers.target.transformedtargetwarning method)": [[57, "julearn.transformers.target.TransformedTargetWarning.with_traceback"]], "get_target_transformer() (in module julearn.transformers.target)": [[58, "julearn.transformers.target.get_target_transformer"]], "list_target_transformers() (in module julearn.transformers.target)": [[59, "julearn.transformers.target.list_target_transformers"]], "register_target_transformer() (in module julearn.transformers.target)": [[60, "julearn.transformers.target.register_target_transformer"]], "reset_target_transformer_register() (in module julearn.transformers.target)": [[61, "julearn.transformers.target.reset_target_transformer_register"]], "configure_logging() (in module julearn.utils)": [[62, "julearn.utils.configure_logging"]], "logger (in module julearn.utils)": [[63, "julearn.utils.logger"]], "raise_error() (in module julearn.utils)": [[64, "julearn.utils.raise_error"]], "estimatorlike (in module julearn.utils.typing)": [[65, "julearn.utils.typing.EstimatorLike"]], "estimatorlikefit1 (class in julearn.utils.typing)": [[66, "julearn.utils.typing.EstimatorLikeFit1"]], "__init__() (julearn.utils.typing.estimatorlikefit1 method)": [[66, "julearn.utils.typing.EstimatorLikeFit1.__init__"]], "fit() (julearn.utils.typing.estimatorlikefit1 method)": [[66, "julearn.utils.typing.EstimatorLikeFit1.fit"]], "get_params() (julearn.utils.typing.estimatorlikefit1 method)": [[66, "julearn.utils.typing.EstimatorLikeFit1.get_params"]], "set_params() (julearn.utils.typing.estimatorlikefit1 method)": [[66, "julearn.utils.typing.EstimatorLikeFit1.set_params"]], "estimatorlikefit2 (class in julearn.utils.typing)": [[67, "julearn.utils.typing.EstimatorLikeFit2"]], "__init__() (julearn.utils.typing.estimatorlikefit2 method)": [[67, "julearn.utils.typing.EstimatorLikeFit2.__init__"]], "fit() (julearn.utils.typing.estimatorlikefit2 method)": [[67, "julearn.utils.typing.EstimatorLikeFit2.fit"]], "get_params() (julearn.utils.typing.estimatorlikefit2 method)": [[67, "julearn.utils.typing.EstimatorLikeFit2.get_params"]], "set_params() (julearn.utils.typing.estimatorlikefit2 method)": [[67, "julearn.utils.typing.EstimatorLikeFit2.set_params"]], "estimatorlikefity (class in julearn.utils.typing)": [[68, "julearn.utils.typing.EstimatorLikeFity"]], "__init__() (julearn.utils.typing.estimatorlikefity method)": [[68, "julearn.utils.typing.EstimatorLikeFity.__init__"]], "fit() (julearn.utils.typing.estimatorlikefity method)": [[68, "julearn.utils.typing.EstimatorLikeFity.fit"]], "get_params() (julearn.utils.typing.estimatorlikefity method)": [[68, "julearn.utils.typing.EstimatorLikeFity.get_params"]], "set_params() (julearn.utils.typing.estimatorlikefity method)": [[68, "julearn.utils.typing.EstimatorLikeFity.set_params"]], "juestimatorlike (class in julearn.utils.typing)": [[69, "julearn.utils.typing.JuEstimatorLike"]], "__init__() (julearn.utils.typing.juestimatorlike method)": [[69, "julearn.utils.typing.JuEstimatorLike.__init__"]], "fit() (julearn.utils.typing.juestimatorlike method)": [[69, "julearn.utils.typing.JuEstimatorLike.fit"]], "get_apply_to() (julearn.utils.typing.juestimatorlike method)": [[69, "julearn.utils.typing.JuEstimatorLike.get_apply_to"]], "get_needed_types() (julearn.utils.typing.juestimatorlike method)": [[69, "julearn.utils.typing.JuEstimatorLike.get_needed_types"]], "get_params() (julearn.utils.typing.juestimatorlike method)": [[69, "julearn.utils.typing.JuEstimatorLike.get_params"]], "set_params() (julearn.utils.typing.juestimatorlike method)": [[69, "julearn.utils.typing.JuEstimatorLike.set_params"]], "warn_with_log() (in module julearn.utils)": [[70, "julearn.utils.warn_with_log"]], "plot_scores() (in module julearn.viz)": [[71, "julearn.viz.plot_scores"]], "julearn.inspect": [[73, "module-julearn.inspect"]], "julearn.api": [[74, "module-julearn.api"]], "julearn.model_selection": [[75, "module-julearn.model_selection"]], "julearn.models": [[76, "module-julearn.models"]], "julearn.models.dynamic": [[76, "module-julearn.models.dynamic"]], "julearn.pipeline": [[77, "module-julearn.pipeline"]], "julearn.prepare": [[78, "module-julearn.prepare"]], "julearn.scoring": [[79, "module-julearn.scoring"]], "julearn.scoring.metrics": [[79, "module-julearn.scoring.metrics"]], "julearn.stats": [[80, "module-julearn.stats"]], "julearn.transformers": [[81, "module-julearn.transformers"]], "julearn.transformers.target": [[81, "module-julearn.transformers.target"]], "julearn.utils": [[82, "module-julearn.utils"]], "julearn.utils.typing": [[82, "module-julearn.utils.typing"]], "julearn.viz": [[83, "module-julearn.viz"]]}})