
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/03_complex_models/run_stacked_models.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_03_complex_models_run_stacked_models.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_03_complex_models_run_stacked_models.py:


Stacking Classification
=======================

This example uses the ``iris`` dataset and performs a complex stacking
classification. We will use two different classifiers, one applied to petal
features and one applied to sepal features. A final logistic regression
classifier will be applied on the predictions of the two classifiers.

.. include:: ../../links.inc

.. GENERATED FROM PYTHON SOURCE LINES 12-20

.. code-block:: default

    # Authors: Federico Raimondo <f.raimondo@fz-juelich.de>
    # License: AGPL

    from seaborn import load_dataset
    from julearn import run_cross_validation
    from julearn.pipeline import PipelineCreator
    from julearn.utils import configure_logging








.. GENERATED FROM PYTHON SOURCE LINES 21-22

Set the logging level to info to see extra information.

.. GENERATED FROM PYTHON SOURCE LINES 22-24

.. code-block:: default

    configure_logging(level="INFO")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2024-04-24 15:11:00,944 - julearn - INFO - ===== Lib Versions =====
    2024-04-24 15:11:00,944 - julearn - INFO - numpy: 1.26.4
    2024-04-24 15:11:00,944 - julearn - INFO - scipy: 1.13.0
    2024-04-24 15:11:00,944 - julearn - INFO - sklearn: 1.4.2
    2024-04-24 15:11:00,944 - julearn - INFO - pandas: 2.1.4
    2024-04-24 15:11:00,944 - julearn - INFO - julearn: 0.3.2.dev30
    2024-04-24 15:11:00,944 - julearn - INFO - ========================




.. GENERATED FROM PYTHON SOURCE LINES 25-27

.. code-block:: default

    df_iris = load_dataset("iris")








.. GENERATED FROM PYTHON SOURCE LINES 28-30

The dataset has three kind of species. We will keep two to perform a binary
classification.

.. GENERATED FROM PYTHON SOURCE LINES 30-32

.. code-block:: default

    df_iris = df_iris[df_iris["species"].isin(["versicolor", "virginica"])]








.. GENERATED FROM PYTHON SOURCE LINES 33-35

As features, we will use the sepal length, width and petal length.
We will try to predict the species.

.. GENERATED FROM PYTHON SOURCE LINES 35-70

.. code-block:: default


    X = ["sepal_length", "sepal_width", "petal_length", "petal_width"]
    y = "species"

    # Define our feature types
    X_types = {
        "sepal": ["sepal_length", "sepal_width"],
        "petal": ["petal_length", "petal_width"],
    }

    # Create the pipeline for the sepal features, by default will apply to "sepal"
    model_sepal = PipelineCreator(problem_type="classification", apply_to="sepal")
    model_sepal.add("filter_columns", apply_to="*", keep="sepal")
    model_sepal.add("zscore")
    model_sepal.add("svm")

    # Create the pipeline for the petal features, by default will apply to "petal"
    model_petal = PipelineCreator(problem_type="classification", apply_to="petal")
    model_petal.add("filter_columns", apply_to="*", keep="petal")
    model_petal.add("zscore")
    model_petal.add("rf")

    # Create the stacking model
    model = PipelineCreator(problem_type="classification")
    model.add(
        "stacking",
        estimators=[[("model_sepal", model_sepal), ("model_petal", model_petal)]],
        apply_to="*",
    )

    scores = run_cross_validation(
        X=X, y=y, X_types=X_types, data=df_iris, model=model
    )

    print(scores["test_score"])




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2024-04-24 15:11:00,947 - julearn - INFO - Adding step filter_columns that applies to ColumnTypes<types={'*'}; pattern=.*>
    2024-04-24 15:11:00,948 - julearn - INFO - Setting hyperparameter keep = sepal
    2024-04-24 15:11:00,948 - julearn - INFO - Step added
    2024-04-24 15:11:00,948 - julearn - INFO - Adding step zscore that applies to ColumnTypes<types={'sepal'}; pattern=(?:__:type:__sepal)>
    2024-04-24 15:11:00,948 - julearn - INFO - Step added
    2024-04-24 15:11:00,948 - julearn - INFO - Adding step svm that applies to ColumnTypes<types={'sepal'}; pattern=(?:__:type:__sepal)>
    2024-04-24 15:11:00,948 - julearn - INFO - Step added
    2024-04-24 15:11:00,948 - julearn - INFO - Adding step filter_columns that applies to ColumnTypes<types={'*'}; pattern=.*>
    2024-04-24 15:11:00,948 - julearn - INFO - Setting hyperparameter keep = petal
    2024-04-24 15:11:00,948 - julearn - INFO - Step added
    2024-04-24 15:11:00,949 - julearn - INFO - Adding step zscore that applies to ColumnTypes<types={'petal'}; pattern=(?:__:type:__petal)>
    2024-04-24 15:11:00,949 - julearn - INFO - Step added
    2024-04-24 15:11:00,949 - julearn - INFO - Adding step rf that applies to ColumnTypes<types={'petal'}; pattern=(?:__:type:__petal)>
    2024-04-24 15:11:00,949 - julearn - INFO - Step added
    2024-04-24 15:11:00,949 - julearn - INFO - Adding step stacking that applies to ColumnTypes<types={'*'}; pattern=.*>
    2024-04-24 15:11:00,949 - julearn - INFO - Setting hyperparameter estimators = [('model_sepal', <julearn.pipeline.pipeline_creator.PipelineCreator object at 0x7f8d3e074220>), ('model_petal', <julearn.pipeline.pipeline_creator.PipelineCreator object at 0x7f8d3e074f70>)]
    2024-04-24 15:11:00,949 - julearn - INFO - Step added
    2024-04-24 15:11:00,949 - julearn - INFO - ==== Input Data ====
    2024-04-24 15:11:00,949 - julearn - INFO - Using dataframe as input
    2024-04-24 15:11:00,949 - julearn - INFO -      Features: ['sepal_length', 'sepal_width', 'petal_length', 'petal_width']
    2024-04-24 15:11:00,949 - julearn - INFO -      Target: species
    2024-04-24 15:11:00,949 - julearn - INFO -      Expanded features: ['sepal_length', 'sepal_width', 'petal_length', 'petal_width']
    2024-04-24 15:11:00,950 - julearn - INFO -      X_types:{'sepal': ['sepal_length', 'sepal_width'], 'petal': ['petal_length', 'petal_width']}
    2024-04-24 15:11:00,950 - julearn - INFO - ====================
    2024-04-24 15:11:00,950 - julearn - INFO - 
    2024-04-24 15:11:00,952 - julearn - INFO - = Model Parameters =
    2024-04-24 15:11:00,952 - julearn - INFO - ====================
    2024-04-24 15:11:00,952 - julearn - INFO - 
    2024-04-24 15:11:00,953 - julearn - INFO - = Model Parameters =
    2024-04-24 15:11:00,953 - julearn - INFO - ====================
    2024-04-24 15:11:00,953 - julearn - INFO - 
    2024-04-24 15:11:01,057 - julearn - INFO - = Model Parameters =
    2024-04-24 15:11:01,057 - julearn - INFO - ====================
    2024-04-24 15:11:01,057 - julearn - INFO - 
    2024-04-24 15:11:01,057 - julearn - INFO - = Data Information =
    2024-04-24 15:11:01,057 - julearn - INFO -      Problem type: classification
    2024-04-24 15:11:01,057 - julearn - INFO -      Number of samples: 100
    2024-04-24 15:11:01,057 - julearn - INFO -      Number of features: 4
    2024-04-24 15:11:01,058 - julearn - INFO - ====================
    2024-04-24 15:11:01,058 - julearn - INFO - 
    2024-04-24 15:11:01,058 - julearn - INFO -      Number of classes: 2
    2024-04-24 15:11:01,058 - julearn - INFO -      Target type: object
    2024-04-24 15:11:01,058 - julearn - INFO -      Class distributions: species
    versicolor    50
    virginica     50
    Name: count, dtype: int64
    2024-04-24 15:11:01,059 - julearn - INFO - Using outer CV scheme KFold(n_splits=5, random_state=None, shuffle=False)
    2024-04-24 15:11:01,059 - julearn - INFO - Binary classification problem detected.
    /opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:73: FutureWarning: `fit_params` is deprecated and will be removed in version 1.6. Pass parameters via `params` instead.
      warnings.warn(
    0    1.00
    1    0.85
    2    0.95
    3    0.95
    4    0.95
    Name: test_score, dtype: float64





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 3.910 seconds)


.. _sphx_glr_download_auto_examples_03_complex_models_run_stacked_models.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: run_stacked_models.py <run_stacked_models.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: run_stacked_models.ipynb <run_stacked_models.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
