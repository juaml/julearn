
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/03_complex_models/run_hyperparameter_tuning.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_03_complex_models_run_hyperparameter_tuning.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_03_complex_models_run_hyperparameter_tuning.py:


Tuning Hyperparameters
=======================

This example uses the ``fmri`` dataset, performs simple binary classification
using a Support Vector Machine classifier and analyze the model.

References
----------

  Waskom, M.L., Frank, M.C., Wagner, A.D. (2016). Adaptive engagement of
  cognitive control in context-dependent decision-making. Cerebral Cortex.

.. include:: ../../links.inc

.. GENERATED FROM PYTHON SOURCE LINES 16-26

.. code-block:: Python

    # Authors: Federico Raimondo <f.raimondo@fz-juelich.de>
    # License: AGPL

    import numpy as np
    from seaborn import load_dataset

    from julearn import run_cross_validation
    from julearn.utils import configure_logging
    from julearn.pipeline import PipelineCreator








.. GENERATED FROM PYTHON SOURCE LINES 27-28

Set the logging level to info to see extra information.

.. GENERATED FROM PYTHON SOURCE LINES 28-30

.. code-block:: Python

    configure_logging(level="INFO")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/julearn/julearn/julearn/utils/logging.py:72: UserWarning: The '__version__' attribute is deprecated and will be removed in MarkupSafe 3.1. Use feature detection, or `importlib.metadata.version("markupsafe")`, instead.
      vstring = str(getattr(module, "__version__", None))
    2025-09-12 09:09:32,784 - julearn - INFO - ===== Lib Versions =====
    2025-09-12 09:09:32,784 - julearn - INFO - numpy: 1.26.4
    2025-09-12 09:09:32,784 - julearn - INFO - scipy: 1.16.2
    2025-09-12 09:09:32,784 - julearn - INFO - sklearn: 1.7.2
    2025-09-12 09:09:32,785 - julearn - INFO - pandas: 2.3.2
    2025-09-12 09:09:32,785 - julearn - INFO - julearn: 0.3.5.dev80
    2025-09-12 09:09:32,785 - julearn - INFO - ========================




.. GENERATED FROM PYTHON SOURCE LINES 31-32

Set the random seed to always have the same example.

.. GENERATED FROM PYTHON SOURCE LINES 32-34

.. code-block:: Python

    np.random.seed(42)








.. GENERATED FROM PYTHON SOURCE LINES 35-36

Load the dataset.

.. GENERATED FROM PYTHON SOURCE LINES 36-39

.. code-block:: Python

    df_fmri = load_dataset("fmri")
    df_fmri.head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>subject</th>
          <th>timepoint</th>
          <th>event</th>
          <th>region</th>
          <th>signal</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>s13</td>
          <td>18</td>
          <td>stim</td>
          <td>parietal</td>
          <td>-0.017552</td>
        </tr>
        <tr>
          <th>1</th>
          <td>s5</td>
          <td>14</td>
          <td>stim</td>
          <td>parietal</td>
          <td>-0.080883</td>
        </tr>
        <tr>
          <th>2</th>
          <td>s12</td>
          <td>18</td>
          <td>stim</td>
          <td>parietal</td>
          <td>-0.081033</td>
        </tr>
        <tr>
          <th>3</th>
          <td>s11</td>
          <td>18</td>
          <td>stim</td>
          <td>parietal</td>
          <td>-0.046134</td>
        </tr>
        <tr>
          <th>4</th>
          <td>s10</td>
          <td>18</td>
          <td>stim</td>
          <td>parietal</td>
          <td>-0.037970</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 40-41

Set the dataframe in the right format.

.. GENERATED FROM PYTHON SOURCE LINES 41-48

.. code-block:: Python

    df_fmri = df_fmri.pivot(
        index=["subject", "timepoint", "event"], columns="region", values="signal"
    )

    df_fmri = df_fmri.reset_index()
    df_fmri.head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>region</th>
          <th>subject</th>
          <th>timepoint</th>
          <th>event</th>
          <th>frontal</th>
          <th>parietal</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>s0</td>
          <td>0</td>
          <td>cue</td>
          <td>0.007766</td>
          <td>-0.006899</td>
        </tr>
        <tr>
          <th>1</th>
          <td>s0</td>
          <td>0</td>
          <td>stim</td>
          <td>-0.021452</td>
          <td>-0.039327</td>
        </tr>
        <tr>
          <th>2</th>
          <td>s0</td>
          <td>1</td>
          <td>cue</td>
          <td>0.016440</td>
          <td>0.000300</td>
        </tr>
        <tr>
          <th>3</th>
          <td>s0</td>
          <td>1</td>
          <td>stim</td>
          <td>-0.021054</td>
          <td>-0.035735</td>
        </tr>
        <tr>
          <th>4</th>
          <td>s0</td>
          <td>2</td>
          <td>cue</td>
          <td>0.024296</td>
          <td>0.033220</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 49-50

Let's do a first attempt and use a linear SVM with the default parameters.

.. GENERATED FROM PYTHON SOURCE LINES 50-61

.. code-block:: Python

    X = ["frontal", "parietal"]
    y = "event"

    creator = PipelineCreator(problem_type="classification")
    creator.add("zscore")
    creator.add("svm", kernel="linear")

    scores = run_cross_validation(X=X, y=y, data=df_fmri, model=creator)

    print(scores["test_score"].mean())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2025-09-12 09:09:32,793 - julearn - INFO - Adding step zscore that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2025-09-12 09:09:32,793 - julearn - INFO - Step added
    2025-09-12 09:09:32,793 - julearn - INFO - Adding step svm that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2025-09-12 09:09:32,793 - julearn - INFO - Setting hyperparameter kernel = linear
    2025-09-12 09:09:32,794 - julearn - INFO - Step added
    2025-09-12 09:09:32,794 - julearn - INFO - ==== Input Data ====
    2025-09-12 09:09:32,794 - julearn - INFO - Using dataframe as input
    2025-09-12 09:09:32,794 - julearn - INFO -      Features: ['frontal', 'parietal']
    2025-09-12 09:09:32,794 - julearn - INFO -      Target: event
    2025-09-12 09:09:32,794 - julearn - INFO -      Expanded features: ['frontal', 'parietal']
    2025-09-12 09:09:32,794 - julearn - INFO -      X_types:{}
    2025-09-12 09:09:32,794 - julearn - WARNING - The following columns are not defined in X_types: ['frontal', 'parietal']. They will be treated as continuous.
    /home/runner/work/julearn/julearn/julearn/prepare.py:510: RuntimeWarning: The following columns are not defined in X_types: ['frontal', 'parietal']. They will be treated as continuous.
      warn_with_log(
    2025-09-12 09:09:32,795 - julearn - INFO - ====================
    2025-09-12 09:09:32,795 - julearn - INFO - 
    2025-09-12 09:09:32,796 - julearn - INFO - = Model Parameters =
    2025-09-12 09:09:32,796 - julearn - INFO - ====================
    2025-09-12 09:09:32,796 - julearn - INFO - 
    2025-09-12 09:09:32,796 - julearn - INFO - = Data Information =
    2025-09-12 09:09:32,796 - julearn - INFO -      Problem type: classification
    2025-09-12 09:09:32,796 - julearn - INFO -      Number of samples: 532
    2025-09-12 09:09:32,796 - julearn - INFO -      Number of features: 2
    2025-09-12 09:09:32,796 - julearn - INFO - ====================
    2025-09-12 09:09:32,796 - julearn - INFO - 
    2025-09-12 09:09:32,797 - julearn - INFO -      Number of classes: 2
    2025-09-12 09:09:32,797 - julearn - INFO -      Target type: object
    2025-09-12 09:09:32,797 - julearn - INFO -      Class distributions: event
    cue     266
    stim    266
    Name: count, dtype: int64
    2025-09-12 09:09:32,798 - julearn - INFO - Using outer CV scheme KFold(n_splits=5, random_state=None, shuffle=False)
    2025-09-12 09:09:32,798 - julearn - INFO - Binary classification problem detected.
    0.5939164168576971




.. GENERATED FROM PYTHON SOURCE LINES 62-65

The score is not so good. Let's try to see if there is an optimal
regularization parameter (C) for the linear SVM.
We will use a grid search to find the best ``C``.

.. GENERATED FROM PYTHON SOURCE LINES 65-86

.. code-block:: Python


    creator = PipelineCreator(problem_type="classification")
    creator.add("zscore")
    creator.add("svm", kernel="linear", C=[0.01, 0.1])

    search_params = {
        "kind": "grid",
        "cv": 2,  # to speed up the example
    }

    scores, estimator = run_cross_validation(
        X=X,
        y=y,
        data=df_fmri,
        model=creator,
        search_params=search_params,
        return_estimator="final",
    )

    print(scores["test_score"].mean())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2025-09-12 09:09:32,855 - julearn - INFO - Adding step zscore that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2025-09-12 09:09:32,855 - julearn - INFO - Step added
    2025-09-12 09:09:32,855 - julearn - INFO - Adding step svm that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2025-09-12 09:09:32,855 - julearn - INFO - Setting hyperparameter kernel = linear
    2025-09-12 09:09:32,855 - julearn - INFO - Tuning hyperparameter C = [0.01, 0.1]
    2025-09-12 09:09:32,856 - julearn - INFO - Step added
    2025-09-12 09:09:32,856 - julearn - INFO - ==== Input Data ====
    2025-09-12 09:09:32,856 - julearn - INFO - Using dataframe as input
    2025-09-12 09:09:32,856 - julearn - INFO -      Features: ['frontal', 'parietal']
    2025-09-12 09:09:32,856 - julearn - INFO -      Target: event
    2025-09-12 09:09:32,856 - julearn - INFO -      Expanded features: ['frontal', 'parietal']
    2025-09-12 09:09:32,856 - julearn - INFO -      X_types:{}
    2025-09-12 09:09:32,856 - julearn - WARNING - The following columns are not defined in X_types: ['frontal', 'parietal']. They will be treated as continuous.
    /home/runner/work/julearn/julearn/julearn/prepare.py:510: RuntimeWarning: The following columns are not defined in X_types: ['frontal', 'parietal']. They will be treated as continuous.
      warn_with_log(
    2025-09-12 09:09:32,857 - julearn - INFO - ====================
    2025-09-12 09:09:32,857 - julearn - INFO - 
    2025-09-12 09:09:32,858 - julearn - INFO - = Model Parameters =
    2025-09-12 09:09:32,858 - julearn - INFO - Tuning hyperparameters using grid
    2025-09-12 09:09:32,858 - julearn - INFO - Hyperparameters:
    2025-09-12 09:09:32,858 - julearn - INFO -      svm__C: [0.01, 0.1]
    2025-09-12 09:09:32,858 - julearn - INFO - Using inner CV scheme KFold(n_splits=2, random_state=None, shuffle=False)
    2025-09-12 09:09:32,858 - julearn - INFO - Search Parameters:
    2025-09-12 09:09:32,858 - julearn - INFO -      cv: KFold(n_splits=2, random_state=None, shuffle=False)
    2025-09-12 09:09:32,859 - julearn - INFO - ====================
    2025-09-12 09:09:32,859 - julearn - INFO - 
    2025-09-12 09:09:32,859 - julearn - INFO - = Data Information =
    2025-09-12 09:09:32,859 - julearn - INFO -      Problem type: classification
    2025-09-12 09:09:32,859 - julearn - INFO -      Number of samples: 532
    2025-09-12 09:09:32,859 - julearn - INFO -      Number of features: 2
    2025-09-12 09:09:32,859 - julearn - INFO - ====================
    2025-09-12 09:09:32,859 - julearn - INFO - 
    2025-09-12 09:09:32,860 - julearn - INFO -      Number of classes: 2
    2025-09-12 09:09:32,860 - julearn - INFO -      Target type: object
    2025-09-12 09:09:32,860 - julearn - INFO -      Class distributions: event
    cue     266
    stim    266
    Name: count, dtype: int64
    2025-09-12 09:09:32,861 - julearn - INFO - Using outer CV scheme KFold(n_splits=5, random_state=None, shuffle=False) (incl. final model)
    2025-09-12 09:09:32,861 - julearn - INFO - Binary classification problem detected.
    0.588308940222183




.. GENERATED FROM PYTHON SOURCE LINES 87-88

This did not change much, let's explore other kernels too.

.. GENERATED FROM PYTHON SOURCE LINES 88-103

.. code-block:: Python


    creator = PipelineCreator(problem_type="classification")
    creator.add("zscore")
    creator.add("svm", kernel=["linear", "rbf", "poly"], C=[0.01, 0.1])

    scores, estimator = run_cross_validation(
        X=X,
        y=y,
        data=df_fmri,
        model=creator,
        search_params=search_params,
        return_estimator="final",
    )

    print(scores["test_score"].mean())




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2025-09-12 09:09:33,168 - julearn - INFO - Adding step zscore that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2025-09-12 09:09:33,168 - julearn - INFO - Step added
    2025-09-12 09:09:33,168 - julearn - INFO - Adding step svm that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2025-09-12 09:09:33,168 - julearn - INFO - Tuning hyperparameter kernel = ['linear', 'rbf', 'poly']
    2025-09-12 09:09:33,168 - julearn - INFO - Tuning hyperparameter C = [0.01, 0.1]
    2025-09-12 09:09:33,168 - julearn - INFO - Step added
    2025-09-12 09:09:33,169 - julearn - INFO - ==== Input Data ====
    2025-09-12 09:09:33,169 - julearn - INFO - Using dataframe as input
    2025-09-12 09:09:33,169 - julearn - INFO -      Features: ['frontal', 'parietal']
    2025-09-12 09:09:33,169 - julearn - INFO -      Target: event
    2025-09-12 09:09:33,169 - julearn - INFO -      Expanded features: ['frontal', 'parietal']
    2025-09-12 09:09:33,169 - julearn - INFO -      X_types:{}
    2025-09-12 09:09:33,169 - julearn - WARNING - The following columns are not defined in X_types: ['frontal', 'parietal']. They will be treated as continuous.
    /home/runner/work/julearn/julearn/julearn/prepare.py:510: RuntimeWarning: The following columns are not defined in X_types: ['frontal', 'parietal']. They will be treated as continuous.
      warn_with_log(
    2025-09-12 09:09:33,170 - julearn - INFO - ====================
    2025-09-12 09:09:33,170 - julearn - INFO - 
    2025-09-12 09:09:33,170 - julearn - INFO - = Model Parameters =
    2025-09-12 09:09:33,171 - julearn - INFO - Tuning hyperparameters using grid
    2025-09-12 09:09:33,171 - julearn - INFO - Hyperparameters:
    2025-09-12 09:09:33,171 - julearn - INFO -      svm__kernel: ['linear', 'rbf', 'poly']
    2025-09-12 09:09:33,171 - julearn - INFO -      svm__C: [0.01, 0.1]
    2025-09-12 09:09:33,171 - julearn - INFO - Using inner CV scheme KFold(n_splits=2, random_state=None, shuffle=False)
    2025-09-12 09:09:33,171 - julearn - INFO - Search Parameters:
    2025-09-12 09:09:33,171 - julearn - INFO -      cv: KFold(n_splits=2, random_state=None, shuffle=False)
    2025-09-12 09:09:33,171 - julearn - INFO - ====================
    2025-09-12 09:09:33,172 - julearn - INFO - 
    2025-09-12 09:09:33,172 - julearn - INFO - = Data Information =
    2025-09-12 09:09:33,172 - julearn - INFO -      Problem type: classification
    2025-09-12 09:09:33,172 - julearn - INFO -      Number of samples: 532
    2025-09-12 09:09:33,172 - julearn - INFO -      Number of features: 2
    2025-09-12 09:09:33,172 - julearn - INFO - ====================
    2025-09-12 09:09:33,172 - julearn - INFO - 
    2025-09-12 09:09:33,172 - julearn - INFO -      Number of classes: 2
    2025-09-12 09:09:33,172 - julearn - INFO -      Target type: object
    2025-09-12 09:09:33,173 - julearn - INFO -      Class distributions: event
    cue     266
    stim    266
    Name: count, dtype: int64
    2025-09-12 09:09:33,173 - julearn - INFO - Using outer CV scheme KFold(n_splits=5, random_state=None, shuffle=False) (incl. final model)
    2025-09-12 09:09:33,174 - julearn - INFO - Binary classification problem detected.
    0.7087109857168048




.. GENERATED FROM PYTHON SOURCE LINES 104-105

It seems that we might have found a better model, but which one is it?

.. GENERATED FROM PYTHON SOURCE LINES 105-107

.. code-block:: Python

    print(estimator.best_params_)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'svm__C': 0.1, 'svm__kernel': 'rbf'}




.. GENERATED FROM PYTHON SOURCE LINES 108-110

Now that we know that a RBF kernel is better, lest test different *gamma*
parameters.

.. GENERATED FROM PYTHON SOURCE LINES 110-127

.. code-block:: Python


    creator = PipelineCreator(problem_type="classification")
    creator.add("zscore")
    creator.add("svm", kernel="rbf", C=[0.01, 0.1], gamma=[1e-2, 1e-3])

    scores, estimator = run_cross_validation(
        X=X,
        y=y,
        data=df_fmri,
        model=creator,
        search_params=search_params,
        return_estimator="final",
    )

    print(scores["test_score"].mean())
    print(estimator.best_params_)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2025-09-12 09:09:33,923 - julearn - INFO - Adding step zscore that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2025-09-12 09:09:33,924 - julearn - INFO - Step added
    2025-09-12 09:09:33,924 - julearn - INFO - Adding step svm that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2025-09-12 09:09:33,924 - julearn - INFO - Setting hyperparameter kernel = rbf
    2025-09-12 09:09:33,924 - julearn - INFO - Tuning hyperparameter C = [0.01, 0.1]
    2025-09-12 09:09:33,924 - julearn - INFO - Tuning hyperparameter gamma = [0.01, 0.001]
    2025-09-12 09:09:33,924 - julearn - INFO - Step added
    2025-09-12 09:09:33,924 - julearn - INFO - ==== Input Data ====
    2025-09-12 09:09:33,924 - julearn - INFO - Using dataframe as input
    2025-09-12 09:09:33,925 - julearn - INFO -      Features: ['frontal', 'parietal']
    2025-09-12 09:09:33,925 - julearn - INFO -      Target: event
    2025-09-12 09:09:33,925 - julearn - INFO -      Expanded features: ['frontal', 'parietal']
    2025-09-12 09:09:33,925 - julearn - INFO -      X_types:{}
    2025-09-12 09:09:33,925 - julearn - WARNING - The following columns are not defined in X_types: ['frontal', 'parietal']. They will be treated as continuous.
    /home/runner/work/julearn/julearn/julearn/prepare.py:510: RuntimeWarning: The following columns are not defined in X_types: ['frontal', 'parietal']. They will be treated as continuous.
      warn_with_log(
    2025-09-12 09:09:33,926 - julearn - INFO - ====================
    2025-09-12 09:09:33,926 - julearn - INFO - 
    2025-09-12 09:09:33,926 - julearn - INFO - = Model Parameters =
    2025-09-12 09:09:33,926 - julearn - INFO - Tuning hyperparameters using grid
    2025-09-12 09:09:33,926 - julearn - INFO - Hyperparameters:
    2025-09-12 09:09:33,926 - julearn - INFO -      svm__C: [0.01, 0.1]
    2025-09-12 09:09:33,927 - julearn - INFO -      svm__gamma: [0.01, 0.001]
    2025-09-12 09:09:33,927 - julearn - INFO - Using inner CV scheme KFold(n_splits=2, random_state=None, shuffle=False)
    2025-09-12 09:09:33,927 - julearn - INFO - Search Parameters:
    2025-09-12 09:09:33,927 - julearn - INFO -      cv: KFold(n_splits=2, random_state=None, shuffle=False)
    2025-09-12 09:09:33,927 - julearn - INFO - ====================
    2025-09-12 09:09:33,927 - julearn - INFO - 
    2025-09-12 09:09:33,927 - julearn - INFO - = Data Information =
    2025-09-12 09:09:33,927 - julearn - INFO -      Problem type: classification
    2025-09-12 09:09:33,928 - julearn - INFO -      Number of samples: 532
    2025-09-12 09:09:33,928 - julearn - INFO -      Number of features: 2
    2025-09-12 09:09:33,928 - julearn - INFO - ====================
    2025-09-12 09:09:33,928 - julearn - INFO - 
    2025-09-12 09:09:33,928 - julearn - INFO -      Number of classes: 2
    2025-09-12 09:09:33,928 - julearn - INFO -      Target type: object
    2025-09-12 09:09:33,929 - julearn - INFO -      Class distributions: event
    cue     266
    stim    266
    Name: count, dtype: int64
    2025-09-12 09:09:33,929 - julearn - INFO - Using outer CV scheme KFold(n_splits=5, random_state=None, shuffle=False) (incl. final model)
    2025-09-12 09:09:33,929 - julearn - INFO - Binary classification problem detected.
    0.5188855581026275
    {'svm__C': 0.01, 'svm__gamma': 0.001}




.. GENERATED FROM PYTHON SOURCE LINES 128-130

It seems that without tuning the gamma parameter we had a better accuracy.
Let's add the default value and see what happens.

.. GENERATED FROM PYTHON SOURCE LINES 130-151

.. code-block:: Python


    creator = PipelineCreator(problem_type="classification")
    creator.add("zscore")
    creator.add("svm", kernel="rbf", C=[0.01, 0.1], gamma=[1e-2, 1e-3, "scale"])
    X = ["frontal", "parietal"]
    y = "event"

    search_params = {"cv": 2}

    scores, estimator = run_cross_validation(
        X=X,
        y=y,
        data=df_fmri,
        model=creator,
        return_estimator="final",
        search_params=search_params,
    )

    print(scores["test_score"].mean())
    print(estimator.best_params_)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2025-09-12 09:09:34,497 - julearn - INFO - Adding step zscore that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2025-09-12 09:09:34,497 - julearn - INFO - Step added
    2025-09-12 09:09:34,497 - julearn - INFO - Adding step svm that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2025-09-12 09:09:34,497 - julearn - INFO - Setting hyperparameter kernel = rbf
    2025-09-12 09:09:34,498 - julearn - INFO - Tuning hyperparameter C = [0.01, 0.1]
    2025-09-12 09:09:34,498 - julearn - INFO - Tuning hyperparameter gamma = [0.01, 0.001, 'scale']
    2025-09-12 09:09:34,498 - julearn - INFO - Step added
    2025-09-12 09:09:34,498 - julearn - INFO - ==== Input Data ====
    2025-09-12 09:09:34,498 - julearn - INFO - Using dataframe as input
    2025-09-12 09:09:34,498 - julearn - INFO -      Features: ['frontal', 'parietal']
    2025-09-12 09:09:34,498 - julearn - INFO -      Target: event
    2025-09-12 09:09:34,498 - julearn - INFO -      Expanded features: ['frontal', 'parietal']
    2025-09-12 09:09:34,498 - julearn - INFO -      X_types:{}
    2025-09-12 09:09:34,498 - julearn - WARNING - The following columns are not defined in X_types: ['frontal', 'parietal']. They will be treated as continuous.
    /home/runner/work/julearn/julearn/julearn/prepare.py:510: RuntimeWarning: The following columns are not defined in X_types: ['frontal', 'parietal']. They will be treated as continuous.
      warn_with_log(
    2025-09-12 09:09:34,499 - julearn - INFO - ====================
    2025-09-12 09:09:34,499 - julearn - INFO - 
    2025-09-12 09:09:34,500 - julearn - INFO - = Model Parameters =
    2025-09-12 09:09:34,500 - julearn - INFO - Tuning hyperparameters using grid
    2025-09-12 09:09:34,500 - julearn - INFO - Hyperparameters:
    2025-09-12 09:09:34,500 - julearn - INFO -      svm__C: [0.01, 0.1]
    2025-09-12 09:09:34,500 - julearn - INFO -      svm__gamma: [0.01, 0.001, 'scale']
    2025-09-12 09:09:34,500 - julearn - INFO - Using inner CV scheme KFold(n_splits=2, random_state=None, shuffle=False)
    2025-09-12 09:09:34,500 - julearn - INFO - Search Parameters:
    2025-09-12 09:09:34,501 - julearn - INFO -      cv: KFold(n_splits=2, random_state=None, shuffle=False)
    2025-09-12 09:09:34,501 - julearn - INFO - ====================
    2025-09-12 09:09:34,501 - julearn - INFO - 
    2025-09-12 09:09:34,501 - julearn - INFO - = Data Information =
    2025-09-12 09:09:34,501 - julearn - INFO -      Problem type: classification
    2025-09-12 09:09:34,501 - julearn - INFO -      Number of samples: 532
    2025-09-12 09:09:34,501 - julearn - INFO -      Number of features: 2
    2025-09-12 09:09:34,501 - julearn - INFO - ====================
    2025-09-12 09:09:34,501 - julearn - INFO - 
    2025-09-12 09:09:34,502 - julearn - INFO -      Number of classes: 2
    2025-09-12 09:09:34,502 - julearn - INFO -      Target type: object
    2025-09-12 09:09:34,502 - julearn - INFO -      Class distributions: event
    cue     266
    stim    266
    Name: count, dtype: int64
    2025-09-12 09:09:34,502 - julearn - INFO - Using outer CV scheme KFold(n_splits=5, random_state=None, shuffle=False) (incl. final model)
    2025-09-12 09:09:34,503 - julearn - INFO - Binary classification problem detected.
    0.7087109857168048
    {'svm__C': 0.1, 'svm__gamma': 'scale'}




.. GENERATED FROM PYTHON SOURCE LINES 152-153

.. code-block:: Python

    print(estimator.best_estimator_["svm"]._gamma)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    0.5





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 2.541 seconds)


.. _sphx_glr_download_auto_examples_03_complex_models_run_hyperparameter_tuning.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: run_hyperparameter_tuning.ipynb <run_hyperparameter_tuning.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: run_hyperparameter_tuning.py <run_hyperparameter_tuning.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: run_hyperparameter_tuning.zip <run_hyperparameter_tuning.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
