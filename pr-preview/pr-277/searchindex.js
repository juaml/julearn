Search.setIndex({"docnames": ["api/base", "api/config", "api/generated/julearn.PipelineCreator", "api/generated/julearn.TargetPipelineCreator", "api/generated/julearn.base.ColumnTypes", "api/generated/julearn.base.ColumnTypesLike", "api/generated/julearn.base.JuBaseEstimator", "api/generated/julearn.base.JuTransformer", "api/generated/julearn.base.WrapModel", "api/generated/julearn.base.change_column_type", "api/generated/julearn.base.ensure_column_types", "api/generated/julearn.base.get_column_type", "api/generated/julearn.base.make_type_selector", "api/generated/julearn.config.get_config", "api/generated/julearn.config.set_config", "api/generated/julearn.inspect.FoldsInspector", "api/generated/julearn.inspect.Inspector", "api/generated/julearn.inspect.preprocess", "api/generated/julearn.model_selection.ContinuousStratifiedGroupKFold", "api/generated/julearn.model_selection.ContinuousStratifiedKFold", "api/generated/julearn.model_selection.RepeatedContinuousStratifiedGroupKFold", "api/generated/julearn.model_selection.RepeatedContinuousStratifiedKFold", "api/generated/julearn.model_selection.StratifiedBootstrap", "api/generated/julearn.model_selection.get_searcher", "api/generated/julearn.model_selection.list_searchers", "api/generated/julearn.model_selection.register_searcher", "api/generated/julearn.model_selection.reset_searcher_register", "api/generated/julearn.models.dynamic.DynamicSelection", "api/generated/julearn.models.get_model", "api/generated/julearn.models.list_models", "api/generated/julearn.models.register_model", "api/generated/julearn.models.reset_model_register", "api/generated/julearn.pipeline.JuTargetPipeline", "api/generated/julearn.pipeline.pipeline_creator.Step", "api/generated/julearn.prepare.check_consistency", "api/generated/julearn.prepare.prepare_input_data", "api/generated/julearn.run_cross_validation", "api/generated/julearn.run_fit", "api/generated/julearn.scoring.check_scoring", "api/generated/julearn.scoring.get_scorer", "api/generated/julearn.scoring.list_scorers", "api/generated/julearn.scoring.metrics.r2_corr", "api/generated/julearn.scoring.metrics.r_corr", "api/generated/julearn.scoring.register_scorer", "api/generated/julearn.scoring.reset_scorer_register", "api/generated/julearn.stats.corrected_ttest", "api/generated/julearn.transformers.CBPM", "api/generated/julearn.transformers.ChangeColumnTypes", "api/generated/julearn.transformers.DropColumns", "api/generated/julearn.transformers.FilterColumns", "api/generated/julearn.transformers.JuColumnTransformer", "api/generated/julearn.transformers.SetColumnTypes", "api/generated/julearn.transformers.confound_remover.ConfoundRemover", "api/generated/julearn.transformers.get_transformer", "api/generated/julearn.transformers.list_transformers", "api/generated/julearn.transformers.register_transformer", "api/generated/julearn.transformers.reset_transformer_register", "api/generated/julearn.transformers.target.JuTargetTransformer", "api/generated/julearn.transformers.target.JuTransformedTargetModel", "api/generated/julearn.transformers.target.TargetConfoundRemover", "api/generated/julearn.transformers.target.TransformedTargetWarning", "api/generated/julearn.transformers.target.get_target_transformer", "api/generated/julearn.transformers.target.list_target_transformers", "api/generated/julearn.transformers.target.register_target_transformer", "api/generated/julearn.transformers.target.reset_target_transformer_register", "api/generated/julearn.utils.configure_logging", "api/generated/julearn.utils.logger", "api/generated/julearn.utils.raise_error", "api/generated/julearn.utils.typing.EstimatorLike", "api/generated/julearn.utils.typing.EstimatorLikeFit1", "api/generated/julearn.utils.typing.EstimatorLikeFit2", "api/generated/julearn.utils.typing.EstimatorLikeFity", "api/generated/julearn.utils.typing.JuEstimatorLike", "api/generated/julearn.utils.warn_with_log", "api/generated/julearn.viz.plot_scores", "api/index", "api/inspect", "api/main", "api/model_selection", "api/models", "api/pipeline", "api/prepare", "api/scoring", "api/stats", "api/transformers", "api/utils", "api/viz", "auto_examples/00_starting/index", "auto_examples/00_starting/plot_cm_acc_multiclass", "auto_examples/00_starting/plot_example_regression", "auto_examples/00_starting/plot_stratified_kfold_reg", "auto_examples/00_starting/run_combine_pandas", "auto_examples/00_starting/run_grouped_cv", "auto_examples/00_starting/run_simple_binary_classification", "auto_examples/00_starting/sg_execution_times", "auto_examples/01_model_comparison/index", "auto_examples/01_model_comparison/plot_simple_model_comparison", "auto_examples/01_model_comparison/sg_execution_times", "auto_examples/02_inspection/index", "auto_examples/02_inspection/plot_groupcv_inspect_svm", "auto_examples/02_inspection/plot_inspect_random_forest", "auto_examples/02_inspection/plot_preprocess", "auto_examples/02_inspection/run_binary_inspect_folds", "auto_examples/02_inspection/sg_execution_times", "auto_examples/03_complex_models/index", "auto_examples/03_complex_models/run_apply_to_target", "auto_examples/03_complex_models/run_example_pca_featsets", "auto_examples/03_complex_models/run_hyperparameter_multiple_grids", "auto_examples/03_complex_models/run_hyperparameter_tuning", "auto_examples/03_complex_models/run_hyperparameter_tuning_bayessearch", "auto_examples/03_complex_models/run_stacked_models", "auto_examples/03_complex_models/sg_execution_times", "auto_examples/04_confounds/index", "auto_examples/04_confounds/plot_confound_removal_classification", "auto_examples/04_confounds/run_return_confounds", "auto_examples/04_confounds/sg_execution_times", "auto_examples/05_customization/index", "auto_examples/05_customization/run_custom_scorers_regression", "auto_examples/05_customization/sg_execution_times", "available_pipeline_steps", "configuration", "contributing", "examples", "faq", "getting_started", "index", "maintaining", "selected_deeper_topics/CBPM", "selected_deeper_topics/confound_removal", "selected_deeper_topics/cross_validation_splitter", "selected_deeper_topics/hyperparameter_tuning", "selected_deeper_topics/index", "selected_deeper_topics/model_inspect", "selected_deeper_topics/stacked_models", "selected_deeper_topics/target_transformers", "what_really_need_know/cross_validation", "what_really_need_know/data", "what_really_need_know/index", "what_really_need_know/model_comparison", "what_really_need_know/model_evaluation", "what_really_need_know/pipeline", "whats_new"], "filenames": ["api/base.rst", "api/config.rst", "api/generated/julearn.PipelineCreator.rst", "api/generated/julearn.TargetPipelineCreator.rst", "api/generated/julearn.base.ColumnTypes.rst", "api/generated/julearn.base.ColumnTypesLike.rst", "api/generated/julearn.base.JuBaseEstimator.rst", "api/generated/julearn.base.JuTransformer.rst", "api/generated/julearn.base.WrapModel.rst", "api/generated/julearn.base.change_column_type.rst", "api/generated/julearn.base.ensure_column_types.rst", "api/generated/julearn.base.get_column_type.rst", "api/generated/julearn.base.make_type_selector.rst", "api/generated/julearn.config.get_config.rst", "api/generated/julearn.config.set_config.rst", "api/generated/julearn.inspect.FoldsInspector.rst", "api/generated/julearn.inspect.Inspector.rst", "api/generated/julearn.inspect.preprocess.rst", "api/generated/julearn.model_selection.ContinuousStratifiedGroupKFold.rst", "api/generated/julearn.model_selection.ContinuousStratifiedKFold.rst", "api/generated/julearn.model_selection.RepeatedContinuousStratifiedGroupKFold.rst", "api/generated/julearn.model_selection.RepeatedContinuousStratifiedKFold.rst", "api/generated/julearn.model_selection.StratifiedBootstrap.rst", "api/generated/julearn.model_selection.get_searcher.rst", "api/generated/julearn.model_selection.list_searchers.rst", "api/generated/julearn.model_selection.register_searcher.rst", "api/generated/julearn.model_selection.reset_searcher_register.rst", "api/generated/julearn.models.dynamic.DynamicSelection.rst", "api/generated/julearn.models.get_model.rst", "api/generated/julearn.models.list_models.rst", "api/generated/julearn.models.register_model.rst", "api/generated/julearn.models.reset_model_register.rst", "api/generated/julearn.pipeline.JuTargetPipeline.rst", "api/generated/julearn.pipeline.pipeline_creator.Step.rst", "api/generated/julearn.prepare.check_consistency.rst", "api/generated/julearn.prepare.prepare_input_data.rst", "api/generated/julearn.run_cross_validation.rst", "api/generated/julearn.run_fit.rst", "api/generated/julearn.scoring.check_scoring.rst", "api/generated/julearn.scoring.get_scorer.rst", "api/generated/julearn.scoring.list_scorers.rst", "api/generated/julearn.scoring.metrics.r2_corr.rst", "api/generated/julearn.scoring.metrics.r_corr.rst", "api/generated/julearn.scoring.register_scorer.rst", "api/generated/julearn.scoring.reset_scorer_register.rst", "api/generated/julearn.stats.corrected_ttest.rst", "api/generated/julearn.transformers.CBPM.rst", "api/generated/julearn.transformers.ChangeColumnTypes.rst", "api/generated/julearn.transformers.DropColumns.rst", "api/generated/julearn.transformers.FilterColumns.rst", "api/generated/julearn.transformers.JuColumnTransformer.rst", "api/generated/julearn.transformers.SetColumnTypes.rst", "api/generated/julearn.transformers.confound_remover.ConfoundRemover.rst", "api/generated/julearn.transformers.get_transformer.rst", "api/generated/julearn.transformers.list_transformers.rst", "api/generated/julearn.transformers.register_transformer.rst", "api/generated/julearn.transformers.reset_transformer_register.rst", "api/generated/julearn.transformers.target.JuTargetTransformer.rst", "api/generated/julearn.transformers.target.JuTransformedTargetModel.rst", "api/generated/julearn.transformers.target.TargetConfoundRemover.rst", "api/generated/julearn.transformers.target.TransformedTargetWarning.rst", "api/generated/julearn.transformers.target.get_target_transformer.rst", "api/generated/julearn.transformers.target.list_target_transformers.rst", "api/generated/julearn.transformers.target.register_target_transformer.rst", "api/generated/julearn.transformers.target.reset_target_transformer_register.rst", "api/generated/julearn.utils.configure_logging.rst", "api/generated/julearn.utils.logger.rst", "api/generated/julearn.utils.raise_error.rst", "api/generated/julearn.utils.typing.EstimatorLike.rst", "api/generated/julearn.utils.typing.EstimatorLikeFit1.rst", "api/generated/julearn.utils.typing.EstimatorLikeFit2.rst", "api/generated/julearn.utils.typing.EstimatorLikeFity.rst", "api/generated/julearn.utils.typing.JuEstimatorLike.rst", "api/generated/julearn.utils.warn_with_log.rst", "api/generated/julearn.viz.plot_scores.rst", "api/index.rst", "api/inspect.rst", "api/main.rst", "api/model_selection.rst", "api/models.rst", "api/pipeline.rst", "api/prepare.rst", "api/scoring.rst", "api/stats.rst", "api/transformers.rst", "api/utils.rst", "api/viz.rst", "auto_examples/00_starting/index.rst", "auto_examples/00_starting/plot_cm_acc_multiclass.rst", "auto_examples/00_starting/plot_example_regression.rst", "auto_examples/00_starting/plot_stratified_kfold_reg.rst", "auto_examples/00_starting/run_combine_pandas.rst", "auto_examples/00_starting/run_grouped_cv.rst", "auto_examples/00_starting/run_simple_binary_classification.rst", "auto_examples/00_starting/sg_execution_times.rst", "auto_examples/01_model_comparison/index.rst", "auto_examples/01_model_comparison/plot_simple_model_comparison.rst", "auto_examples/01_model_comparison/sg_execution_times.rst", "auto_examples/02_inspection/index.rst", "auto_examples/02_inspection/plot_groupcv_inspect_svm.rst", "auto_examples/02_inspection/plot_inspect_random_forest.rst", "auto_examples/02_inspection/plot_preprocess.rst", "auto_examples/02_inspection/run_binary_inspect_folds.rst", "auto_examples/02_inspection/sg_execution_times.rst", "auto_examples/03_complex_models/index.rst", "auto_examples/03_complex_models/run_apply_to_target.rst", "auto_examples/03_complex_models/run_example_pca_featsets.rst", "auto_examples/03_complex_models/run_hyperparameter_multiple_grids.rst", "auto_examples/03_complex_models/run_hyperparameter_tuning.rst", "auto_examples/03_complex_models/run_hyperparameter_tuning_bayessearch.rst", "auto_examples/03_complex_models/run_stacked_models.rst", "auto_examples/03_complex_models/sg_execution_times.rst", "auto_examples/04_confounds/index.rst", "auto_examples/04_confounds/plot_confound_removal_classification.rst", "auto_examples/04_confounds/run_return_confounds.rst", "auto_examples/04_confounds/sg_execution_times.rst", "auto_examples/05_customization/index.rst", "auto_examples/05_customization/run_custom_scorers_regression.rst", "auto_examples/05_customization/sg_execution_times.rst", "available_pipeline_steps.rst", "configuration.rst", "contributing.rst", "examples.rst", "faq.rst", "getting_started.rst", "index.rst", "maintaining.rst", "selected_deeper_topics/CBPM.rst", "selected_deeper_topics/confound_removal.rst", "selected_deeper_topics/cross_validation_splitter.rst", "selected_deeper_topics/hyperparameter_tuning.rst", "selected_deeper_topics/index.rst", "selected_deeper_topics/model_inspect.rst", "selected_deeper_topics/stacked_models.rst", "selected_deeper_topics/target_transformers.rst", "what_really_need_know/cross_validation.rst", "what_really_need_know/data.rst", "what_really_need_know/index.rst", "what_really_need_know/model_comparison.rst", "what_really_need_know/model_evaluation.rst", "what_really_need_know/pipeline.rst", "whats_new.rst"], "titles": ["<span class=\"section-number\">9.4. </span>Base", "<span class=\"section-number\">9.17. </span>Config", "julearn.PipelineCreator", "julearn.TargetPipelineCreator", "julearn.base.ColumnTypes", "julearn.base.ColumnTypesLike", "julearn.base.JuBaseEstimator", "julearn.base.JuTransformer", "julearn.base.WrapModel", "julearn.base.change_column_type", "julearn.base.ensure_column_types", "julearn.base.get_column_type", "julearn.base.make_type_selector", "julearn.config.get_config", "julearn.config.set_config", "julearn.inspect.FoldsInspector", "julearn.inspect.Inspector", "julearn.inspect.preprocess", "julearn.model_selection.ContinuousStratifiedGroupKFold", "julearn.model_selection.ContinuousStratifiedKFold", "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold", "julearn.model_selection.RepeatedContinuousStratifiedKFold", "julearn.model_selection.StratifiedBootstrap", "julearn.model_selection.get_searcher", "julearn.model_selection.list_searchers", "julearn.model_selection.register_searcher", "julearn.model_selection.reset_searcher_register", "julearn.models.dynamic.DynamicSelection", "julearn.models.get_model", "julearn.models.list_models", "julearn.models.register_model", "julearn.models.reset_model_register", "julearn.pipeline.JuTargetPipeline", "julearn.pipeline.pipeline_creator.Step", "julearn.prepare.check_consistency", "julearn.prepare.prepare_input_data", "julearn.run_cross_validation", "julearn.run_fit", "julearn.scoring.check_scoring", "julearn.scoring.get_scorer", "julearn.scoring.list_scorers", "julearn.scoring.metrics.r2_corr", "julearn.scoring.metrics.r_corr", "julearn.scoring.register_scorer", "julearn.scoring.reset_scorer_register", "julearn.stats.corrected_ttest", "julearn.transformers.CBPM", "julearn.transformers.ChangeColumnTypes", "julearn.transformers.DropColumns", "julearn.transformers.FilterColumns", "julearn.transformers.JuColumnTransformer", "julearn.transformers.SetColumnTypes", "julearn.transformers.confound_remover.ConfoundRemover", "julearn.transformers.get_transformer", "julearn.transformers.list_transformers", "julearn.transformers.register_transformer", "julearn.transformers.reset_transformer_register", "julearn.transformers.target.JuTargetTransformer", "julearn.transformers.target.JuTransformedTargetModel", "julearn.transformers.target.TargetConfoundRemover", "julearn.transformers.target.TransformedTargetWarning", "julearn.transformers.target.get_target_transformer", "julearn.transformers.target.list_target_transformers", "julearn.transformers.target.register_target_transformer", "julearn.transformers.target.reset_target_transformer_register", "julearn.utils.configure_logging", "julearn.utils.logger", "julearn.utils.raise_error", "julearn.utils.typing.EstimatorLike", "julearn.utils.typing.EstimatorLikeFit1", "julearn.utils.typing.EstimatorLikeFit2", "julearn.utils.typing.EstimatorLikeFity", "julearn.utils.typing.JuEstimatorLike", "julearn.utils.warn_with_log", "julearn.viz.plot_scores", "<span class=\"section-number\">9. </span>API Reference", "<span class=\"section-number\">9.5. </span>Inspect", "<span class=\"section-number\">9.1. </span>Main API", "<span class=\"section-number\">9.3. </span>Model Selection", "<span class=\"section-number\">9.6. </span>Models", "<span class=\"section-number\">9.2. </span>Pipeline", "<span class=\"section-number\">9.14. </span>Prepare", "<span class=\"section-number\">9.8. </span>Scoring", "<span class=\"section-number\">9.15. </span>Stats", "<span class=\"section-number\">9.10. </span>Transformers", "<span class=\"section-number\">9.12. </span>Utils", "<span class=\"section-number\">9.16. </span>Visualization", "<span class=\"section-number\">8.1. </span>Starting with <code class=\"docutils literal notranslate\"><span class=\"pre\">julearn</span></code>", "Multiclass Classification", "Regression Analysis", "Stratified K-fold CV for regression analysis", "Working with <code class=\"docutils literal notranslate\"><span class=\"pre\">pandas</span></code>", "Grouped CV", "Simple Binary Classification", "Computation times", "<span class=\"section-number\">8.2. </span>Model Comparison", "Simple Model Comparison", "Computation times", "<span class=\"section-number\">8.3. </span>Inspection", "Inspecting SVM models", "Inspecting Random Forest models", "Preprocessing with variance threshold, zscore and PCA", "Inspecting the fold-wise predictions", "Computation times", "<span class=\"section-number\">8.4. </span>Complex Models", "Transforming target variable with z-score", "Regression Analysis", "Tuning Multiple Hyperparameters Grids", "Tuning Hyperparameters", "Tuning Hyperparameters using Bayesian Search", "Stacking Classification", "Computation times", "<span class=\"section-number\">8.5. </span>Confounds", "Confound Removal (model comparison)", "Return Confounds in Confound Removal", "Computation times", "<span class=\"section-number\">8.6. </span>Customization", "Custom Scoring Function for Regression", "Computation times", "<span class=\"section-number\">7. </span>Overview of available Pipeline Steps", "<span class=\"section-number\">10. </span>Configuring <code class=\"docutils literal notranslate\"><span class=\"pre\">julearn</span></code>", "<span class=\"section-number\">11. </span>Contributing", "<span class=\"section-number\">8. </span>Examples", "<span class=\"section-number\">13. </span>FAQs", "<span class=\"section-number\">1. </span>Getting started", "Welcome to julearn\u2019s documentation!", "<span class=\"section-number\">12. </span>Maintaining", "<span class=\"section-number\">6.7. </span>Connectome-based Predictive Modeling (CBPM)", "<span class=\"section-number\">6.2. </span>Cross-validation consistent Confound Removal", "<span class=\"section-number\">6.5. </span>Cross-validation splitters", "<span class=\"section-number\">6.3. </span>Hyperparameter Tuning", "<span class=\"section-number\">6. </span>Selected deeper topics", "<span class=\"section-number\">6.4. </span>Inspecting Models", "<span class=\"section-number\">6.6. </span>Stacking Models", "<span class=\"section-number\">6.1. </span>Applying preprocessing to the target", "<span class=\"section-number\">5.1. </span>Why cross validation?", "<span class=\"section-number\">5.2. </span>Data", "<span class=\"section-number\">5. </span>What you really need to know", "<span class=\"section-number\">5.5. </span>Model Comparison", "<span class=\"section-number\">5.4. </span>Model Evaluation", "<span class=\"section-number\">5.3. </span>Model Building", "<span class=\"section-number\">14. </span>What\u2019s new"], "terms": {"provid": [0, 2, 4, 6, 16, 18, 19, 22, 27, 36, 37, 58, 79, 91, 114, 120, 125, 128, 129, 130, 132, 133, 135, 136, 138, 139, 140, 141], "import": [0, 32, 57, 88, 89, 90, 91, 92, 93, 96, 99, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 121, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140], "modul": [0, 1, 36, 79, 86, 88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 120, 124, 125, 132, 133, 134, 135, 141], "global": [1, 13, 14, 18, 19, 120], "see": [1, 7, 18, 19, 20, 27, 28, 35, 36, 37, 46, 47, 48, 49, 50, 51, 52, 65, 79, 86, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 119, 120, 121, 123, 128, 129, 130, 132, 133, 135, 136, 137, 138, 139, 140], "configur": [1, 2, 7, 46, 47, 48, 49, 50, 51, 52, 65, 125, 128, 132, 133, 140], "julearn": [1, 77, 79, 86, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140], "more": [1, 2, 4, 36, 37, 45, 88, 89, 90, 91, 92, 93, 96, 99, 101, 106, 113, 117, 120, 121, 124, 125, 128, 129, 131, 132, 133, 135, 137, 138, 139, 140, 141], "inform": [1, 6, 7, 8, 18, 19, 20, 21, 22, 27, 32, 36, 37, 46, 47, 48, 49, 50, 51, 52, 57, 58, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 120, 121, 127, 128, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141], "flag": [1, 120, 121], "can": [1, 2, 4, 18, 19, 20, 21, 22, 25, 27, 30, 32, 34, 36, 37, 43, 45, 46, 50, 52, 55, 58, 63, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 113, 114, 117, 119, 120, 121, 123, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141], "set": [1, 2, 4, 5, 6, 7, 8, 14, 16, 18, 19, 20, 21, 22, 25, 27, 32, 33, 36, 37, 43, 46, 47, 48, 49, 50, 51, 52, 58, 59, 60, 69, 70, 71, 72, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 120, 122, 125, 126, 127, 128, 129, 130, 132, 133, 135, 137, 138, 139, 141], "thi": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 79, 86, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 119, 120, 121, 123, 124, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140], "page": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 125, 128, 129, 139], "i": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 86, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 119, 120, 121, 124, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141], "refer": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 101, 119, 121, 125, 130, 137], "document": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 86, 90, 96, 100, 119, 129, 130, 138, 139, 140], "It": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 99, 107, 108, 109, 124, 125, 127, 129, 130, 132, 139, 140], "onli": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 90, 99, 101, 107, 113, 114, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141], "explain": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 129, 140], "class": [2, 3, 4, 5, 6, 7, 8, 15, 16, 18, 19, 20, 21, 22, 23, 25, 27, 30, 32, 33, 36, 37, 46, 47, 48, 49, 50, 51, 52, 55, 57, 58, 59, 60, 63, 66, 67, 68, 69, 70, 71, 72, 73, 88, 90, 92, 93, 96, 99, 100, 102, 107, 108, 109, 110, 113, 114, 119, 128, 129, 130, 132, 138, 139, 140], "signatur": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74], "how": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 87, 92, 93, 96, 98, 99, 100, 104, 106, 114, 119, 121, 124, 125, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141], "pleas": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 79, 86, 101, 114, 121, 125, 139, 140], "what": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 91, 92, 99, 106, 108, 114, 119, 128, 129, 130, 132, 133, 134, 136, 139, 140], "you": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 88, 90, 91, 96, 100, 101, 114, 120, 121, 123, 124, 125, 126, 127, 128, 129, 132, 133, 135, 136, 138, 139, 140], "realli": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 113, 125], "need": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 90, 91, 92, 93, 96, 99, 100, 105, 113, 114, 117, 121, 123, 124, 125, 127, 128, 129, 130, 132, 134, 135, 138, 139, 140, 141], "know": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 106, 108, 125, 129, 132, 135, 138, 140], "section": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 129, 136, 138, 139, 140, 141], "big": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74], "pictur": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74], "problem_typ": [2, 28, 34, 36, 37, 88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 127, 128, 130, 132, 133, 134, 138, 139, 140], "apply_to": [2, 6, 7, 8, 33, 47, 48, 49, 50, 51, 52, 58, 101, 105, 106, 110, 113, 114, 128, 132, 133, 134, 140], "continu": [2, 8, 33, 47, 49, 51, 52, 88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 113, 114, 117, 127, 129, 130, 132, 133, 134, 136, 138, 139, 140, 141], "creat": [2, 3, 4, 46, 88, 90, 91, 93, 99, 101, 105, 106, 110, 119, 121, 123, 126, 127, 128, 129, 130, 132, 133, 134, 138, 139, 140], "pipelin": [2, 3, 6, 7, 8, 17, 18, 27, 34, 35, 36, 37, 38, 46, 47, 48, 49, 50, 51, 52, 57, 58, 75, 81, 99, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 125, 127, 128, 130, 132, 133, 134, 135, 136, 137, 138, 139, 141], "As": [2, 91, 93, 96, 102, 110, 113, 114, 117, 121, 123, 127, 128, 129, 130, 132, 133, 138, 139, 140], "creation": 2, "bit": [2, 107, 124, 130, 133, 139], "complic": [2, 135], "than": [2, 36, 37, 45, 90, 91, 99, 120, 125, 128, 129, 131, 140], "just": [2, 121, 125, 129, 132, 137, 140], "ad": [2, 7, 36, 37, 46, 47, 48, 49, 50, 51, 52, 88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 125, 127, 128, 130, 132, 133, 134, 136, 138, 139, 140, 141], "step": [2, 3, 17, 32, 36, 37, 45, 88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 121, 125, 127, 128, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141], "helper": 2, "so": [2, 6, 7, 8, 27, 43, 46, 47, 48, 49, 50, 51, 52, 58, 90, 91, 93, 96, 101, 108, 119, 121, 123, 124, 129, 130, 134, 136, 139, 140], "user": [2, 6, 7, 8, 18, 19, 20, 21, 22, 25, 27, 30, 36, 37, 43, 46, 47, 48, 49, 50, 51, 52, 55, 58, 60, 63, 65, 101, 114, 117, 120, 124, 125, 128, 130, 135, 140, 141], "easili": [2, 127, 129], "complex": [2, 91, 99, 110, 122, 125, 128, 129, 130, 132, 140], "sklearn": [2, 4, 6, 8, 12, 18, 27, 32, 50, 52, 59, 88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 127, 128, 129, 130, 132, 133, 134, 138, 139], "object": [2, 3, 6, 7, 8, 18, 19, 20, 21, 22, 27, 28, 34, 36, 37, 39, 43, 46, 47, 48, 49, 50, 51, 52, 53, 55, 58, 61, 88, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 123, 128, 130, 132, 133, 134, 139, 140, 141], "paramet": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 63, 65, 67, 69, 70, 71, 72, 73, 74, 81, 88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 119, 120, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141], "classif": [2, 30, 34, 36, 37, 65, 87, 92, 94, 96, 99, 100, 102, 104, 107, 108, 109, 111, 113, 121, 129, 130, 132, 133, 138, 139, 140], "regress": [2, 17, 18, 19, 30, 34, 36, 37, 43, 65, 87, 94, 101, 104, 105, 110, 111, 114, 116, 118, 119, 127, 130, 131, 133, 134, 138, 139, 140, 141], "The": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 30, 32, 33, 34, 35, 36, 37, 41, 42, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 63, 65, 67, 69, 70, 71, 72, 73, 74, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 132, 133, 136, 137, 138, 140, 141], "problem": [2, 18, 19, 20, 21, 22, 28, 30, 34, 36, 37, 88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 120, 127, 128, 129, 130, 132, 133, 134, 135, 138, 139, 140, 141], "type": [2, 4, 6, 7, 8, 9, 11, 12, 17, 28, 30, 32, 33, 34, 35, 36, 37, 47, 48, 49, 50, 51, 52, 58, 59, 75, 88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 119, 120, 121, 125, 127, 128, 130, 131, 132, 134, 135, 137, 138, 139], "which": [2, 6, 7, 18, 19, 25, 30, 33, 36, 37, 46, 47, 48, 49, 50, 51, 52, 55, 59, 63, 86, 89, 90, 92, 93, 99, 101, 105, 106, 107, 108, 109, 113, 114, 117, 121, 127, 128, 129, 130, 132, 133, 134, 135, 137, 139, 140, 141], "should": [2, 6, 7, 18, 22, 25, 27, 30, 33, 43, 46, 47, 48, 49, 50, 51, 52, 55, 63, 90, 101, 106, 113, 114, 119, 121, 126, 127, 129, 130, 131, 134, 135, 139, 140], "columntypeslik": [2, 33, 47, 48, 49, 50, 52, 114], "option": [2, 3, 7, 8, 16, 17, 18, 25, 27, 30, 33, 36, 37, 43, 45, 46, 47, 48, 49, 50, 51, 52, 55, 59, 63, 65, 67, 69, 70, 71, 72, 73, 74, 79, 86, 90, 91, 100, 113, 114, 123, 125, 126, 129, 130, 136, 139, 141], "To": [2, 50, 52, 99, 101, 107, 114, 121, 123, 125, 127, 129, 130, 132, 133, 135, 136, 138, 139, 140], "transform": [2, 3, 7, 32, 36, 37, 38, 65, 75, 91, 101, 104, 109, 111, 114, 120, 125, 127, 128, 130, 132, 134, 135, 140, 141], "appli": [2, 3, 6, 7, 8, 33, 36, 37, 46, 47, 48, 49, 50, 51, 52, 58, 59, 72, 88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 120, 125, 127, 128, 130, 131, 132, 133, 138, 139, 140], "specifi": [2, 22, 23, 25, 35, 36, 37, 49, 52, 59, 61, 91, 99, 100, 106, 107, 114, 119, 124, 125, 127, 128, 133, 134, 135, 136, 137, 139, 140, 141], "add": [2, 3, 4, 25, 30, 55, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 121, 127, 128, 129, 130, 132, 133, 134, 136, 138, 139, 140, 141], "method": [2, 6, 7, 8, 18, 19, 20, 21, 27, 45, 46, 47, 48, 49, 50, 51, 52, 58, 90, 91, 101, 107, 114, 120, 124, 127, 129, 130, 132, 140], "default": [2, 3, 6, 7, 8, 16, 17, 18, 19, 20, 21, 22, 25, 27, 30, 31, 33, 36, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 58, 59, 63, 65, 67, 69, 70, 71, 72, 73, 74, 96, 99, 101, 107, 108, 110, 113, 114, 119, 120, 123, 124, 127, 128, 130, 138, 139, 140, 141], "__init__": [2, 3, 4, 6, 7, 8, 15, 16, 18, 19, 20, 21, 22, 27, 32, 33, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60, 69, 70, 71, 72], "name": [2, 3, 6, 7, 8, 9, 17, 18, 23, 24, 25, 27, 28, 29, 30, 33, 36, 37, 39, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 61, 62, 63, 65, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 119, 120, 121, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140], "none": [2, 3, 6, 7, 8, 15, 16, 17, 18, 19, 20, 21, 22, 25, 27, 30, 32, 33, 34, 35, 36, 37, 43, 45, 46, 47, 48, 49, 50, 51, 52, 55, 59, 63, 65, 67, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 120, 127, 128, 130, 132, 133, 134, 138, 139, 140], "row_select_col_typ": [2, 7, 33, 47, 48, 49, 50, 51, 52, 114], "row_select_v": [2, 7, 33, 47, 48, 49, 50, 51, 52, 114], "param": [2, 3, 6, 7, 8, 27, 46, 47, 48, 49, 50, 51, 52, 53, 58, 61, 69, 70, 71, 72, 124, 127, 128, 130, 132, 134, 140], "estimatorlik": [2, 38, 50], "an": [2, 3, 7, 18, 19, 20, 21, 22, 27, 34, 36, 37, 39, 46, 47, 48, 49, 50, 51, 52, 88, 91, 92, 93, 96, 99, 100, 101, 108, 113, 120, 121, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141], "available_transform": 2, "available_model": 2, "str": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 61, 62, 63, 65, 67, 73, 88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 132, 133, 139, 140], "compat": [2, 18, 19, 20, 21, 22, 23, 25, 27, 36, 37, 47, 48, 49, 50, 51, 52, 53, 59, 114, 124, 127, 139, 140, 141], "model": [2, 7, 8, 16, 17, 22, 36, 37, 40, 45, 46, 47, 48, 49, 50, 51, 52, 58, 59, 65, 74, 75, 82, 88, 89, 90, 92, 93, 97, 98, 101, 102, 103, 105, 106, 107, 108, 109, 110, 112, 114, 115, 117, 120, 122, 125, 128, 129, 131, 134, 135, 137, 141], "If": [2, 3, 6, 7, 8, 16, 17, 22, 23, 25, 27, 30, 34, 35, 36, 37, 46, 47, 48, 49, 50, 51, 52, 55, 58, 61, 63, 65, 91, 93, 99, 101, 113, 114, 117, 120, 121, 124, 125, 128, 129, 130, 136, 137, 139, 140], "obtain": [2, 3, 8, 58, 100, 128, 135], "from": [2, 3, 4, 6, 27, 32, 35, 36, 37, 46, 47, 52, 55, 57, 59, 63, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 119, 121, 124, 125, 126, 127, 129, 130, 132, 133, 134, 136, 138, 139, 140, 141], "repres": [2, 4, 22, 33, 52, 59, 90, 114, 129, 139], "column": [2, 4, 6, 7, 8, 9, 11, 12, 17, 27, 33, 35, 36, 37, 47, 48, 49, 50, 51, 52, 58, 59, 72, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 113, 114, 117, 119, 120, 127, 128, 130, 132, 133, 134, 136, 138, 139, 140, 141], "list": [2, 4, 5, 6, 7, 8, 16, 17, 24, 29, 32, 33, 35, 36, 37, 40, 47, 48, 49, 50, 51, 52, 54, 59, 62, 90, 100, 107, 109, 114, 119, 120, 129, 130, 132, 136, 139, 140, 141], "attribut": [2, 6, 8, 10, 25, 27, 46, 58, 88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 117, 132, 133], "columntyp": [2, 5, 6, 7, 8, 10, 33, 47, 48, 49, 50, 51, 52, 58, 59, 72, 88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 127, 128, 130, 132, 133, 134, 138, 139, 140], "select": [2, 7, 8, 12, 27, 33, 47, 48, 49, 50, 51, 52, 75, 101, 114, 125, 127, 129, 130, 132, 136, 137, 138], "row": [2, 7, 33, 47, 48, 49, 50, 51, 52, 89, 90, 91, 92, 96, 99, 101, 102, 105, 106, 114, 117, 132, 134, 138, 139, 140], "int": [2, 7, 16, 18, 19, 20, 21, 22, 27, 33, 34, 35, 36, 37, 45, 46, 47, 48, 49, 50, 51, 52, 65, 74, 114, 139], "bool": [2, 6, 7, 8, 17, 18, 19, 25, 27, 30, 32, 33, 36, 38, 43, 46, 47, 48, 49, 50, 51, 52, 55, 58, 63, 65, 69, 70, 71, 72, 114], "valu": [2, 6, 7, 8, 13, 14, 22, 27, 33, 36, 37, 41, 42, 46, 47, 48, 49, 50, 51, 52, 58, 59, 88, 89, 90, 91, 92, 93, 99, 100, 101, 105, 106, 107, 108, 109, 113, 114, 117, 119, 120, 127, 129, 130, 132, 133, 136, 139, 140], "": [2, 6, 7, 8, 18, 19, 27, 33, 36, 46, 47, 48, 49, 50, 51, 52, 58, 59, 65, 88, 89, 90, 91, 92, 99, 101, 105, 106, 107, 108, 113, 114, 117, 119, 120, 121, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140], "train": [2, 7, 18, 19, 20, 21, 22, 27, 33, 36, 46, 47, 48, 49, 50, 51, 52, 59, 88, 89, 90, 92, 99, 101, 105, 106, 113, 114, 117, 128, 129, 130, 132, 134, 135, 138, 139, 140], "mostli": [2, 3, 129], "includ": [2, 3, 17, 22, 100, 101, 114, 120, 121, 124, 130, 135], "hyperparamet": [2, 3, 25, 36, 37, 65, 96, 101, 104, 106, 110, 111, 113, 114, 125, 127, 128, 131, 132, 133, 137, 138, 141], "ani": [2, 3, 7, 8, 13, 14, 25, 27, 30, 32, 33, 34, 35, 36, 37, 43, 47, 48, 49, 50, 51, 52, 55, 57, 63, 90, 120, 127, 129, 130, 132, 140], "other": [2, 3, 18, 25, 27, 30, 55, 86, 91, 93, 106, 108, 114, 121, 123, 127, 128, 129, 130, 137, 138, 140], "initi": [2, 3, 25, 26, 45, 55, 56, 63, 64, 113, 128, 133, 140], "multipl": [2, 18, 19, 20, 21, 22, 36, 65, 101, 104, 111, 129, 130, 139, 140, 141], "lead": [2, 124, 128, 129, 135, 140], "search": [2, 24, 25, 36, 37, 65, 101, 104, 107, 108, 111, 125, 130, 132, 133], "return": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 32, 35, 36, 37, 39, 40, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 60, 61, 62, 69, 70, 71, 72, 90, 99, 100, 112, 115, 117, 140, 141], "its": [2, 6, 26, 56, 64, 121, 130, 132, 133, 135, 137, 140], "last": [2, 101, 106, 114, 126, 128, 140], "rais": [2, 16, 18, 23, 25, 27, 30, 34, 35, 43, 55, 61, 63, 65, 67, 136, 141], "valueerror": [2, 16, 23, 25, 30, 34, 35, 43, 55, 61, 63, 67], "valid": [2, 3, 16, 18, 19, 20, 21, 22, 34, 35, 36, 37, 81, 88, 89, 100, 106, 113, 114, 119, 125, 127, 130, 131, 132, 136, 137, 138, 140, 141], "targetpipelinecr": [2, 105, 119, 128, 134], "target": [2, 3, 7, 8, 16, 18, 19, 20, 21, 22, 27, 32, 34, 35, 36, 37, 38, 46, 47, 48, 49, 50, 51, 52, 65, 69, 70, 71, 72, 75, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 104, 106, 107, 108, 109, 110, 111, 113, 114, 117, 119, 125, 127, 129, 130, 131, 132, 133, 136, 138, 139, 140, 141], "properti": [2, 4, 8, 16, 32, 58, 59, 129], "get": [2, 4, 6, 7, 8, 11, 13, 18, 19, 20, 21, 22, 23, 27, 28, 32, 39, 46, 47, 48, 49, 50, 51, 52, 53, 58, 59, 61, 69, 70, 71, 72, 88, 89, 92, 99, 100, 101, 106, 114, 125, 127, 132, 133, 138, 139], "have": [2, 6, 7, 8, 18, 19, 27, 35, 46, 47, 48, 49, 50, 51, 52, 58, 88, 91, 92, 93, 96, 99, 101, 107, 108, 109, 113, 114, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140], "been": [2, 60, 127, 129, 132, 141], "has_model": 2, "whether": [2, 17, 18, 19, 25, 30, 36, 43, 46, 52, 55, 63, 69, 70, 71, 72, 92, 96, 99, 114, 121, 128, 139], "ha": [2, 18, 27, 36, 37, 46, 60, 88, 89, 90, 91, 92, 93, 96, 99, 100, 102, 106, 110, 113, 117, 120, 121, 127, 128, 129, 130, 132, 135, 139, 140, 141], "copi": [2, 4, 90, 114, 121, 132, 133], "classmethod": 2, "from_list": 2, "model_param": [2, 36, 37, 96, 141], "union": [2, 5, 32, 38, 68], "dict": [2, 6, 7, 8, 27, 28, 33, 35, 36, 37, 46, 47, 48, 49, 50, 51, 52, 53, 58, 69, 70, 71, 72], "kei": [2, 13, 14, 35, 36, 37, 47, 51, 91, 101, 136], "being": [2, 121, 124, 139, 140, 141], "pieplin": 2, "split": [2, 18, 19, 20, 21, 22, 27, 36, 37, 88, 89, 90, 93, 96, 99, 105, 106, 117, 128, 129, 130, 132, 135, 139, 141], "least": [2, 18, 19, 20, 21, 36, 37, 90, 113, 119, 129], "two": [2, 45, 90, 91, 93, 96, 99, 100, 101, 102, 106, 107, 110, 113, 114, 117, 121, 127, 128, 129, 130, 133, 135, 138, 140], "same": [2, 18, 19, 36, 37, 51, 65, 93, 96, 99, 107, 108, 109, 113, 117, 121, 125, 127, 128, 129, 130, 133, 135, 138, 139, 140, 141], "consid": [2, 114, 120, 121, 126, 128, 130, 136, 139], "point": [2, 113, 121, 128, 129, 135, 137, 138, 139, 140], "tune": [2, 33, 36, 37, 65, 104, 111, 125, 127, 128, 131, 132, 133, 134, 140, 141], "function": [2, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 53, 54, 55, 56, 58, 61, 62, 63, 64, 65, 67, 73, 74, 87, 93, 96, 99, 100, 101, 112, 114, 116, 118, 120, 121, 123, 124, 125, 127, 128, 130, 135, 136, 137, 138, 139, 140, 141], "one": [2, 32, 36, 37, 45, 47, 48, 49, 51, 57, 89, 90, 91, 92, 99, 101, 105, 106, 107, 108, 109, 110, 114, 117, 119, 121, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141], "each": [2, 6, 7, 8, 18, 19, 20, 21, 22, 27, 35, 36, 37, 46, 47, 48, 49, 50, 51, 52, 58, 59, 88, 89, 90, 91, 92, 99, 100, 101, 102, 106, 113, 114, 117, 119, 121, 127, 128, 129, 130, 131, 132, 135, 138, 139, 140], "recurs": 2, "thu": [2, 6, 99, 135], "mani": [2, 46, 92, 99, 128, 129, 130, 139, 140], "all": [2, 4, 17, 24, 25, 29, 36, 37, 40, 46, 47, 51, 52, 54, 59, 62, 88, 89, 92, 93, 99, 100, 101, 106, 113, 114, 117, 119, 121, 124, 126, 127, 128, 130, 131, 132, 134, 135, 136, 137, 139, 140, 141], "A": [2, 6, 7, 8, 16, 18, 19, 20, 21, 22, 24, 27, 29, 35, 36, 37, 46, 47, 48, 49, 50, 51, 52, 54, 58, 62, 90, 91, 92, 93, 99, 107, 108, 109, 110, 114, 127, 128, 129, 130, 135, 136, 140], "without": [2, 25, 30, 43, 55, 63, 90, 92, 108, 113, 114, 119, 135], "repeat": [2, 20, 21, 88, 89, 106, 114, 117, 128, 129, 130, 132, 135, 139], "to_pipelin": [2, 3], "x_type": [2, 35, 36, 37, 47, 48, 49, 51, 52, 88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 120, 127, 128, 130, 132, 133, 134, 136, 138, 139, 140], "search_param": [2, 36, 37, 107, 108, 109, 130, 141], "data": [2, 6, 7, 8, 17, 18, 19, 20, 21, 22, 27, 32, 34, 35, 36, 37, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 81, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 119, 125, 127, 128, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140], "inspect": [2, 36, 65, 75, 101, 103, 106, 114, 122, 125, 131, 135, 136, 138, 139], "fold": [2, 16, 18, 19, 20, 21, 36, 65, 87, 88, 89, 94, 98, 99, 100, 103, 105, 106, 113, 114, 117, 128, 129, 130, 132, 134, 135, 139, 140], "wise": [2, 16, 36, 65, 98, 103, 135], "predict": [2, 8, 15, 16, 27, 35, 36, 37, 41, 42, 46, 52, 58, 59, 65, 88, 89, 90, 91, 92, 93, 96, 98, 99, 103, 105, 106, 110, 114, 117, 119, 125, 128, 129, 131, 132, 133, 134, 135, 138, 139, 140], "preprocess": [2, 3, 36, 37, 65, 88, 89, 90, 92, 93, 96, 98, 99, 100, 103, 106, 113, 114, 117, 125, 127, 131, 136, 137, 139], "varianc": [2, 17, 36, 65, 98, 103, 119, 129, 132, 140], "threshold": [2, 17, 36, 46, 52, 59, 65, 98, 103, 114, 119, 127], "zscore": [2, 17, 36, 65, 88, 89, 90, 92, 93, 96, 98, 99, 100, 102, 103, 105, 107, 108, 109, 110, 113, 117, 119, 130, 132, 134, 138, 139, 140], "pca": [2, 17, 36, 65, 98, 103, 106, 114, 119, 130, 140], "variabl": [2, 3, 18, 19, 20, 21, 22, 34, 35, 36, 65, 89, 90, 92, 99, 104, 106, 111, 114, 117, 128, 129, 130, 132, 134, 139, 140, 141], "z": [2, 3, 36, 65, 99, 104, 111, 126, 132, 134, 139, 140], "score": [2, 3, 8, 15, 16, 27, 36, 37, 45, 58, 65, 74, 75, 88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 104, 106, 107, 108, 109, 110, 111, 113, 114, 116, 118, 125, 127, 128, 130, 132, 133, 134, 137, 140, 141], "bayesian": [2, 36, 65, 104, 111, 130], "grid": [2, 36, 37, 65, 99, 104, 108, 111, 131, 132, 133, 141], "stack": [2, 36, 65, 104, 111, 113, 119, 125, 131], "analysi": [2, 17, 19, 36, 65, 87, 94, 104, 105, 111, 117, 119, 129, 140], "confound": [2, 3, 17, 22, 36, 47, 52, 59, 65, 91, 115, 119, 122, 125, 131, 138, 141], "remov": [2, 3, 17, 22, 36, 47, 52, 59, 65, 88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 112, 115, 117, 119, 121, 125, 129, 131, 132, 133, 138, 141], "comparison": [2, 22, 36, 45, 65, 74, 97, 112, 115, 122, 125, 137], "connectom": [2, 36, 46, 119, 125, 131], "base": [2, 16, 18, 19, 22, 32, 36, 45, 46, 57, 75, 119, 123, 125, 128, 130, 131, 132, 135, 136, 137, 140], "cbpm": [2, 36, 119, 125, 131, 141], "evalu": [2, 8, 36, 37, 40, 58, 82, 93, 99, 125, 129, 132, 135, 136, 137, 138, 140], "build": [2, 36, 88, 92, 99, 104, 125, 126, 127, 133, 134, 135, 137, 138], "cross": [2, 3, 16, 18, 19, 20, 21, 22, 34, 36, 37, 88, 89, 100, 106, 113, 114, 119, 125, 127, 130, 131, 132, 136, 137, 138, 140, 141], "consist": [2, 3, 27, 34, 36, 120, 125, 127, 129, 131, 135, 136, 138, 140, 141], "analog": 3, "pipelinecr": [3, 36, 37, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 119, 127, 128, 130, 132, 133, 134, 137, 138, 139, 141], "allow": [3, 18, 25, 27, 30, 43, 55, 63, 93, 113, 120, 123, 127, 128, 130, 136, 137, 140, 141], "target_pipelin": [3, 128, 134], "jutargetpipelin": [3, 58, 105, 128, 134], "easi": [3, 91, 125, 128, 130, 132, 133, 137, 138], "wai": [3, 93, 96, 123, 125, 128, 129, 130, 132, 133, 135, 138, 139, 140], "out": [3, 23, 24, 52, 62, 96, 114, 119, 125, 128, 129, 130, 132, 133, 137, 138, 139], "us": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 41, 42, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 79, 86, 87, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 113, 117, 119, 120, 121, 122, 124, 125, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141], "column_typ": 4, "hold": [4, 25, 139], "regard": [4, 136, 139], "pd": [4, 6, 7, 8, 16, 17, 27, 32, 36, 37, 45, 47, 48, 49, 50, 51, 52, 57, 58, 59, 69, 72, 74, 88, 89, 90, 91, 99, 100, 101, 105, 106, 113, 117, 127, 128, 129, 132, 133, 134, 138], "datafram": [4, 6, 7, 8, 16, 17, 27, 32, 35, 36, 37, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 74, 88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 120, 125, 127, 128, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141], "One": [4, 27, 91, 128, 130, 133, 140], "instead": [4, 18, 19, 22, 25, 27, 30, 43, 46, 55, 63, 88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 117, 120, 128, 129, 130, 132, 133, 141], "also": [4, 88, 90, 93, 96, 101, 106, 107, 114, 120, 121, 123, 125, 127, 128, 130, 132, 133, 135, 136, 138, 139, 140], "itself": [4, 133], "self": [4, 6, 7, 18, 27, 32, 46, 47, 48, 49, 50, 51, 52, 58, 60], "updat": [4, 6, 7, 8, 18, 27, 46, 47, 48, 49, 50, 51, 52, 58, 121, 124, 141], "pattern": [4, 12, 88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 127, 128, 130, 132, 133, 134, 138, 139, 140], "regex": 4, "match": [4, 50, 91], "to_type_selector": 4, "selector": [4, 12], "usabl": [4, 140], "compos": [4, 12], "columntransform": [4, 12], "callabl": [4, 38, 39, 43, 46, 141], "alia": [5, 18, 27, 66, 68], "needed_typ": [6, 7, 8, 32, 33, 50, 59], "estim": [6, 7, 8, 18, 27, 33, 36, 37, 38, 39, 43, 46, 47, 48, 49, 50, 51, 52, 58, 69, 70, 71, 72, 99, 100, 101, 107, 108, 109, 110, 113, 114, 125, 127, 128, 129, 130, 131, 132, 134, 135, 137, 138, 140], "everi": [6, 30, 35, 36, 37, 55, 126, 132, 136, 140], "awar": [6, 124], "thei": [6, 8, 27, 58, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 107, 108, 109, 113, 117, 123, 127, 130, 132, 133, 139, 140], "abl": [6, 120, 135, 138], "main": [6, 75, 113, 121, 125, 126, 128, 129, 135], "differ": [6, 18, 19, 20, 21, 22, 30, 90, 91, 93, 96, 101, 106, 107, 108, 110, 113, 114, 123, 124, 127, 128, 129, 130, 132, 133, 135, 136, 138, 139, 140], "between": [6, 22, 34, 89, 113, 121, 127, 128, 129, 133, 135, 138, 140], "baseestim": [6, 141], "purpos": [6, 90, 91, 139], "That": [6, 127, 128, 129, 130, 132, 140], "ar": [6, 7, 8, 18, 19, 20, 21, 25, 27, 30, 32, 36, 37, 43, 45, 46, 47, 48, 49, 50, 51, 52, 55, 57, 58, 59, 63, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 113, 114, 117, 119, 121, 122, 123, 124, 126, 127, 128, 129, 130, 132, 133, 135, 136, 137, 138, 139, 140, 141], "get_needed_typ": [6, 7, 8, 47, 48, 49, 50, 51, 52, 58, 72], "get_apply_to": [6, 7, 8, 47, 48, 49, 50, 51, 52, 58, 72], "filter_column": [6, 7, 8, 47, 48, 49, 50, 51, 52, 58, 110, 119, 133], "x": [6, 7, 8, 15, 16, 17, 18, 19, 20, 21, 22, 27, 32, 35, 36, 37, 39, 43, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 69, 70, 72, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 120, 126, 127, 128, 129, 130, 132, 133, 134, 136, 138, 139, 140, 141], "panda": [6, 7, 8, 34, 35, 36, 37, 46, 47, 48, 49, 50, 51, 52, 58, 87, 88, 89, 90, 92, 93, 94, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 117, 124, 125, 127, 128, 129, 132, 133, 134, 136, 138, 139], "filter": [6, 7, 8, 47, 48, 49, 50, 51, 52, 58, 119, 125, 140, 141], "get_metadata_rout": [6, 7, 8, 18, 19, 20, 21, 22, 27, 46, 47, 48, 49, 50, 51, 52, 58, 114], "metadata": [6, 7, 8, 18, 19, 20, 21, 22, 27, 46, 47, 48, 49, 50, 51, 52, 58, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 132, 133], "rout": [6, 7, 8, 18, 19, 20, 21, 22, 27, 46, 47, 48, 49, 50, 51, 52, 58, 114], "check": [6, 7, 8, 10, 18, 19, 20, 21, 22, 27, 32, 34, 38, 46, 47, 48, 49, 50, 51, 52, 58, 85, 91, 92, 99, 101, 113, 114, 120, 121, 125, 126, 130, 139, 141], "guid": [6, 7, 8, 18, 19, 20, 21, 22, 27, 46, 47, 48, 49, 50, 51, 52, 58, 114, 121], "mechan": [6, 7, 8, 18, 19, 20, 21, 22, 27, 46, 47, 48, 49, 50, 51, 52, 58, 114, 135], "work": [6, 7, 8, 18, 19, 20, 21, 22, 27, 32, 46, 47, 48, 49, 50, 51, 52, 57, 58, 87, 88, 89, 90, 92, 93, 94, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 121, 127, 128, 129, 130, 132, 133, 138, 141], "metadatarequest": [6, 7, 8, 18, 19, 20, 21, 22, 27, 46, 47, 48, 49, 50, 51, 52, 58, 114], "encapsul": [6, 7, 8, 18, 19, 20, 21, 22, 27, 46, 47, 48, 49, 50, 51, 52, 58, 114], "get_param": [6, 7, 8, 27, 46, 47, 48, 49, 50, 51, 52, 58, 69, 70, 71, 72, 132], "deep": [6, 7, 8, 27, 46, 47, 48, 49, 50, 51, 52, 58, 69, 70, 71, 72, 128], "true": [6, 7, 8, 18, 19, 25, 27, 30, 32, 36, 37, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52, 55, 58, 63, 69, 70, 71, 72, 88, 89, 90, 93, 99, 100, 102, 105, 106, 113, 114, 117, 120, 128, 129, 130, 132, 134, 135, 139, 140], "contain": [6, 7, 8, 27, 35, 36, 37, 40, 45, 46, 47, 48, 49, 50, 51, 52, 58, 74, 88, 89, 90, 93, 105, 106, 117, 129, 132, 136, 139], "subobject": [6, 7, 8, 27, 46, 47, 48, 49, 51, 52, 58], "map": [6, 7, 8, 27, 46, 47, 48, 49, 50, 51, 52, 58, 89, 114], "set_param": [6, 7, 8, 27, 46, 47, 48, 49, 50, 51, 52, 58, 69, 70, 71, 72], "simpl": [6, 7, 8, 27, 36, 45, 46, 47, 48, 49, 50, 51, 52, 58, 65, 74, 87, 94, 95, 97, 99, 100, 101, 102, 107, 108, 109, 113, 114, 119, 121, 125, 127, 129, 130, 132, 133, 135, 140], "well": [6, 7, 8, 27, 46, 47, 48, 49, 50, 51, 52, 58, 120, 127, 128, 129, 130, 132, 133, 135, 136, 137, 138, 140], "nest": [6, 7, 8, 27, 46, 47, 48, 49, 50, 51, 52, 58, 127, 130, 132, 135], "latter": [6, 7, 8, 27, 46, 47, 48, 49, 50, 51, 52, 58], "form": [6, 7, 8, 27, 46, 47, 48, 49, 50, 51, 52, 58, 136, 140], "compon": [6, 7, 8, 27, 46, 47, 48, 49, 50, 51, 52, 58, 101, 106, 119, 140], "__": [6, 7, 8, 27, 46, 47, 48, 49, 50, 51, 52, 58, 88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 127, 128, 130, 133, 134, 138, 139, 140], "possibl": [6, 7, 8, 25, 27, 30, 43, 46, 47, 48, 49, 50, 51, 52, 55, 58, 63, 91, 125, 129, 130, 135, 139, 140], "instanc": [6, 7, 8, 16, 18, 19, 20, 21, 22, 27, 46, 47, 48, 49, 50, 51, 52, 58, 128, 132, 140], "fit": [7, 8, 27, 32, 36, 37, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 69, 70, 71, 72, 99, 100, 106, 114, 119, 127, 128, 131, 132, 135, 140, 141], "y": [7, 8, 15, 16, 18, 19, 20, 21, 22, 27, 32, 34, 35, 36, 37, 39, 43, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 69, 70, 71, 72, 88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 119, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140], "fit_param": [7, 8, 46, 47, 48, 49, 50, 51, 52, 58], "datalik": [7, 8, 27, 32, 47, 48, 49, 50, 51, 52, 57, 58, 59, 69, 70, 71, 72], "addit": [7, 8, 27, 36, 37, 46, 47, 48, 49, 50, 51, 52, 58, 124, 125, 127, 132, 133, 135, 138, 139], "pass": [7, 8, 18, 19, 20, 21, 22, 27, 47, 48, 49, 50, 51, 52, 58, 90, 100, 107, 119, 121, 129, 130, 134, 139, 140], "fit_transform": [7, 32, 46, 47, 48, 49, 50, 51, 52, 57, 59], "version": [7, 18, 22, 27, 46, 47, 48, 49, 50, 51, 52, 88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 117, 121, 124, 125, 129, 132, 133, 141], "arrai": [7, 8, 18, 19, 20, 21, 22, 36, 46, 47, 48, 49, 50, 51, 52, 58, 88, 132, 133], "like": [7, 8, 18, 19, 20, 21, 22, 30, 46, 47, 48, 49, 50, 51, 52, 55, 58, 69, 70, 71, 72, 90, 96, 100, 106, 121, 124, 129, 130, 132, 135, 136, 139, 140], "shape": [7, 8, 18, 19, 20, 21, 22, 46, 47, 48, 49, 50, 51, 52, 58, 88, 99], "n_sampl": [7, 8, 18, 19, 20, 21, 22, 46, 47, 48, 49, 50, 51, 52, 58, 101, 127, 133], "n_featur": [7, 18, 19, 20, 21, 22, 46, 47, 48, 49, 50, 51, 52, 101, 127, 128, 133], "input": [7, 32, 34, 35, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 81, 88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 127, 128, 130, 132, 133, 134, 137, 138, 139, 140], "sampl": [7, 8, 18, 19, 20, 21, 22, 27, 35, 45, 46, 47, 48, 49, 50, 51, 52, 58, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 127, 128, 129, 130, 132, 133, 134, 138, 139, 140], "n_output": [7, 46, 47, 48, 49, 50, 51, 52], "unsupervis": [7, 46, 47, 48, 49, 50, 51, 52], "x_new": [7, 46, 47, 48, 49, 50, 51, 52], "ndarrai": [7, 8, 18, 19, 20, 21, 22, 27, 46, 47, 48, 49, 50, 51, 52, 58], "n_features_new": [7, 46, 47, 48, 49, 50, 51, 52], "set_output": [7, 46, 47, 48, 49, 50, 51, 52], "output": [7, 17, 18, 19, 20, 21, 22, 36, 37, 45, 46, 47, 48, 49, 50, 51, 52, 65, 74, 90, 113, 121, 132, 135, 136, 137, 140], "introduc": [7, 46, 47, 48, 49, 50, 51, 52, 128], "api": [7, 46, 47, 48, 49, 50, 51, 52, 119, 121, 125, 133, 137, 140], "exampl": [7, 37, 46, 47, 48, 49, 50, 51, 52, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 116, 117, 120, 123, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141], "polar": [7, 46, 47, 48, 49, 50, 51, 52], "format": [7, 46, 47, 48, 49, 50, 51, 52, 65, 89, 91, 106, 107, 108, 109, 113, 121, 126, 128, 130, 141], "unchang": [7, 18, 27, 46, 47, 48, 49, 50, 51, 52], "new": [7, 9, 18, 27, 46, 47, 48, 49, 50, 51, 52, 99, 114, 121, 125, 135, 140], "1": [7, 8, 18, 22, 27, 35, 36, 37, 46, 47, 48, 49, 50, 51, 52, 58, 69, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 120, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 136, 138, 139, 140], "4": [7, 46, 47, 48, 49, 50, 51, 52, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 125, 127, 128, 129, 130, 132, 133, 134, 136, 138, 139, 140], "wa": [7, 46, 47, 48, 49, 50, 51, 52, 92, 99, 100, 101, 114, 127, 129, 130, 132, 139], "wrap": [8, 38, 58, 141], "make": [8, 12, 18, 19, 20, 21, 22, 27, 89, 91, 92, 99, 101, 106, 107, 108, 109, 113, 121, 124, 126, 127, 128, 129, 130, 132, 133, 134, 136, 138, 139, 140, 141], "modellik": [8, 27, 28, 30, 52, 58, 59, 114], "float": [8, 22, 27, 35, 36, 37, 41, 42, 46, 52, 58, 59, 74, 88, 109, 114, 130], "predict_proba": [8, 15, 27, 58], "comput": [8, 27, 36, 41, 42, 46, 58, 93, 106, 117, 120, 130, 135, 140], "probabl": [8, 27, 36, 37, 58], "outcom": [8, 27, 58, 140], "np": [8, 18, 19, 20, 21, 22, 27, 46, 58, 88, 89, 92, 99, 106, 107, 108, 109, 127, 128, 129, 132, 133], "correspond": [8, 27, 36, 37, 58, 132], "sort": [8, 27, 58, 92, 99, 119], "order": [8, 18, 19, 27, 58, 91, 92, 99, 113, 114, 120, 121, 128, 130, 133, 135, 140, 141], "appear": [8, 27, 58, 139], "classes_": [8, 27, 58], "decision_funct": [8, 15, 58, 99, 141], "decis": [8, 58, 91, 92, 99, 107, 108, 109, 128, 132], "n_class": [8, 58], "2": [8, 18, 19, 20, 21, 22, 27, 58, 70, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 124, 125, 128, 129, 130, 132, 133, 134, 136, 138, 139, 140], "predict_log_proba": [8, 15], "kwarg": [8, 27, 28, 50, 57, 60, 69, 70, 71, 72], "new_typ": 9, "chang": [9, 18, 22, 27, 47, 86, 108, 113, 119, 121, 124, 126, 129, 130, 139], "attr": 10, "ensur": [10, 47, 49, 51, 52, 88, 129, 132], "cv": [15, 16, 18, 19, 20, 21, 22, 27, 34, 35, 36, 37, 65, 87, 88, 89, 93, 94, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 119, 127, 128, 129, 130, 132, 133, 134, 138, 139, 140, 141], "func": 15, "group": [15, 16, 18, 19, 20, 21, 22, 34, 35, 36, 37, 65, 87, 90, 94, 99, 100, 106, 125, 127, 131, 139], "featur": [16, 17, 18, 19, 20, 21, 22, 32, 35, 36, 37, 46, 47, 48, 49, 50, 51, 52, 57, 59, 69, 70, 72, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 120, 121, 124, 125, 127, 130, 131, 132, 134, 135, 137, 138, 139], "label": [16, 18, 19, 20, 21, 22, 35, 36, 37, 88, 93, 135, 136, 139, 140], "case": [16, 18, 19, 20, 21, 27, 35, 36, 37, 46, 90, 91, 99, 105, 117, 121, 127, 128, 129, 136, 139, 140], "number": [16, 18, 19, 20, 21, 22, 36, 37, 88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 126, 127, 128, 129, 130, 132, 133, 134, 135, 138, 139, 140], "pipelineinspector": [16, 102], "foldsinspector": [16, 132], "until": [17, 99, 101, 106, 114, 124, 136, 138, 141], "with_column_typ": [17, 99], "fals": [17, 18, 19, 25, 27, 30, 36, 43, 48, 52, 55, 58, 63, 65, 89, 90, 92, 93, 96, 99, 100, 101, 105, 106, 107, 108, 109, 110, 114, 117, 127, 128, 130, 132, 133, 134, 139, 140], "certain": [17, 120, 136, 139, 140], "inclus": [17, 114], "svm": [17, 36, 37, 65, 88, 93, 96, 98, 102, 103, 107, 108, 109, 110, 119, 130, 132, 133, 134, 138, 139, 140], "n_bin": [18, 19, 20, 21, 90, 129], "bin": [18, 19, 20, 21, 90, 129], "n_split": [18, 19, 20, 21, 22, 27, 88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 127, 128, 129, 130, 132, 133, 134, 138, 139, 140], "5": [18, 19, 20, 21, 22, 36, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140], "shuffl": [18, 19, 22, 89, 90, 92, 93, 96, 99, 100, 101, 105, 106, 107, 108, 109, 110, 114, 117, 127, 128, 129, 130, 132, 133, 134, 139, 140], "random_st": [18, 19, 20, 21, 22, 27, 88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 127, 128, 129, 130, 132, 133, 134, 138, 139, 140], "stratifi": [18, 19, 20, 21, 22, 36, 65, 87, 88, 94, 129, 139, 141], "k": [18, 19, 20, 21, 36, 65, 87, 88, 89, 92, 94, 99, 105, 106, 113, 119, 129, 130, 135, 139], "where": [18, 19, 20, 21, 22, 91, 126, 129, 130, 132, 140, 141], "stratif": [18, 19, 22, 90, 92, 131], "done": [18, 19, 22, 107, 121, 124, 126, 132, 133, 138, 139, 140], "discret": [18, 19, 129, 140], "fix": [18, 19, 121, 129, 141], "quantil": [18, 19, 20, 21, 129], "either": [18, 19, 20, 21, 45, 99, 101, 119, 121, 128, 130, 140], "In": [18, 19, 20, 21, 46, 90, 91, 92, 93, 99, 100, 113, 114, 117, 121, 125, 127, 128, 129, 132, 133, 135, 136, 138, 139, 140], "first": [18, 19, 20, 21, 45, 67, 73, 88, 92, 93, 96, 99, 101, 105, 106, 107, 108, 113, 114, 121, 127, 128, 130, 133, 134, 136, 137, 138, 139, 140], "second": [18, 19, 20, 21, 45, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 127, 128, 129, 130, 132, 133, 134, 136, 138, 139, 140], "must": [18, 19, 20, 21, 45, 50, 74, 91, 92, 99, 106, 121, 129, 130, 136, 140], "befor": [18, 19, 36, 37, 58, 88, 90, 91, 100, 113, 117, 121, 124, 126, 129, 130, 139, 140, 141], "batch": [18, 19], "note": [18, 19, 20, 21, 22, 27, 36, 37, 101, 113, 121, 128, 130, 133], "within": [18, 19, 121, 127, 128, 133, 135, 136, 139], "implement": [18, 19, 46, 120, 125, 127, 128, 129, 133, 141], "approxim": [18, 19], "distribut": [18, 19, 22, 45, 88, 90, 92, 93, 96, 99, 100, 102, 107, 108, 109, 110, 113, 119, 128, 129, 132, 138, 139, 140, 141], "perform": [18, 19, 32, 36, 37, 45, 88, 89, 90, 92, 93, 95, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 117, 121, 127, 128, 129, 130, 132, 135, 137, 138, 139, 140], "randomst": [18, 19, 20, 21, 22], "when": [18, 19, 27, 90, 100, 113, 119, 120, 121, 123, 127, 128, 129, 130, 134, 136, 139, 140, 141], "affect": [18, 19, 132], "indic": [18, 19, 20, 21, 22, 36, 48, 52, 99, 119, 121, 129, 132, 139, 140], "control": [18, 19, 20, 21, 22, 91, 92, 99, 107, 108, 109, 116, 128, 130, 133, 135], "random": [18, 19, 20, 21, 22, 27, 36, 37, 65, 92, 93, 96, 98, 101, 103, 107, 108, 109, 113, 119, 128, 129, 130, 132, 133, 138, 140], "otherwis": [18, 19, 22, 27, 58, 65], "leav": [18, 19, 106, 129], "reproduc": [18, 19, 20, 21, 22, 27, 36, 37, 139], "across": [18, 19, 20, 21, 22, 89, 100, 105, 106, 117, 129, 132, 139], "call": [18, 19, 20, 21, 22, 25, 39, 43, 120, 123, 128, 129, 130, 132, 133, 136, 140, 141], "splitter": [18, 19, 20, 21, 22, 27, 36, 125, 131, 137, 138], "mai": [18, 19, 20, 21, 22, 86, 127, 128, 132, 133], "result": [18, 19, 20, 21, 22, 32, 36, 37, 57, 91, 99, 113, 114, 120, 128, 129, 132, 135, 136, 138, 139, 141], "ident": [18, 19, 20, 21, 22, 109, 129, 130], "integ": [18, 19, 20, 21, 22, 130, 139], "gener": [18, 19, 20, 21, 22, 36, 37, 50, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 116, 117, 121, 126, 129, 134, 135, 139, 140, 141], "test": [18, 19, 20, 21, 22, 27, 36, 45, 59, 88, 89, 90, 96, 99, 105, 106, 108, 113, 125, 128, 129, 130, 132, 135, 138, 139, 141], "suffici": [18, 19, 22, 90], "henc": [18, 19, 22], "zero": [18, 19, 20, 21, 22, 101], "placehold": [18, 19, 20, 21, 22], "actual": [18, 19, 22, 46, 52, 88, 89, 106, 114, 117, 132], "supervis": [18, 19, 20, 21, 22, 140], "learn": [18, 19, 20, 21, 22, 23, 25, 36, 37, 46, 47, 49, 50, 51, 52, 53, 57, 91, 93, 99, 100, 117, 119, 120, 121, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141], "while": [18, 19, 20, 21, 22, 36, 37, 100, 107, 113, 120, 125, 128, 129, 130, 133, 134, 135, 140, 141], "dataset": [18, 19, 20, 21, 22, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 121, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140], "yield": [18, 19, 20, 21, 22, 36, 120, 132, 139], "get_n_split": [18, 19, 20, 21, 22], "iter": [18, 19, 20, 21, 22, 36, 101, 109, 113, 127, 130, 132, 139, 141], "alwai": [18, 19, 20, 21, 22, 93, 107, 108, 109, 113, 121, 128, 130, 133, 138, 139, 140], "ignor": [18, 19, 20, 21, 22, 27, 114, 117, 130], "exist": [18, 19, 20, 21, 22, 27, 43, 65], "set_split_request": 18, "request": [18, 27, 125], "relev": [18, 27, 132], "enable_metadata_rout": [18, 27], "set_config": [18, 27, 120], "meta": [18, 27], "error": [18, 25, 27, 30, 35, 36, 37, 43, 55, 63, 65, 67, 88, 89, 91, 105, 106, 117, 120, 121, 129, 135, 138, 141], "given": [18, 27, 52, 99, 113, 114, 119, 120, 128, 136, 139, 140], "origin": [18, 27, 46, 67, 121, 126], "util": [18, 27, 75, 88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 117, 121, 125, 132, 133], "metadata_rout": [18, 27], "retain": [18, 27, 132], "some": [18, 27, 90, 91, 92, 99, 100, 121, 124, 127, 128, 129, 130, 132, 133, 135, 136], "3": [18, 27, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 121, 124, 125, 127, 128, 129, 130, 132, 133, 134, 136, 138, 139, 140], "sub": [18, 27, 137], "e": [18, 27, 30, 46, 52, 59, 65, 114, 119, 121, 124, 126, 127, 128, 129, 130, 132, 139, 140], "g": [18, 27, 30, 65, 106, 119, 124, 129, 130, 139], "insid": [18, 27, 30, 140], "effect": [18, 27, 128, 132], "glossari": [19, 20], "n_repeat": [20, 21, 88, 96, 102, 132, 138, 139], "10": [20, 21, 46, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 125, 127, 128, 129, 130, 132, 133, 134, 138, 139, 140], "continuousstratifiedgroupkfold": [20, 129], "n": [20, 21, 88, 89, 90, 101, 105, 106, 117, 119, 126, 129, 134, 140], "time": [20, 21, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140], "repetit": [20, 21, 88, 89, 106], "state": [20, 21, 26, 27, 31, 44, 56, 64, 128], "contion": 21, "continuousstratifiedkfold": [21, 90, 129, 141], "test_siz": [22, 88, 89, 99, 105, 106, 113], "0": [22, 27, 35, 36, 37, 46, 52, 59, 74, 88, 89, 90, 91, 92, 93, 94, 96, 97, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 117, 118, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 136, 138, 139, 140], "train_siz": [22, 99, 113], "bootstrap": [22, 113, 129], "resampl": 22, "replac": [22, 46, 100, 113, 126, 132], "respect": [22, 46, 119, 121, 136, 138, 139, 140], "re": [22, 121, 140], "proport": 22, "round": [22, 138], "up": [22, 36, 37, 45, 67, 101, 107, 108, 109, 114, 125, 127, 132, 137, 140], "absolut": [22, 89, 105, 106, 117, 119], "complement": [22, 119], "size": [22, 127, 128, 129, 138], "21": [22, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 125, 127, 128, 130, 132, 133, 134, 138, 139, 140], "remain": [22, 129, 135], "unspecifi": 22, "automat": [22, 121, 124, 126, 140], "produc": [22, 130], "n_label": 22, "searcher": [23, 24, 25, 26, 36, 37, 124, 131, 141], "scikit": [23, 25, 36, 37, 46, 47, 49, 50, 51, 52, 53, 57, 93, 99, 100, 117, 119, 120, 124, 125, 127, 128, 129, 130, 133, 134, 135, 138, 139, 140, 141], "avail": [23, 24, 25, 29, 36, 37, 39, 40, 45, 54, 61, 62, 124, 125, 139, 140, 141], "algorithm": [24, 25, 27, 36, 37, 100, 130, 135, 138, 140, 141], "searcher_nam": 25, "params_attr": 25, "overwrit": [25, 30, 43, 55, 63, 65, 141], "regist": [25, 26, 30, 31, 36, 37, 43, 44, 55, 56, 63, 64, 117, 141], "after": [25, 32, 52, 57, 59, 89, 90, 99, 101, 105, 106, 113, 114, 117, 121, 132], "referenc": [25, 30, 55, 63, 141], "obj": 25, "space": [25, 130], "decid": [25, 30, 43, 63], "warn": [25, 30, 34, 35, 43, 55, 60, 63, 65, 73, 88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 107, 108, 109, 113, 117, 127, 129, 132, 133, 136, 138, 141], "alreadi": [25, 30, 43, 55, 63, 99, 101, 121, 128, 129, 133, 137, 138, 140], "reset": [26, 31, 44, 56, 64, 91], "ensembl": [27, 133], "ds_split": 27, "random_state_algorithm": 27, "deslib": [27, 75, 119, 124, 125], "randomforest": 27, "metad": 27, "singlebest": 27, "staticselect": 27, "stackedclassifi": 27, "knorau": 27, "knora": 27, "desp": 27, "ola": 27, "mcb": 27, "knop": 27, "sample_weight": 27, "weight": [27, 130, 140], "set_score_request": 27, "run_cross_valid": [28, 30, 45, 74, 88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 120, 121, 127, 128, 130, 132, 133, 134, 137, 138, 141], "extra": [28, 50, 69, 70, 72, 79, 86, 88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 117, 119, 120, 121, 133, 134, 140], "keyword": [28, 50, 69, 70, 72, 101, 127], "argument": [28, 50, 69, 70, 72, 101, 114, 129], "model_nam": 30, "classification_cl": 30, "regression_cl": 30, "afterward": [30, 55, 133], "behav": [30, 55], "runtimewarn": [30, 34, 35, 55, 63, 73, 88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 107, 108, 109, 113, 117, 127, 132, 133, 138], "unlik": [32, 57, 135], "both": [32, 46, 57, 90, 92, 99, 113, 114, 128, 129, 130, 133, 134, 139, 140], "requir": [32, 57, 79, 86, 121, 125, 130, 132, 134, 137, 140, 141], "targetconfoundremov": [32, 57, 128], "encod": [32, 57], "present": [32, 57, 114, 120, 121, 127, 129, 141], "leakag": [32, 57, 125, 128, 140], "drop": [32, 46, 48, 57, 90, 93, 96, 101, 114, 119, 132], "tupl": [32, 46, 90, 100, 129, 130], "jutargettransform": [32, 61, 63], "transformerlik": [32, 36, 37, 140], "inverse_transform": 32, "invers": [32, 58, 141], "can_inverse_transform": [32, 58], "factori": 33, "params_to_tun": 33, "juestimatorlik": 33, "estimatorlikefit1": [33, 68, 72], "estimatorlikefit2": [33, 68], "estimatorlikef": [33, 68], "seri": [34, 35, 59, 69, 72], "inconsist": [34, 35], "might": [34, 35, 86, 91, 93, 96, 100, 107, 108, 109, 120, 123, 124, 128, 129, 130, 132, 134, 137, 139, 140, 141], "still": [34, 91, 114, 124, 129, 139, 141], "run": [34, 36, 46, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 136, 138, 139, 140], "df": [35, 45, 101, 130, 136, 138, 139, 140], "pos_label": [35, 36, 37, 93], "detail": [35, 36, 37, 121, 135], "interpret": [35, 36, 37, 65, 113, 132], "posit": [35, 36, 37, 46, 89, 93, 127], "element": [35, 36, 37, 65, 88, 91, 101, 120, 140, 141], "convert": [35, 36, 37, 90, 91, 100, 113, 117, 129], "equal": [35, 36, 37, 90, 119, 129], "dictionari": [35, 36, 37, 47, 51, 101, 114, 128, 130, 132, 136, 141], "df_x": 35, "df_y": 35, "df_group": 35, "return_estim": [36, 37, 88, 89, 90, 92, 99, 100, 101, 105, 106, 107, 108, 109, 113, 114, 117, 127, 130, 132, 133, 139], "return_inspector": [36, 37, 102, 132], "return_train_scor": [36, 132, 139], "seed": [36, 37, 93, 96, 101, 107, 108, 109, 113, 132, 133], "n_job": [36, 46, 120, 132, 141], "verbos": [36, 37, 46, 132, 141], "string": [36, 37, 65, 119, 136, 138, 139, 140, 141], "kind": [36, 37, 88, 89, 92, 93, 96, 99, 100, 102, 107, 108, 109, 110, 113, 130, 136, 139], "categor": [36, 37, 106, 114, 119, 130, 134], "multiple_class": [36, 37], "binari": [36, 37, 65, 87, 92, 94, 96, 99, 100, 102, 107, 108, 109, 110, 113, 119, 121, 129, 130, 132, 138], "ordin": [36, 37], "final": [36, 37, 88, 89, 90, 91, 92, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 121, 127, 129, 130, 132, 133, 139, 140, 141], "inspector": [36, 37, 102, 132, 141], "strategi": [36, 37, 139], "kfold": [36, 89, 90, 92, 93, 96, 99, 100, 101, 105, 106, 107, 108, 109, 110, 114, 117, 127, 128, 129, 130, 132, 133, 134, 139, 140], "scorerlik": [36, 38, 39, 43], "metric": [36, 37, 75, 88, 89, 91, 93, 96, 106, 113, 117, 125, 135, 137, 138], "http": [36, 46, 65, 90, 96, 121, 125, 129, 135, 138, 141], "org": [36, 46, 65, 90, 96, 125, 135, 138, 139], "stabl": [36, 90, 124, 125, 135], "model_evalu": 36, "html": [36, 65, 90, 96, 121, 125, 135, 138, 139], "comprehens": [36, 120], "scorer": [36, 39, 40, 43, 44, 117, 138, 139, 141], "defin": [36, 37, 45, 50, 88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 117, 127, 128, 129, 130, 132, 133, 139, 140, 141], "follow": [36, 37, 45, 46, 50, 65, 67, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 107, 108, 109, 113, 114, 117, 119, 121, 122, 124, 125, 126, 127, 130, 132, 133, 136, 137, 138, 139, 140], "step__paramet": [36, 37], "sever": [36, 37, 91, 92, 99, 120, 121, 129, 130, 135, 139], "svm__probabl": [36, 37, 132], "gridsearchcv": [36, 37, 130], "randomizedsearchcv": [36, 37, 130], "bay": [36, 37, 109, 124, 130, 141], "bayessearchcv": [36, 37, 124, 130, 141], "optuna": [36, 37, 124, 130, 141], "optunasearchcv": [36, 37, 124, 130, 141], "register_search": [36, 37], "go": [36, 37, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 125, 132, 137, 140], "oper": [36, 37, 88, 90, 100, 113, 114, 129], "job": [36, 46], "parallel": [36, 46, 120, 121, 141], "over": [36, 88, 89, 93, 96, 101, 106, 127, 128, 132, 133, 138], "mean": [36, 37, 45, 46, 52, 59, 86, 89, 90, 92, 93, 99, 101, 105, 106, 107, 108, 109, 113, 114, 117, 119, 128, 129, 130, 132, 134, 135, 138, 139, 140], "unless": 36, "joblib": [36, 37, 46, 141], "parallel_backend": 36, "context": [36, 91, 92, 99, 107, 108, 109, 132], "processor": 36, "level": [36, 37, 65, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 117, 121, 127, 132, 133], "outer": [36, 37, 88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 127, 128, 130, 132, 133, 134, 138, 139, 140, 141], "convernt": [36, 37], "print": [36, 37, 65, 88, 89, 90, 92, 93, 96, 99, 101, 102, 105, 106, 107, 108, 109, 110, 114, 117, 120, 127, 128, 130, 132, 134, 138, 139, 140], "larger": [36, 37], "50": [36, 37, 88, 89, 90, 92, 93, 96, 100, 101, 102, 105, 106, 110, 113, 114, 117, 130, 133, 134, 139, 140], "standard": [36, 37, 46, 101, 128, 133, 140, 141], "standrad": [36, 37], "addition": [36, 37, 65, 93, 96, 125, 126, 128, 140], "fit_tim": [36, 37, 88, 89, 102, 105, 106, 114, 117, 128, 134, 139, 140], "And": [36, 37, 92, 99, 113, 129, 130], "final_estim": [36, 37], "multiclass": [36, 65, 87, 94, 119], "forest": [36, 65, 92, 96, 98, 101, 103, 113, 119, 133, 138, 140], "custom": [36, 43, 65, 118, 122, 125, 127, 139, 140], "wrap_scor": 38, "doe": [38, 99, 135, 140], "handl": 38, "non_invers": 38, "scalar": [39, 43, 88], "greater": [39, 43, 45, 132], "better": [39, 43, 107, 108, 109, 130, 132, 138], "Will": [39, 43, 138], "y_true": [41, 42, 88, 89, 93, 106, 117], "y_pred": [41, 42, 88, 89, 93, 106, 117], "squar": [41, 117, 119], "pearson": [41, 42, 117, 127], "product": [41, 42, 117], "moment": [41, 42, 117], "correl": [41, 42, 46, 89, 117, 127], "coeffici": [41, 42, 89, 117, 139, 140], "arraylik": [41, 42], "scorer_nam": [43, 117], "access": [43, 91], "want": [43, 52, 88, 91, 92, 93, 99, 101, 113, 114, 117, 121, 123, 124, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140], "userwarn": [43, 88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 117, 129, 132, 133], "bonferroni": 45, "altern": [45, 113, 141], "side": 45, "correct": [45, 96, 133, 138, 141], "t": [45, 91, 96, 99, 129, 130, 138, 139, 140, 141], "degre": 45, "freedom": 45, "adjust": 45, "pvalu": 45, "full": [45, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 121, 132], "letter": 45, "sidak": 45, "holm": 45, "down": 45, "sime": 45, "hochberg": 45, "independ": [45, 52, 59, 99, 113, 114, 119, 129], "hommel": 45, "close": [45, 126], "non": [45, 46], "neg": [45, 46, 127], "fdr_bh": 45, "benjamini": 45, "fdr_by": 45, "yekuti": 45, "fdr_tsbh": 45, "stage": 45, "fdr": [45, 119], "fdr_tsbky": 45, "less": [45, 90, 101, 125, 129, 135], "hypothesi": [45, 113], "underli": [45, 119, 128, 132], "unequ": 45, "significance_threshold": [46, 127], "05": [46, 106, 113, 115, 125, 127, 130, 132], "corr_method": [46, 127], "pearsonr": [46, 117, 139], "agg_method": [46, 127], "sum": [46, 88, 127, 141], "corr_sign": [46, 127], "posneg": [46, 127], "aggreg": [46, 127], "significantli": 46, "signific": [46, 96, 127, 132], "aggregate": 46, "separ": [46, 99, 101, 135, 139, 140], "ones": [46, 130], "choos": [46, 93, 96, 129, 130, 138, 140], "procedur": [46, 129, 135, 141], "describ": [46, 89, 90, 101, 105, 106, 114, 117, 121, 134, 139], "p": [46, 88, 96, 113, 127, 138], "scipi": [46, 88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 117, 127, 132, 133], "stat": [46, 75, 96, 117, 125, 127, 129, 138], "convent": [46, 121, 130], "axi": [46, 88, 89, 90, 105, 106, 117, 129, 134], "po": [46, 127], "correlation_valu": 46, "found": [46, 107, 108, 109, 139], "used_corr_sign_": 46, "log": [46, 65, 67, 73, 88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 117, 121, 130, 132, 133, 141], "shen": [46, 127], "finn": [46, 127], "scheinost": 46, "d": [46, 88, 91, 92, 99, 107, 108, 109, 119, 126, 127, 129, 130], "et": [46, 119, 127, 128, 140], "al": [46, 127, 128], "individu": [46, 127, 132, 139], "behavior": [46, 91, 127, 128, 132, 141], "brain": [46, 92, 99, 125, 127, 128], "connect": [46, 127, 128], "nat": [46, 127], "protoc": [46, 127], "12": [46, 89, 91, 92, 99, 101, 102, 106, 111, 124, 127, 128], "506": [46, 127, 130], "518": [46, 127], "2017": [46, 127, 128], "doi": [46, 125, 128], "1038": 46, "nprot": 46, "2016": [46, 91, 92, 99, 107, 108, 109, 127], "178": [46, 138], "y_mean_": 46, "show": [46, 87, 96, 104, 112, 116, 123, 129, 130, 138, 139, 141], "x_y_correlations_": 46, "significant_mask_": 46, "had": [46, 108, 139, 141], "pos_mask_": 46, "pos_significant_mask_": 46, "neg_significant_mask_": 46, "used_significant_mask_": 46, "threhsold": 46, "mask": [46, 48, 52], "per": [46, 88, 92, 99, 106, 121, 129], "get_feature_names_out": [46, 47, 49, 50, 51, 52], "input_featur": [46, 47, 49, 50, 51, 52], "x_types_renam": 47, "Not": [47, 48, 49, 50, 51, 113], "here": [47, 48, 49, 51, 90, 91, 92, 99, 101, 114, 120, 121, 125, 133, 138, 139, 140], "kept": [47, 49, 50, 51, 52, 114], "jutransform": [47, 48, 49, 50, 51, 52], "get_support": [48, 52], "support": [48, 52, 58, 79, 88, 92, 93, 99, 102, 107, 108, 109, 121, 129, 130, 132, 133, 139, 140, 141], "support_mask": [48, 52], "numpi": [48, 52, 88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 117, 124, 127, 128, 129, 132, 133], "keep": [49, 91, 93, 96, 100, 102, 106, 110, 113, 114, 121, 124, 125, 130, 133, 140], "wrapper": [50, 58, 141], "around": 50, "directli": [50, 91, 125, 134], "feature_names_in_": 50, "undefin": [50, 120], "x0": 50, "x1": 50, "n_features_in_": 50, "model_confound": [52, 59, 114, 128], "keep_confound": [52, 114], "specif": [52, 93, 99, 101, 114, 128, 130, 131, 132, 135, 136, 137], "subtract": [52, 59, 114, 119], "regular": [52, 107, 108, 114, 119, 130, 136], "express": [52, 114, 136], "syntax": [52, 114], "linearregress": [52, 59, 114, 119, 127, 128], "By": [52, 59, 99, 100, 101, 114, 119, 127, 130, 132, 139], "residu": [52, 59, 114, 128], "fall": [52, 59, 114, 127, 139], "under": [52, 59, 114, 117, 123, 124, 139, 140], "togeth": [52, 89, 90, 105, 106, 114, 117, 119], "deconfound": [52, 114], "transformer_nam": [55, 63], "transformer_cl": [55, 63], "arg": [57, 60, 69, 70, 71, 72], "_model_": 58, "transform_target": 58, "confoundremov": [59, 114, 119, 128, 141], "notifi": [60, 65], "with_traceback": 60, "except": [60, 67, 121, 124], "tb": 60, "__traceback__": 60, "fname": 65, "output_format": 65, "debug": [65, 135], "info": [65, 66, 88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 121, 127, 128, 130, 132, 133, 134, 138, 139, 140], "messag": [65, 67, 73, 121, 127, 141], "pathlib": 65, "path": 65, "filenam": [65, 121], "stdout": 65, "file": [65, 91, 94, 97, 103, 111, 115, 118, 121], "statement": 65, "append": [65, 100, 113, 126, 129, 132], "entri": [65, 140], "doc": [65, 90, 121, 126, 141], "python": [65, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 121, 124, 126, 129, 130, 133, 141], "dev": [65, 121, 126], "howto": 65, "asctim": 65, "levelnam": 65, "msg": [67, 73], "klass": [67, 130], "subclass": [67, 73], "fashion": [69, 70, 71, 72, 128], "juestim": 72, "categori": 73, "width": [74, 93, 96, 102, 110, 113], "800": [74, 88, 100, 109], "height": 74, "600": [74, 90], "ci": [74, 113, 126], "95": [74, 93, 96, 101, 102, 106, 110, 113, 129], "plot": [74, 88, 89, 90, 96, 99, 100, 101, 106, 113, 125, 129, 138], "panel": [74, 96, 123, 124, 138], "dashboard": 74, "confid": [74, 113, 132], "interv": [74, 113], "dynam": [75, 124, 125], "prepar": [75, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 107, 108, 109, 113, 117, 125, 127, 128, 132, 133], "visual": [75, 99, 124, 125, 129, 135, 137], "config": [75, 120, 125, 141], "depend": [79, 86, 91, 92, 99, 107, 108, 109, 121, 125, 129, 132, 138, 141], "instal": [79, 86, 121, 123, 125, 126, 138, 141], "protocol": 85, "experiment": [86, 130], "futur": [86, 88, 90, 100, 113, 129, 130, 132], "complet": [86, 121], "particularli": [86, 129, 139], "reli": 86, "beta": 86, "releas": [86, 124, 125, 141], "packag": [86, 90, 93, 100, 113, 121, 123, 124, 129, 130, 133], "viz": [86, 96, 124, 125, 138], "basic": [87, 121, 130, 136, 137, 139, 140, 141], "galleri": [87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 116, 117, 121], "sphinx": [87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 116, 117, 121, 141], "end": [88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 124, 141], "download": [88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117], "code": [88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 121, 125, 128, 140, 141], "iri": [88, 93, 96, 100, 102, 110, 113, 121, 130, 136, 139, 140], "vector": [88, 92, 93, 99, 102, 107, 108, 109, 121, 130, 132, 133, 139, 140], "machin": [88, 91, 92, 93, 99, 102, 107, 108, 109, 121, 125, 127, 128, 130, 132, 135, 136, 137, 138, 140], "classifi": [88, 92, 93, 99, 100, 102, 107, 108, 109, 110, 113, 121, 132, 139, 140], "heatmap": [88, 89, 106], "accuraci": [88, 93, 108, 113, 128, 129, 138, 139], "confus": [88, 101, 139, 140], "matrix": 88, "author": [88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 121, 127], "shammi": [88, 89, 90, 92, 99, 101, 106, 113, 117, 125, 128, 141], "fz": [88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 127], "juelich": [88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 127], "de": [88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 127, 128], "federico": [88, 89, 90, 91, 92, 93, 96, 99, 100, 102, 106, 107, 108, 109, 110, 113, 117, 125], "raimondo": [88, 89, 90, 91, 92, 93, 96, 99, 100, 102, 106, 107, 108, 109, 110, 113, 117, 125, 141], "f": [88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 106, 107, 108, 109, 110, 113, 117, 127, 128, 130, 133], "licens": [88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 121, 127], "agpl": [88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 127], "seaborn": [88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 106, 107, 108, 109, 110, 113, 121, 124, 125, 129, 130, 132, 136, 139, 140], "sn": [88, 89, 90, 99, 100, 101, 106, 113, 129, 132], "matplotlib": [88, 89, 90, 99, 100, 101, 106, 113, 125, 129], "pyplot": [88, 89, 90, 99, 100, 101, 106, 113, 129], "plt": [88, 89, 90, 99, 100, 101, 106, 113, 129], "load_dataset": [88, 91, 92, 93, 96, 99, 100, 102, 107, 108, 109, 110, 113, 121, 130, 132, 136, 139, 140], "model_select": [88, 89, 90, 92, 96, 99, 102, 105, 106, 113, 129, 132, 138, 139, 141], "train_test_split": [88, 89, 105, 106], "repeatedkfold": [88, 132], "confusion_matrix": 88, "configure_log": [88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 117, 121, 132, 133], "home": [88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 117, 127, 130, 132, 133, 138], "runner": [88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 117, 127, 130, 132, 133, 138], "py": [88, 89, 90, 91, 92, 93, 94, 96, 97, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 117, 118, 121, 127, 129, 130, 132, 133, 138], "66": [88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 117, 132, 133], "__version__": [88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 117, 132, 133], "deprec": [88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 117, 121, 129, 132, 133, 141], "markupsaf": [88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 117, 132, 133], "detect": [88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 117, 120, 130, 132, 133, 135, 138, 139, 140, 141], "importlib": [88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 117, 132, 133], "vstring": [88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 117, 132, 133], "getattr": [88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 117, 132, 133], "2024": [88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 125, 127, 128, 130, 132, 133, 134, 138, 139, 140], "16": [88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 125, 127, 128, 130, 132, 133, 134, 138, 139, 140], "18": [88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 107, 108, 109, 127, 128], "793": [88, 109, 130], "lib": [88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 117, 129, 130, 132, 133], "26": [88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 117, 132, 133], "14": [88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 117, 128, 132, 133, 138], "dev5": [88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 117, 125, 132, 133], "794": [88, 109, 130], "load": [88, 89, 90, 105, 106, 107, 108, 109, 113, 114, 117, 121, 130, 134, 136, 139], "df_iri": [88, 93, 96, 100, 102, 110, 113, 121], "sepal_length": [88, 93, 96, 100, 102, 110, 113, 130, 136, 139, 140], "sepal_width": [88, 93, 96, 100, 102, 110, 113, 130, 136, 139, 140], "petal_length": [88, 93, 96, 100, 102, 110, 113, 130, 136, 139, 140], "speci": [88, 93, 96, 100, 102, 110, 113, 121, 130, 132, 136, 139, 140], "train_iri": 88, "test_iri": 88, "200": [88, 101, 102, 113, 127, 129, 132, 133], "we": [88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 120, 121, 123, 124, 125, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140], "model_iri": [88, 100], "797": [88, 109], "expand": [88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 120, 127, 128, 130, 132, 133, 134, 138, 139, 140], "treat": [88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 107, 108, 109, 113, 117, 127, 132, 133], "509": [88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 107, 108, 109, 113, 117, 127, 132, 133], "warn_with_log": [88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 107, 108, 109, 113, 117, 127, 132, 133, 138], "798": [88, 100, 109], "__continu": [88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 113, 114, 117, 127, 130, 132, 134, 138, 139, 140], "799": [88, 100, 109], "120": 88, "versicolor": [88, 93, 96, 100, 102, 110, 113, 121, 130, 139, 140], "40": [88, 89, 90, 132], "virginica": [88, 93, 96, 100, 102, 110, 113, 121, 130, 139, 140], "setosa": [88, 136, 139, 140], "count": [88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 129, 130, 132, 134, 138, 139, 140], "dtype": [88, 89, 90, 92, 93, 96, 99, 100, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 130, 132, 133, 134, 138, 139, 140], "int64": [88, 92, 93, 96, 99, 100, 102, 107, 108, 109, 110, 113, 130, 132, 138, 139, 140], "scheme": [88, 89, 90, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 127, 128, 130, 132, 133, 134, 135, 138, 139, 140, 141], "incl": [88, 89, 90, 92, 99, 100, 101, 102, 105, 106, 107, 108, 109, 114, 117, 127, 130, 132, 133, 139], "multi": [88, 91, 138, 139, 140], "head": [88, 89, 90, 91, 92, 99, 105, 106, 107, 108, 109, 113, 114, 117, 134, 136, 138, 140], "score_tim": [88, 89, 102, 105, 106, 114, 117, 128, 134, 139, 140], "test_accuraci": [88, 93, 113, 138], "n_train": [88, 89, 114, 117, 128], "n_test": [88, 89, 114, 117, 128], "cv_mdsum": [88, 89, 102, 105, 106, 114, 117, 128, 134, 139, 140], "004544": 88, "002646": 88, "916667": 88, "96": [88, 101, 102, 132, 141], "24": [88, 124, 141], "fa5ab7a2b930761687a8e82d9971ebca": 88, "004472": 88, "002649": 88, "833333": 88, "004483": 88, "002594": [88, 134], "958333": 88, "004458": 88, "002605": 88, "004641": 88, "002600": 88, "now": [88, 89, 90, 91, 93, 96, 99, 100, 102, 105, 106, 107, 108, 109, 113, 114, 117, 121, 128, 129, 130, 132, 133, 136, 138, 139, 140], "df_accuraci": 88, "set_index": [88, 89, 91, 106, 113], "unstack": [88, 89, 106], "index": [88, 89, 90, 91, 92, 99, 101, 105, 106, 107, 108, 109, 113, 117, 121, 125, 132], "875000": 88, "750000": 88, "000000": [88, 89, 90, 96, 101, 105, 106, 113, 114, 117, 134, 138], "791667": 88, "font_scal": [88, 89], "fig": [88, 89, 90, 99, 100, 101, 106, 129], "ax": [88, 89, 90, 99, 100, 101, 106, 129], "subplot": [88, 89, 90, 99, 100, 101, 106, 129], "figsiz": [88, 89, 90, 99, 100, 101, 106, 129], "7": [88, 89, 90, 91, 92, 99, 101, 102, 106, 121, 125, 129, 132, 133, 135, 136, 139, 141], "cmap": [88, 89, 106], "ylgnbu": [88, 89, 106], "titl": [88, 89, 106, 121], "text": [88, 89, 99, 101, 106, 121, 129], "our": [88, 91, 92, 93, 99, 101, 110, 114, 121, 125, 128, 129, 130, 132, 133, 135, 136, 138, 139, 140], "annot": [88, 89], "cm": 88, "uniqu": [88, 92, 99, 130, 132], "9": [88, 89, 91, 92, 99, 101, 102, 106, 114, 128, 130, 132, 136, 139, 140], "8": [88, 91, 92, 99, 102, 105, 106, 124, 128, 129, 132, 134, 135, 139, 140, 141], "let": [88, 89, 90, 91, 92, 99, 101, 105, 106, 107, 108, 113, 114, 117, 128, 129, 130, 132, 133, 134, 136, 140], "anoth": [88, 91, 101, 117, 129, 133, 140], "cm_sum": 88, "keepdim": 88, "cm_perc": 88, "astyp": 88, "100": [88, 93, 96, 100, 101, 102, 110, 113, 128, 130, 132], "empty_lik": 88, "nrow": 88, "ncol": 88, "rang": [88, 91, 101, 119, 127, 133], "j": [88, 128], "c": [88, 91, 92, 99, 107, 108, 109, 123, 124, 130, 132, 133, 140], "els": 88, "1f": [88, 89], "00_start": [88, 90], "plot_cm_acc_multiclass": [88, 94], "104": 88, "deprecationwarn": 88, "convers": 88, "ndim": 88, "extract": [88, 91, 92, 99, 132], "singl": [88, 120, 132, 138], "your": [88, 91, 121, 124, 125, 127, 128, 129, 132, 137, 140], "25": [88, 89, 90, 91, 101, 105, 106, 114, 117, 134, 138], "fmt": [88, 89], "total": [88, 89, 90, 91, 92, 93, 94, 96, 97, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 117, 118, 127, 128, 129, 130, 132, 133, 134, 136, 138, 139, 140], "script": [88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 121, 126, 127, 128, 129, 130, 132, 133, 134, 136, 138, 139, 140], "minut": [88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 127, 128, 129, 130, 132, 133, 134, 136, 138, 139, 140], "479": [88, 94], "sourc": [88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117], "jupyt": [88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 123, 139], "notebook": [88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 123, 139], "ipynb": [88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 117], "diabet": [89, 90, 105, 106, 117, 134], "ridg": [89, 105, 106, 117, 119], "load_diabet": [89, 90, 105, 106, 114, 117, 134], "mean_absolute_error": [89, 106], "52": [89, 90], "341": 89, "return_x_i": [89, 90, 105, 106, 114, 117, 134], "as_fram": [89, 90, 105, 106, 114, 117, 134], "ten": [89, 90, 105, 106, 117], "ag": [89, 90, 91, 105, 106, 114, 117, 134], "sex": [89, 90, 105, 106, 114, 117, 128, 132, 134], "bodi": [89, 90, 105, 106, 117], "mass": [89, 90, 105, 106, 117], "averag": [89, 90, 105, 106, 114, 117, 127, 129, 138], "blood": [89, 90, 105, 106, 114, 117], "pressur": [89, 90, 105, 106, 114, 117], "six": [89, 90, 105, 106, 117], "serum": [89, 90, 105, 106, 117], "measur": [89, 90, 105, 106, 114, 117, 128, 129, 130, 132], "s1": [89, 90, 91, 92, 99, 105, 106, 114, 117, 134], "s6": [89, 90, 91, 92, 99, 105, 106, 114, 117, 134], "patient": [89, 90, 105, 106, 117], "quantit": [89, 90, 105, 106, 117], "diseas": [89, 90, 105, 106, 117], "progress": [89, 90, 105, 106, 117, 121], "year": [89, 90, 105, 106, 117], "baselin": [89, 90, 105, 106, 117], "interest": [89, 90, 93, 105, 106, 113, 117, 137, 139, 140], "bmi": [89, 90, 105, 106, 114, 117, 134], "s4": [89, 90, 91, 92, 99, 105, 106, 114, 117, 134], "s5": [89, 90, 91, 92, 99, 105, 106, 107, 108, 109, 114, 117, 134], "038076": [89, 90, 105, 106, 114, 117, 134], "050680": [89, 90, 105, 106, 114, 117, 134], "061696": [89, 90, 105, 106, 114, 117, 134], "002592": [89, 90, 105, 106, 114, 117, 134], "019907": [89, 90, 105, 106, 114, 117, 134], "017646": [89, 90, 105, 106, 114, 117, 134], "001882": [89, 90, 105, 106, 114, 117, 134], "044642": [89, 90, 105, 106, 114, 117, 134], "051474": [89, 90, 105, 106, 114, 117, 134], "039493": [89, 90, 105, 106, 114, 117, 134], "068332": [89, 90, 105, 106, 114, 117, 134], "092204": [89, 90, 105, 106, 114, 117, 134], "085299": [89, 90, 105, 106, 114, 117, 134], "044451": [89, 90, 105, 106, 114, 117, 134], "002861": [89, 90, 105, 106, 114, 117, 134], "025930": [89, 90, 105, 106, 114, 117, 134], "089063": [89, 90, 105, 106, 114, 117, 134], "011595": [89, 90, 105, 106, 114, 117, 134], "034309": [89, 90, 105, 106, 114, 117, 134], "022688": [89, 90, 105, 106, 114, 117, 134], "009362": [89, 90, 105, 106, 114, 117, 134], "005383": [89, 90, 105, 106, 114, 117, 134], "036385": [89, 90, 105, 106, 114, 117, 134], "031988": [89, 90, 105, 106, 114, 117, 134], "046641": [89, 90, 105, 106, 114, 117, 134], "442": [89, 90, 105, 106, 114, 117, 130, 134], "152": [89, 90, 105, 106, 114, 117, 134, 140, 141], "133484": [89, 90, 105, 106, 114, 117, 134], "std": [89, 90, 101, 105, 106, 114, 117, 128, 134], "77": [89, 90, 105, 106, 114, 117, 132, 134, 138, 141], "093005": [89, 90, 105, 106, 114, 117, 134], "min": [89, 90, 101, 105, 106, 114, 117, 134], "87": [89, 90, 105, 106, 114, 117, 134], "140": [89, 90, 93, 105, 106, 114, 117, 130, 132, 134], "500000": [89, 90, 105, 106, 114, 117, 134], "75": [89, 90, 93, 96, 101, 105, 106, 114, 117, 132, 134], "211": [89, 90, 96, 105, 106, 113, 114, 117, 132, 134], "max": [89, 90, 101, 105, 106, 114, 117, 119, 134], "346": [89, 90, 105, 106, 114, 117, 134], "float64": [89, 90, 93, 96, 101, 105, 106, 110, 114, 117, 127, 128, 133, 134], "combin": [89, 90, 91, 105, 106, 113, 117, 130, 140], "data_diabet": [89, 105, 106, 117, 134], "concat": [89, 90, 100, 105, 106, 113, 117, 134], "bp": [89, 90, 105, 106, 114, 117, 134], "s2": [89, 90, 91, 92, 99, 105, 106, 114, 117, 134], "s3": [89, 90, 91, 92, 99, 105, 106, 114, 117, 134], "calcul": 89, "heat": 89, "corr": [89, 106], "xticklabel": 89, "yticklabel": 89, "train_diabet": [89, 105, 106], "test_diabet": [89, 105, 106], "neg_mean_absolute_error": [89, 90, 101, 105, 117, 139], "539": 89, "540": 89, "541": 89, "309": [89, 105, 106], "542": 89, "test_scor": [89, 90, 92, 93, 96, 99, 105, 106, 107, 108, 109, 110, 114, 117, 128, 130, 139], "004587": 89, "002371": 89, "48": [89, 91, 93], "783874": 89, "247": [89, 132, 139, 141], "62": [89, 132], "b10eef89b4192178d482d7a1587a248a": [89, 105, 106, 114, 117, 128, 134, 139, 140], "004495": 89, "002309": 89, "47": [89, 117, 130, 141], "573568": 89, "004453": 89, "002311": 89, "37": [89, 132], "617474": 89, "004442": 89, "002300": 89, "686852": 89, "004410": 89, "002268": 89, "45": [89, 130], "558655": 89, "248": [89, 139], "61": 89, "444084441470615": 89, "mae": [89, 106], "df_mae": [89, 106], "coef_": [89, 114], "sort_valu": 89, "ascend": 89, "inplac": 89, "barh": 89, "color": [89, 90, 99, 113, 129], "blue": 89, "red": 89, "xlabel": [89, 106], "249999999999986": 89, "scatterplot": [89, 99, 101, 106], "v": [89, 106, 126, 129, 131, 140], "2f": [89, 106], "corrcoef": [89, 106], "set_styl": [89, 90, 106], "darkgrid": [89, 90, 106], "scatter": [89, 101, 106], "xmin": [89, 106], "xmax": [89, 106], "get_xlim": [89, 99, 106], "ymin": [89, 106], "ymax": [89, 106], "get_ylim": [89, 99, 106], "ylabel": [89, 106, 129], "01": [89, 94, 101, 103, 106, 107, 108, 111, 125, 127, 130, 132, 133], "verticalalign": [89, 106], "top": [89, 106, 125, 139], "horizontalalign": [89, 106], "right": [89, 106, 107, 108, 109, 129, 130], "fontsiz": [89, 106], "scale": [89, 106, 107, 108, 119, 130, 132, 140], "649999999999999": 89, "347": 89, "35": [89, 91, 128, 138], "673": [89, 94, 127], "plot_example_regress": [89, 94], "leonard": [90, 101, 113, 125, 127], "sass": [90, 101, 113, 125, 127], "l": [90, 91, 92, 99, 101, 105, 107, 108, 109, 113, 127], "51": [90, 105, 130], "450": [90, 130], "outlier": 90, "data_df": 90, "new_df": 90, "145": [90, 106], "150": [90, 128, 132, 139, 140], "590": [90, 108], "580": 90, "597": 90, "595": 90, "reset_index": [90, 91, 92, 99, 107, 108, 109, 113], "plot_stratified_kfold_reg": [90, 94], "settingwithcopywarn": 90, "try": [90, 92, 93, 96, 99, 102, 108, 110, 129, 130, 139], "slice": 90, "loc": 90, "row_index": 90, "col_index": 90, "caveat": 90, "pydata": 90, "user_guid": 90, "view": [90, 121], "versu": 90, "idea": [90, 135], "chosen": 90, "coupl": 90, "histrogram": 90, "displot": 90, "60": 90, "20": [90, 93, 96, 102, 113, 117, 127, 128, 129, 132, 133, 134, 138, 140], "opt": [90, 93, 100, 113, 129, 130, 132, 133], "hostedtoolcach": [90, 93, 100, 113, 129, 130, 133], "15": [90, 91, 92, 93, 99, 100, 101, 102, 113, 124, 128, 129, 130, 132, 133], "x64": [90, 93, 100, 113, 129, 130, 133], "python3": [90, 93, 100, 113, 129, 130, 133], "site": [90, 93, 100, 113, 129, 130, 133], "_oldcor": [90, 100, 113, 129], "1119": [90, 100, 113, 129], "futurewarn": [90, 100, 113, 129, 132], "use_inf_as_na": [90, 100, 113, 129], "inf": [90, 100, 113, 129], "nan": [90, 100, 113, 129, 132], "option_context": [90, 100, 113, 129], "mode": [90, 100, 113, 129], "axisgrid": 90, "facetgrid": 90, "0x7fb8a9ff6ce0": 90, "histogram": 90, "abov": [90, 113, 128, 130, 132, 139], "uniformli": [90, 129], "skew": 90, "toward": 90, "lower": [90, 129], "even": [90, 114, 130, 139, 140], "low": [90, 101, 109, 119, 127, 130], "give": [90, 119, 128, 130, 137, 138, 139], "good": [90, 93, 108, 124, 129, 137, 138], "granular": 90, "cv_stratifi": [90, 92], "linear": [90, 96, 107, 108, 109, 114, 127, 128, 130, 132, 133, 140], "scores_strat": 90, "linreg": [90, 114, 119, 127, 128], "961": 90, "962": 90, "963": 90, "964": 90, "449": [90, 130], "_split": [90, 129], "776": [90, 127, 129], "popul": [90, 113, 129], "member": [90, 129], "011": [90, 133], "012": [90, 133], "013": [90, 133], "014": [90, 133], "compar": [90, 96, 113, 125, 128, 130, 135, 138, 139], "With": [90, 129, 132, 139], "df_score": 90, "boxplot": [90, 113], "higher": [90, 113, 129], "were": [90, 91, 92, 99, 100, 113, 132, 139], "swarmplot": [90, 100], "1075": [90, 100, 129], "length": [90, 93, 96, 100, 102, 110, 113, 129], "get_group": [90, 100, 129], "silenc": [90, 100, 129], "data_subset": [90, 100, 129], "grouped_data": [90, 100, 129], "pd_kei": [90, 100, 129], "774": [90, 94], "fmri": [91, 92, 99, 107, 108, 109], "waskom": [91, 92, 99, 107, 108, 109], "m": [91, 92, 99, 107, 108, 109, 121, 126, 140], "frank": [91, 92, 99, 107, 108, 109], "wagner": [91, 92, 99, 107, 108, 109], "adapt": [91, 92, 99, 107, 108, 109], "engag": [91, 92, 99, 107, 108, 109], "cognit": [91, 92, 99, 107, 108, 109], "cerebr": [91, 92, 99, 107, 108, 109], "cortex": [91, 92, 99, 107, 108, 109], "similar": [91, 130, 133, 139, 140], "excel": [91, 129], "spreadsheet": 91, "csv": 91, "ideal": 91, "everyth": [91, 137], "tabul": 91, "organis": [91, 128], "demograph": [91, 128], "diagnost": 91, "manual": [91, 123, 138, 140], "edit": 91, "sure": [91, 99, 121, 126, 128, 129, 130], "readi": [91, 138, 140], "do": [91, 99, 101, 106, 107, 108, 113, 114, 117, 119, 121, 125, 126, 128, 129, 130, 133, 135, 136, 137, 138, 139, 140], "howev": [91, 96, 99, 100, 101, 114, 120, 123, 124, 128, 129, 130, 133, 134, 135, 138, 139, 140, 141], "prone": [91, 135, 138], "fortun": [91, 129, 130], "tool": [91, 120, 124, 132, 138], "deal": [91, 127, 136], "task": [91, 99, 114, 130, 134], "collect": [91, 113, 132], "start": [91, 121, 122, 125, 129, 130, 132, 133, 134, 137, 138, 140], "df_fmri": [91, 92, 99, 107, 108, 109], "subject": [91, 92, 99, 107, 108, 109, 129], "timepoint": [91, 92, 99, 107, 108, 109], "event": [91, 92, 99, 107, 108, 109], "region": [91, 92, 99, 107, 108, 109], "signal": [91, 92, 99, 107, 108, 109], "s13": [91, 92, 99, 107, 108, 109], "stim": [91, 92, 99, 107, 108, 109], "pariet": [91, 92, 99, 107, 108, 109], "017552": [91, 92, 99, 107, 108, 109], "080883": [91, 92, 99, 107, 108, 109], "s12": [91, 92, 99, 107, 108, 109], "081033": [91, 92, 99, 107, 108, 109], "s11": [91, 92, 99, 107, 108, 109], "046134": [91, 92, 99, 107, 108, 109], "s10": [91, 92, 99, 107, 108, 109], "037970": [91, 92, 99, 107, 108, 109], "long": [91, 113], "wide": 91, "seen": [91, 140], "pivot": [91, 92, 99, 107, 108, 109], "reshap": [91, 99], "tabl": [91, 92, 99], "becom": [91, 135, 140], "identifi": [91, 93, 127, 128, 132, 138], "rule": [91, 119, 129, 140], "duplic": [91, 120], "frontal": [91, 92, 99, 107, 108, 109], "s0": [91, 92, 99, 107, 108, 109], "cue": [91, 92, 99, 107, 108, 109], "007766": [91, 107, 108, 109], "006899": [91, 107, 108, 109], "021452": [91, 107, 108, 109], "039327": [91, 107, 108, 109], "016440": [91, 107, 108, 109], "000300": [91, 107, 108, 109], "021054": [91, 107, 108, 109], "035735": [91, 107, 108, 109], "024296": [91, 107, 108, 109], "033220": [91, 107, 108, 109], "subtl": 91, "For": [91, 93, 96, 101, 106, 114, 119, 120, 121, 123, 124, 127, 129, 130, 132, 133, 134, 136, 139, 140], "place": [91, 141], "scan": 91, "ll": [91, 106], "23": [91, 125, 128, 130], "31": [91, 138], "29": [91, 138], "43": [91, 117], "28": [91, 133], "34": [91, 138], "scanner": 91, "6": [91, 92, 96, 99, 100, 101, 102, 109, 114, 127, 129, 130, 132, 135, 136, 139], "b": [91, 121, 130, 140], "df_meta": 91, "s7": [91, 92, 99], "s8": [91, 92, 99], "s9": [91, 92, 99], "11": [91, 92, 99, 102, 108, 127, 128, 132, 133, 138, 139], "13": [91, 92, 99, 102, 114, 124, 128], "036739": 91, "131641": 91, "17": [91, 92, 99, 101, 102, 125, 130, 138], "004900": 91, "036362": 91, "030099": 91, "121574": 91, "000643": 91, "051040": 91, "009959": 91, "103513": 91, "532": [91, 92, 99, 107, 108, 109], "frame": 91, "suppos": [91, 93, 128], "dure": [91, 92, 99, 124, 127, 128, 130, 132], "There": [91, 129, 135, 137, 140], "009038": 91, "009642": 91, "047859": 91, "026727": 91, "085040": 91, "086399": 91, "069775": 91, "070558": 91, "115321": 91, "154058": 91, "010535": 91, "061817": 91, "034386": 91, "130267": 91, "002170": 91, "048007": 91, "038257": 91, "134828": 91, "004290": 91, "035395": 91, "266": [91, 92, 99, 107, 108, 109], "sinc": [91, 96, 101, 105, 107, 125, 130, 140], "previou": [91, 96, 100, 101, 121, 133, 138, 139, 140, 141], "multiindex": 91, "trick": 91, "underscor": 91, "_": [91, 100, 113, 121], "frontal_cu": 91, "frontal_stim": 91, "parietal_cu": 91, "parietal_stim": 91, "898": [91, 94, 108], "run_combine_panda": [91, 94], "groupkfold": 92, "kimia": 92, "nazarzadeh": 92, "necessari": [92, 123, 128, 133], "librari": [92, 123, 125, 130], "stratifiedgroupkfold": 92, "49": [92, 93, 128], "304": 92, "infer": [92, 99], "studi": [92, 99, 128, 129, 130], "condit": [92, 99], "groupbi": [92, 99], "1064": [92, 99], "exactli": [92, 99, 132, 140], "rf": [92, 96, 100, 101, 110, 113, 119, 130, 133, 138], "323": [92, 138], "324": [92, 138], "325": 92, "326": 92, "327": [92, 128], "6841826838300122": 92, "951": 92, "952": 92, "953": 92, "954": 92, "6710526315789473": 92, "317": 92, "318": 92, "319": [92, 138], "320": 92, "6672932330827068": 92, "378": [92, 94, 110], "run_grouped_cv": [92, 94], "656": 93, "657": 93, "three": [93, 96, 100, 102, 110, 113, 121, 125, 130, 138, 139], "isin": [93, 96, 100, 102, 110, 113, 121, 130], "sepal": [93, 96, 102, 110, 113, 136, 140], "petal": [93, 96, 102, 110, 113, 136, 140], "043": [93, 140], "044": [93, 140], "045": 93, "046": 93, "047": [93, 117], "048": [93, 117], "90": [93, 96, 132, 138], "70": [93, 96], "assess": [93, 96, 128, 132], "unbalanc": [93, 96], "df_unbalanc": [93, 96], "value_count": [93, 96], "30": [93, 96, 99, 101, 128, 138], "account": [93, 128], "imbal": 93, "suitabl": [93, 124], "balanced_accuraci": [93, 96, 139], "balanced_accuracy_scor": 93, "42": [93, 96, 99, 107, 108, 109, 113, 117, 129, 132, 138, 139], "test_balanced_accuraci": [93, 96], "089": 93, "090": 93, "091": 93, "80": [93, 96, 128, 132, 138], "092": 93, "_classif": 93, "2480": 93, "8625": 93, "8678571428571429": 93, "u": [93, 100, 113, 114, 124, 128, 132, 138, 139], "correctli": 93, "precis": [93, 139], "ratio": 93, "tp": 93, "precision_scor": 93, "137": [93, 130], "138": [93, 130, 132], "139": [93, 130, 132], "141": [93, 130], "536": [93, 94], "run_simple_binary_classif": [93, 94], "00": [94, 97, 101, 103, 105, 109, 110, 111, 115, 118, 132, 133, 138], "04": [94, 107, 132], "738": 94, "execut": [94, 97, 103, 111, 115, 118, 120, 121], "auto_examples_00_start": 94, "mb": [94, 97, 103, 111, 115, 118], "At": [96, 125, 135, 140], "statist": [96, 101, 113, 125, 137, 139], "repeatedstratifiedkfold": [96, 102, 138, 139], "corrected_ttest": [96, 138], "53": 96, "184": [96, 128, 130, 138], "187": 96, "188": [96, 132], "189": [96, 132, 133], "190": [96, 132, 133], "roc_auc": [96, 113, 138, 139], "scores1": [96, 123, 130, 138], "231": [96, 141], "232": [96, 141], "233": [96, 141], "234": [96, 141], "235": [96, 101, 103, 128, 141], "scores2": [96, 123, 130, 138], "519": 96, "520": 96, "521": 96, "522": 96, "third": [96, 139], "kernel": [96, 107, 108, 109, 128, 130, 132, 133, 140], "scores3": [96, 123, 130, 138], "svm__kernel": [96, 108, 130, 132], "svm_linear": 96, "56": [96, 102, 130, 132], "207": [96, 132], "208": [96, 113], "209": [96, 113, 132], "210": [96, 113], "stats_df": [96, 138], "model_2": [96, 133, 138], "val": [96, 138], "175075": 96, "062567": 96, "895662": 96, "151390": 96, "782741": 96, "test_roc_auc": [96, 113, 138], "108944": 96, "835331": 96, "236153": 96, "685092": 96, "669010": 96, "324331": 96, "viewer": 96, "plot_scor": [96, 123, 138], "uncom": [96, 138], "line": [96, 121, 129, 138], "read": [96, 100, 121, 125, 126, 129, 135, 137, 138, 140], "holoviz": [96, 138], "getting_start": [96, 138], "build_app": [96, 138], "deploi": [96, 132, 138], "look": [96, 99, 101, 106, 114, 119, 127, 129, 130, 132, 133, 135, 136, 137, 139, 140], "interact": [96, 99, 125, 132, 138], "zoom": [96, 138], "hover": [96, 138], "button": [96, 138], "435": [96, 97, 139], "plot_simple_model_comparison": [96, 97], "03": [97, 101, 103, 111, 125], "auto_examples_01_model_comparison": 97, "demonstr": [98, 121, 133, 139], "analys": [99, 100, 128], "groupshufflesplit": 99, "58": [99, 138], "587": [99, 108], "605": 99, "606": 99, "607": [99, 105], "608": [99, 105], "609": [99, 105], "7218303650149884": 99, "decod": [99, 128], "claim": [99, 113, 129], "acquir": 99, "randomli": 99, "could": [99, 101, 114, 125, 127, 132, 136, 138, 139, 140], "characterist": 99, "unseen": [99, 129, 135], "whom": 99, "later": [99, 102, 121, 138], "666": 99, "667": 99, "668": 99, "669": 99, "7210526315789474": 99, "part": [99, 123, 125, 127, 129, 135, 138, 140], "raw": [99, 101, 140], "hue": [99, 113], "set_titl": [99, 100, 101, 129], "pre_x": 99, "pre_df": 99, "join": 99, "parietal__": 99, "frontal__": 99, "noth": [99, 130, 139], "standardscal": [99, 109, 119, 130, 132, 134, 139, 140], "seem": [99, 107, 108, 109, 113, 130, 137, 138, 139], "quit": [99, 124, 127, 132], "linearli": 99, "clf": 99, "figur": [99, 121], "xlim": 99, "ylim": 99, "xx": 99, "linspac": [99, 129], "yy": 99, "meshgrid": 99, "xy": 99, "vstack": 99, "ravel": 99, "xy_df": 99, "contour": 99, "alpha": [99, 127, 129], "linestyl": [99, 129], "boundari": [99, 130], "440": [99, 103, 130], "plot_groupcv_inspect_svm": [99, 103], "57": [100, 138], "102": [100, 130], "103": [100, 130], "105": [100, 132, 141], "106": 100, "107": 100, "108": [100, 132, 141], "109": [100, 132], "intern": [100, 132, 133, 139, 140, 141], "caution": [100, 129], "proper": [100, 113, 126, 137], "randomforestclassifi": [100, 119, 130], "understand": [100, 114, 125, 128, 132, 137, 138, 140], "to_plot": 100, "feature_importances_": [100, 113], "barplot": 100, "tight_layout": [100, 113], "review": [100, 121], "wander": 100, "about": [100, 121, 125, 128, 129, 132, 133, 135, 137, 138, 139, 140], "entir": [100, 139, 140], "801": [100, 109], "802": [100, 109], "i_fold": [100, 113], "enumer": [100, 113], "this_import": [100, 113], "345": [100, 103], "plot_inspect_random_forest": [100, 103], "make_regress": [101, 127, 128, 133], "normal": [101, 114, 119, 121, 128, 129, 140, 141], "reduct": 101, "59": 101, "201": 101, "n_inform": 101, "nois": [101, 128], "first_two": 101, "determin": [101, 130, 140], "belong": [101, 114], "x_to_zscor": 101, "summari": [101, 121], "111790": 101, "141618": 101, "023682": 101, "167718": 101, "686170": 101, "977322": 101, "972988": 101, "087946": 101, "895011": 101, "79": [101, 121], "741431": 101, "069985": 101, "772593": 101, "552990": 101, "659172": 101, "204": 101, "293317": 101, "751257": 101, "484100": 101, "759419": 101, "688891": 101, "64": [101, 132], "724008": 101, "206729": 101, "194442": 101, "028152": 101, "174160": 101, "789944": 101, "421885": 101, "724302": 101, "772156": 101, "408321": 101, "392804": 101, "943621": 101, "256723": 101, "383145": 101, "259309": 101, "216": 101, "221085": 101, "explicitli": [101, 107, 128, 130, 132], "declar": 101, "constructor": 101, "special": 101, "cannot": [101, 140], "tree": [101, 119], "pipeline_cr": [101, 106, 110, 114, 128, 130, 132, 133], "select_vari": [101, 119], "n_compon": [101, 106, 130, 140], "n_estim": [101, 133], "becaus": [101, 114, 128, 129, 130, 132, 135, 137, 138, 139, 140], "creator": [101, 102, 105, 106, 107, 108, 113, 114, 127, 130, 134, 139, 140], "simpli": [101, 127, 128, 129, 132, 133, 140], "did": [101, 108], "hand": [101, 121, 127, 128, 133, 136], "r2": [101, 106, 128, 139], "x_after_pca": 101, "earlier": 101, "x_after_zscor": 101, "high": [101, 109, 120, 127, 130], "pca0": 101, "pca1": [101, 106], "218": [101, 130], "__x_to_zscor": 101, "219": [101, 130], "220": [101, 130], "221": [101, 130], "222": [101, 130], "223": 101, "078319": 101, "336101": 101, "756861": 101, "596518": 101, "191895": 101, "451629": 101, "750820": 101, "958497": 101, "121426": 101, "599419": 101, "175061": 101, "081051": 101, "586593": 101, "325382": 101, "97": [101, 102, 113], "011121": 101, "024891": 101, "98": [101, 102, 129, 132], "478725": 101, "788625": 101, "99": [101, 102, 138], "893666": 101, "435353": 101, "1__": 101, "4__": 101, "013728": 101, "666996": 101, "364686": 101, "872214": 101, "118838": 101, "234740": 101, "004437": 101, "091986": 101, "309092": 101, "776631": 101, "206189": 101, "011287": 101, "099154": 101, "156690": 101, "335538": 101, "218469": 101, "049139": 101, "038198": 101, "240085": 101, "686765": 101, "deviat": [101, 128], "000000e": 101, "02": [101, 111, 132, 133], "689893e": 101, "387779e": 101, "440892e": 101, "330669e": 101, "005038e": 101, "013728e": 101, "010202e": 101, "380315e": 101, "797736e": 101, "576015e": 101, "463286e": 101, "234239e": 101, "852417e": 101, "763131e": 101, "456486e": 101, "788377e": 101, "233997e": 101, "488094e": 101, "018781e": 101, "914360e": 101, "468533e": 101, "113700e": 101, "184776e": 101, "179658e": 101, "725389e": 101, "plot_preprocess": [101, 103], "shufflesplit": 102, "740": [102, 110, 111], "743": 102, "744": 102, "745": 102, "746": [102, 127], "004415": 102, "002439": [102, 139], "42489ff0163b2f12752440a6b7ef74c7": 102, "004379": 102, "003349": 102, "005491": 102, "002487": 102, "004434": 102, "004418": 102, "002461": 102, "004422": 102, "002472": 102, "004361": 102, "002434": [102, 139], "004375": 102, "002453": 102, "004340": 102, "002449": [102, 139], "004318": 102, "002430": 102, "004460": 102, "002452": 102, "004518": [102, 139], "002442": 102, "004351": 102, "002463": 102, "004366": 102, "004363": 102, "002422": 102, "004328": 102, "002433": 102, "004330": 102, "002451": 102, "002459": 102, "19": [102, 105, 106, 107, 108, 109, 110, 113, 114, 117, 125, 127, 128, 130, 132, 133, 134, 138, 139, 140], "004402": 102, "002470": 102, "cv_predict": 102, "repeat0_p0": [102, 132], "repeat1_p0": [102, 132], "repeat2_p0": [102, 132], "repeat3_p0": 102, "_pipelin": 102, "0x7fb8aac337c0": 102, "240": [102, 103, 108], "run_binary_inspect_fold": [102, 103], "262": [103, 141], "auto_examples_02_inspect": 103, "Then": [105, 114, 126, 133, 135, 140], "lya": 105, "paa": 105, "olivero": 105, "sami": [105, 114, 125, 128, 141], "hamdan": [105, 114, 125, 128, 141], "591": 105, "target_cr": [105, 134], "target_pipeline_cr": [105, 128], "0x7fb8aa99ebf0": 105, "003348": 105, "001602": 105, "003277": 105, "001587": 105, "003327": 105, "001610": 105, "003359": 105, "001591": 105, "003222": 105, "001671": 105, "51357151914367": 105, "065": [105, 111, 130], "run_apply_to_target": [105, 111], "reduc": [106, 114, 140], "dimension": [106, 114, 127, 130, 140], "subset": [106, 130, 135, 141], "georgio": 106, "antonopoulo": 106, "kaustubh": [106, 125, 141], "r": [106, 117, 125], "patil": [106, 125, 141], "818": 106, "819": 106, "assign": [106, 121], "pca2": 106, "process": [106, 130, 136, 139, 140], "pca_feats1": 106, "pca_feats2": 106, "833": 106, "__pca1": 106, "__pca2": 106, "834": [106, 132], "__categor": [106, 134], "0x7fb8aa30bb20": 106, "835": 106, "836": 106, "837": 106, "838": 106, "013136": 106, "006000": 106, "013523": 106, "006002": 106, "013071": 106, "006010": 106, "013146": 106, "006032": 106, "013107": 106, "006020": 106, "3107976743678922": 106, "untouch": 106, "data_processed1": 106, "pca_feats1__pca0": 106, "161": [106, 132], "063175": 106, "133274": 106, "131461": 106, "039719": 106, "108111": 106, "075741": 106, "085907": 106, "054779": 106, "030464": 106, "001314": 106, "043401": 106, "033246": 106, "015491": 106, "098172": 106, "033216": 106, "032629": 106, "011824": 106, "015999": 106, "050783": 106, "032289": 106, "012577": 106, "034508": 106, "024993": 106, "067737": 106, "013504": 106, "315": 106, "045025": 106, "031454": 106, "020607": 106, "056003": 106, "010903": 106, "001078": 106, "data_processed2": 106, "pca_feats2__pca0": 106, "234716": 106, "012141": 106, "078784": 106, "006290": 106, "026190": 106, "341472": 106, "348168": 106, "269257": 106, "286067": 106, "309025": 106, "362": 106, "429": [106, 111], "run_example_pca_featset": [106, 111], "905": 107, "attempt": [107, 108], "914": [107, 132, 140], "915": [107, 140], "916": [107, 140], "917": [107, 140], "5939164168576971": [107, 108], "gamma": [107, 108, 109, 130], "But": [107, 113, 114, 129, 130, 132, 137, 139, 140], "rbf": [107, 108, 109, 130], "auto": [107, 130], "1e": [107, 108, 109, 130, 132, 133], "speed": [107, 108, 109], "973": [107, 132, 140], "974": [107, 132, 140], "001": [107, 108, 130, 132], "975": [107, 140], "svm__c": [107, 108, 109, 130, 132, 133], "976": [107, 140], "inner": [107, 108, 109, 130, 132, 133, 141], "svm__gamma": [107, 108, 109, 130, 132], "977": [107, 140], "set_column_typ": [107, 109, 130, 132, 139], "setcolumntyp": [107, 109, 130, 132, 139], "svc": [107, 109, 119, 130, 132, 139, 140], "978": 107, "979": 107, "980": 107, "7087109857168048": [107, 108], "best_params_": [107, 108, 109, 130], "best_estimator_": [107, 108], "_gamma": [107, 108], "336": [107, 111, 113], "run_hyperparameter_multiple_grid": [107, 111], "analyz": [108, 109, 132], "228": 108, "236": [108, 141], "237": [108, 132], "238": 108, "239": 108, "optim": [108, 124, 130, 132, 140], "find": [108, 109, 120, 130, 137], "best": [108, 109, 130, 140], "296": [108, 139], "297": [108, 139], "298": [108, 139], "299": 108, "300": 108, "588308940222183": 108, "much": [108, 129, 130, 132, 135], "explor": [108, 114, 132, 133], "too": [108, 130], "poli": 108, "586": 108, "588": 108, "589": 108, "lest": 108, "328": 108, "329": 108, "330": 108, "331": [108, 113], "332": [108, 113], "5188855581026275": 108, "happen": [108, 132, 133], "895": 108, "896": 108, "897": 108, "899": 108, "471": [108, 111], "run_hyperparameter_tun": [108, 111], "logger": [109, 132, 133], "784": 109, "785": 109, "hyperparamt": 109, "creator1": [109, 130, 138], "1e3": 109, "uniform": [109, 119, 129, 130, 141], "creator2": [109, 130, 138], "1e1": 109, "n_iter": [109, 130], "06": [109, 110, 115, 130], "1000": 109, "795": [109, 130], "796": 109, "real": [109, 128, 130, 132], "prior": [109, 130], "803": 109, "811": 109, "812": 109, "813": 109, "656015037593985": 109, "ordereddict": [109, 130], "0018082604408073564": 109, "6437581151471767": 109, "985": [109, 111], "run_hyperparameter_tuning_bayessearch": [109, 111], "logist": [110, 119, 138, 140], "373": 110, "petal_width": [110, 113, 130, 136, 139, 140], "model_sep": 110, "model_pet": 110, "376": [110, 138], "__sepal": [110, 140], "377": [110, 138], "__petal": [110, 140], "0x7fb8aa5836a0": 110, "0x7fb8a9e96f50": 110, "379": 110, "380": [110, 138], "381": 110, "382": 110, "416": 110, "417": 110, "418": 110, "85": 110, "run_stacked_model": [110, 111], "026": 111, "auto_examples_03_complex_model": 111, "relat": [112, 128, 136], "stratifiedbootstrap": 113, "205": 113, "ml": [113, 125], "classic": 113, "frequentist": 113, "contrast": 113, "gap": 113, "approach": [113, 127, 129, 130, 135, 140], "below": [113, 124, 127, 130], "2000": 113, "n_bootstrap": 113, "n_element": 113, "len": [113, 114, 128], "scores_ncr": 113, "next": [113, 124, 126, 134, 136, 140], "again": [113, 128, 129, 130, 132, 135, 140], "tell": [113, 128, 139], "confound_remov": [113, 114, 119, 128], "scores_cr": 113, "__featur": [113, 128], "__confound": [113, 128], "333": 113, "335": 113, "easier": [113, 121, 140, 141], "df_ncr_metric": 113, "df_cr_metric": 113, "df_metric": 113, "933333": 113, "968889": 113, "948889": 113, "catplot": 113, "col": 113, "swarm": 113, "them": [113, 121, 123, 124, 125, 127, 129, 130, 138, 139, 140], "pair": 113, "systemat": 113, "df_diff_metr": 113, "whisker": 113, "box": [113, 125], "whi": 113, "axhlin": 113, "roc": 113, "auc": 113, "term": [113, 129, 136, 140], "mayb": [113, 138], "percentil": [113, 119], "amount": [113, 125, 132], "ncr_fi": 113, "cr_fi": 113, "feature_import": 113, "dodg": [113, 129], "diff_fi": 113, "axvlin": [113, 129], "619": [113, 115], "plot_confound_removal_classif": [113, 115], "most": [114, 124, 127, 128, 129, 132, 135, 140], "remove_confound": 114, "sometim": [114, 128, 132, 133, 134], "discuss": 114, "df_featur": 114, "furthermor": [114, 130], "put": [114, 128], "423": 114, "424": 114, "0x7fb8aa7b34c0": 114, "feature_nam": [114, 138], "425": 114, "427": 114, "df_deconfound": 114, "029271": 114, "057228": 114, "009658": 114, "046011": 114, "042050": 114, "024189": 114, "019424": 114, "012310": 114, "028194": 114, "005874": 114, "047538": 114, "015568": 114, "006874": 114, "012796": 114, "057488": 114, "024667": 114, "061639": 114, "082913": 114, "076494": 114, "039983": 114, "017885": 114, "047387": 114, "041423": 114, "013144": 114, "004736": 114, "036479": 114, "081307": 114, "007659": 114, "025897": 114, "013765": 114, "031358": 114, "052961": 114, "049135": 114, "029380": 114, "000071": 114, "013139": 114, "032449": 114, "032631": 114, "005510": 114, "021964": 114, "008781": 114, "012234": 114, "025295": 114, "037349": 114, "assum": [114, 129], "closer": [114, 119, 139], "achiev": [114, 128, 134, 139, 140], "639": [114, 128], "640": 114, "0x7fb8a9f8dba0": 114, "641": 114, "643": 114, "df_transform": 114, "pca__pca0": 114, "pca__pca1": 114, "pca__pca2": 114, "pca__pca3": 114, "pca__pca4": 114, "pca__pca5": 114, "pca__pca6": 114, "pca__pca7": 114, "pca__pca8": 114, "014051": 114, "075715": 114, "017395": 114, "012591": 114, "046676": 114, "013408": 114, "034497": 114, "008604": 114, "002330": 114, "099883": 114, "062829": 114, "014516": 114, "013673": 114, "048058": 114, "010254": 114, "004124": 114, "024022": 114, "002075": 114, "029015": 114, "053253": 114, "032477": 114, "061933": 114, "049167": 114, "029565": 114, "042031": 114, "001197": 114, "002579": 114, "035162": 114, "001324": 114, "106807": 114, "028981": 114, "020850": 114, "023413": 114, "008421": 114, "006566": 114, "003545": 114, "003951": 114, "025445": 114, "000421": 114, "018411": 114, "039692": 114, "025022": 114, "043086": 114, "002095": 114, "000517": 114, "lastli": [114, 128], "871": 114, "872": 114, "873": 114, "874": 114, "022496": 114, "007869": 114, "429556": 114, "353": [114, 117], "89": [114, 117], "022304": 114, "007912": 114, "522599": 114, "023007": 114, "007985": 114, "482681": 114, "354": [114, 117], "88": [114, 117], "022595": 114, "007909": 114, "426498": 114, "022643": 114, "008154": 114, "550248": 114, "663": [114, 115], "run_return_confound": [114, 115], "282": 115, "auto_examples_04_confound": 115, "extend": [116, 139], "variou": 116, "aspect": [116, 129, 140], "make_scor": 117, "register_scor": 117, "982": 117, "997": 117, "998": 117, "999": 117, "000": 117, "004452": 117, "002263": 117, "104359": 117, "004413": 117, "002219": 117, "44": 117, "861364": 117, "004401": 117, "002237": 117, "981407": 117, "004373": 117, "002267": 117, "956254": 117, "004381": 117, "002273": 117, "419886": 117, "264653948271885": 117, "thing": [117, 135, 140], "r2_corr": [117, 139], "049": 117, "test_neg_mean_absolute_error": 117, "test_r2_corr": 117, "264654": 117, "486498": 117, "take": [117, 129, 132, 140], "def": 117, "pearson_scor": 117, "squeez": 117, "096": [117, 130], "097": [117, 130], "098": [117, 130], "099": [117, 130], "174": [117, 118, 132], "run_custom_scorers_regress": [117, 118], "auto_examples_05_custom": 118, "descript": [119, 120, 121, 140], "short": [119, 121, 128], "link": [119, 121, 137, 140, 141], "unit": [119, 125], "scaler_robust": 119, "median": 119, "iqr": 119, "robustscal": [119, 130], "scaler_minmax": 119, "minmaxscal": 119, "scaler_maxab": 119, "maxabsscal": 119, "scaler_norm": 119, "norm": 119, "scaler_quantil": 119, "robust": [119, 123], "quantiletransform": 119, "scaler_pow": 119, "gaussianis": 119, "powertransform": 119, "select_univari": 119, "genericunivariateselect": 119, "select_percentil": 119, "rank": 119, "selectpercentil": 119, "select_k": [119, 130], "selectkbest": [119, 130], "select_fdr": 119, "selectfdr": 119, "select_fpr": 119, "fpr": 119, "selectfpr": 119, "select_fw": 119, "fwe": 119, "selectfw": 119, "variancethreshold": 119, "drop_column": 119, "dropcolumn": 119, "change_column_typ": 119, "changecolumntyp": 119, "filtercolumn": [119, 141], "princip": [119, 140], "svr": [119, 133, 134], "randomforestregressor": 119, "extratreesclassifi": 119, "extratreesregressor": 119, "adaboost": 119, "adaboostclassifi": 119, "adaboostregressor": 119, "bag": 119, "baggingclassifi": 119, "baggingregressor": 119, "gradientboost": 119, "gradient": 119, "boost": 119, "gradientboostingclassifi": 119, "gradientboostingregressor": 119, "stackingclassifi": [119, 133], "stackingregressor": [119, 133], "gauss": 119, "gaussianprocessclassifi": 119, "gaussianprocessregressor": 119, "logit": [119, 130, 138], "aka": 119, "maxent": 119, "logisticregress": [119, 130], "logitcv": 119, "logisticregressioncv": 119, "l2": [119, 130], "ridgeclassifi": 119, "ridgecv": 119, "built": [119, 125, 133, 138, 139, 140], "ridgeclassifiercv": 119, "sgd": 119, "minim": 119, "empir": [119, 129], "loss": [119, 128], "sgdclassifi": 119, "sgdregressor": 119, "nb_bernoulli": 119, "multivari": 119, "bernoulli": 119, "bernoullinb": 119, "nb_categor": 119, "categoricalnb": 119, "nb_complement": 119, "complementnb": 119, "nb_gaussian": 119, "gaussiannb": 119, "nb_multinomi": 119, "multinomi": 119, "multinomialnb": 119, "dynamicselect": [119, 141], "dummyclassifi": 119, "dummyregressor": 119, "meant": 120, "friendli": [120, 140], "come": [120, 121, 129, 132, 136, 140], "cost": 120, "potenti": [120, 128, 132], "These": [120, 123, 124, 127, 139], "therefor": [120, 124, 127, 128, 139, 140], "enabl": [120, 141], "disabl": 120, "disable_x_check": 120, "unmatch": 120, "think": [120, 128], "disable_xtypes_check": 120, "miss": [120, 141], "disable_x_verbos": 120, "disable_xtypes_verbos": 120, "enable_parallel_column_transform": 120, "revert": 120, "behaviour": [120, 125, 130, 139], "back": [120, 139], "resourc": [120, 135], "expect": 120, "fork": 121, "com": [121, 129, 135, 141], "juaml": 121, "repositori": 121, "never": [121, 140], "offici": [121, 124], "clone": 121, "virtual": [121, 124], "pip": [121, 123, 124], "branch": [121, 126], "refactor": [121, 141], "feat": 121, "prefix": 121, "git": [121, 126, 141], "checkout": [121, 126], "pre": [121, 124, 126, 141], "commit": [121, 126, 141], "hook": [121, 141], "help": [121, 124, 125, 128, 132, 138, 140], "regularli": 121, "On": [121, 128, 139], "save": [121, 140], "smaller": 121, "semant": 121, "wip": 121, "verifi": [121, 139], "suit": [121, 132], "tox": 121, "push": [121, 126], "open": 121, "displai": [121, 132, 138], "submit": 121, "templat": 121, "web": 121, "interfac": [121, 130, 133], "meet": 121, "directori": 121, "rare": 121, "circumst": 121, "coverag": 121, "decreas": 121, "report": 121, "codecov": 121, "usag": [121, 124, 135, 140, 141], "draft": [121, 126], "id": 121, "liner": [121, 138], "newsfrag": 121, "bug": [121, 141], "bugfix": 121, "enhanc": 121, "enh": 121, "improv": [121, 124], "miscellan": 121, "misc": 121, "record": 121, "101": [121, 130], "content": 121, "typo": [121, 141], "intro": 121, "biggest": 121, "fan": 121, "yourself": 121, "contributor": 121, "inc": 121, "against": 121, "someon": [121, 129], "core": [121, 133, 135, 138], "team": 121, "success": [121, 130, 135], "pytest": [121, 141], "intend": 121, "cd": 121, "_build": 121, "situat": 121, "clean": [121, 124], "rest": 121, "rst": [121, 126], "plot_": 121, "run_": 121, "block": 121, "comment": 121, "render": [121, 139], "emb": 121, "shall": [121, 129], "preced": 121, "bokeh": [123, 124, 141], "develop": [123, 124, 125, 126, 141], "usual": [123, 130, 140], "through": [123, 140], "manag": [123, 141], "conda": [123, 124], "forg": [123, 124], "standalon": 123, "applic": [123, 127, 128, 132], "browser": 123, "jupyter_bokeh": 123, "servabl": 123, "27": [124, 128], "statsmodel": 124, "nevertheless": [124, 140], "although": 124, "strongli": 124, "recommend": [124, 136], "environ": [124, 125, 139], "promin": 124, "venv": 124, "env": 124, "latest": [124, 126, 141], "often": [124, 128, 135, 140], "newest": 124, "sens": [124, 130], "aim": [124, 125, 140], "pypi": [124, 126], "via": [124, 126, 137], "relas": 124, "yet": [124, 136], "newer": 124, "unmaintain": 124, "skopt": [124, 130], "optuna_integr": 124, "orient": 125, "aml": 125, "institut": 125, "neurosci": [125, 127], "medicin": 125, "inm": 125, "thought": [125, 140], "research": [125, 127, 128, 129], "simpler": 125, "abstract": 125, "power": [125, 132, 133], "minor": [125, 126], "flexibl": [125, 133], "video": 125, "tutori": 125, "offer": [125, 136], "essenti": [125, 132], "benefit": 125, "therebi": 125, "avoid": [125, 128, 129, 130, 141], "nice": [125, 136, 139, 140], "system": [125, 126], "accord": [125, 127, 129, 133, 141], "setup": [125, 137], "suggest": [125, 129], "deeper": [125, 132, 137, 138], "topic": [125, 129, 137, 138], "overview": [125, 132, 138, 140], "contribut": 125, "local": 125, "github": [125, 139, 141], "pull": [125, 126], "guidelin": 125, "write": [125, 140], "maintain": 125, "faq": 125, "issu": [125, 126, 129, 132, 141], "2023": 125, "07": [125, 130], "2022": [125, 128], "scientif": 125, "public": 125, "vera": 125, "komey": 125, "free": 125, "arxiv": [125, 128], "octob": 125, "48550": 125, "2310": 125, "12568": 125, "heavili": 125, "reliant": 125, "cite": 125, "major": [126, 130], "micro": 126, "devn": 126, "distanc": 126, "setuptools_scm": 126, "plugin": 126, "tag": 126, "increment": [126, 140], "segment": 126, "publish": 126, "onc": [126, 132, 135, 137, 140], "mileston": 126, "reach": 126, "towncrier": 126, "proceed": [126, 140], "sync": 126, "rebas": 126, "changelog": 126, "properli": 126, "reflect": [126, 141], "whats_new": 126, "pr": 126, "merg": 126, "vx": 126, "setuptools_scm_debug": 126, "outdir": 126, "dist": 126, "bump": [126, 141], "vd": 126, "neuroimag": [127, 128], "typic": 127, "problemat": 127, "due": [127, 129, 130], "curs": 127, "especi": 127, "recent": 127, "propos": 127, "fluid": 127, "intellig": 127, "sustain": 127, "attent": 127, "nutshel": 127, "summar": 127, "subsequ": 127, "commonli": [127, 140], "principl": 127, "leverag": [127, 132], "workflow": [127, 132, 137, 140], "x_name": [127, 133], "feature_": [127, 128, 133], "cbpm_pipeline_cr": 127, "final_model": [127, 132], "623": 127, "feature_1": [127, 128, 133], "feature_2": [127, 128, 133], "feature_3": [127, 128, 133], "feature_4": [127, 128, 133], "feature_5": [127, 128, 133], "feature_6": [127, 128, 133], "feature_7": [127, 128, 133], "feature_8": [127, 128, 133], "feature_9": [127, 128, 133], "feature_10": [127, 128, 133], "feature_11": [127, 128, 133], "feature_12": [127, 128, 133], "feature_13": [127, 128, 133], "feature_14": [127, 128, 133], "feature_15": [127, 128, 133], "feature_16": [127, 128, 133], "feature_17": [127, 128, 133], "feature_18": [127, 128, 133], "feature_19": [127, 128, 133], "feature_20": [127, 133], "624": 127, "625": 127, "626": 127, "648": 127, "No": [127, 129], "rid": 127, "267": [127, 132], "697": 127, "721": 127, "770": 127, "customis": 127, "increas": 127, "777": 127, "cbpm__significance_threshold": 127, "noteworthi": 127, "sign": 127, "spearmanr": 127, "778": 127, "0x7fb8b02e9510": 127, "779": 127, "0x7fb8d0351cf0": 127, "0x7fb8d034ddf0": 127, "guess": 127, "spearman": 127, "xilin": 127, "mar": [127, 128], "emili": 127, "fingerprint": 127, "2015": 127, "nov": 127, "1664": 127, "71": [127, 132], "rosenberg": 127, "monica": 127, "neuromark": 127, "whole": [127, 130], "jan": [127, 128], "165": [127, 132], "159": [127, 132], "ultim": 128, "world": [128, 132], "scenario": [128, 139, 140], "relationship": 128, "un": 128, "observ": 128, "similarli": [128, 132], "rather": 128, "jointli": 128, "prevent": [128, 130], "laid": 128, "rel": [128, 133], "littl": 128, "involv": 128, "simul": 128, "artifici": [128, 133, 140], "normal_dist_conf_on": 128, "normal_dist_conf_two": 128, "noise_conf_on": 128, "rand": [128, 129], "noise_conf_two": 128, "multipli": 128, "factor": 128, "confound_on": 128, "confound_two": 128, "prefer": 128, "human": 128, "readabl": 128, "confound_1": 128, "confound_2": 128, "my_target": 128, "distinguish": [128, 133, 140], "predictor": 128, "accordingli": [128, 135], "crucial": 128, "parametr": [128, 130, 136, 140], "633": 128, "634": 128, "whose": 128, "635": 128, "feature_0": 128, "636": 128, "637": 128, "638": 128, "22": 128, "025510": 128, "006992": 128, "786706": 128, "024554": 128, "006938": 128, "592156": 128, "024727": 128, "006953": 128, "722494": 128, "024430": 128, "006927": 128, "674188": 128, "024412": 128, "007138": 128, "570243": 128, "slightli": 128, "target_confound_remov": 128, "0x7fb8aa3418a0": 128, "insert": 128, "importantli": [128, 129, 132, 135, 136, 140], "805": 128, "806": 128, "0x7fb8aa342230": 128, "807": 128, "808": 128, "809": 128, "006120": 128, "003894": 128, "253033": 128, "005926": 128, "003844": 128, "059126": 128, "005855": 128, "004014": 128, "256962": 128, "006079": 128, "003896": 128, "096475": 128, "005999": 128, "003835": 128, "534386": 128, "reason": [128, 129], "further": [128, 130, 135], "consider": 128, "why": [128, 129, 130, 137], "mitig": 128, "bia": [128, 129], "accur": 128, "argu": 128, "appropri": 128, "valuabl": [128, 132, 135], "difficult": [128, 130], "challeng": 128, "ineffect": 128, "particular": [128, 132, 140], "fact": [128, 132], "collid": 128, "spuriou": 128, "evid": [128, 129], "leak": [128, 135], "bias": [128, 129], "care": [128, 140], "question": [128, 129], "thorough": 128, "strength": 128, "limit": 128, "techniqu": [128, 129, 130, 132], "rao": 128, "anil": 128, "presenc": 128, "volum": [128, 129], "april": 128, "snoek": 128, "luka": 128, "januari": 128, "2019": 128, "741": 128, "760": 128, "he": 128, "tong": 128, "neural": [128, 140], "network": [128, 140], "206": [128, 132], "februari": 128, "2020": 128, "116276": 128, "practic": [128, 129], "knowledg": [128, 132], "discoveri": 128, "databas": 128, "scienc": [128, 135], "demo": 128, "track": 128, "2021": 128, "12461": 128, "chyzhyk": 128, "darya": 128, "biomark": 128, "gigasci": 128, "holmberg": 128, "mathia": 128, "jama": 128, "1282": 128, "1283": 128, "1001": [128, 138], "1820": 128, "2210": 128, "09232": 128, "revis": 128, "oct": 128, "mention": 129, "don": [129, 130], "almost": 129, "infinit": 129, "unbias": 129, "overestim": 129, "rememb": [129, 132, 139], "surpris": 129, "would": [129, 130, 136, 138, 140], "answer": 129, "imposs": 129, "bengio": 129, "grandvalet": 129, "colleagu": 129, "few": [129, 132, 135, 141], "word": [129, 130], "thumb": [129, 140], "compromis": 129, "loocv": 129, "holdout": 129, "taken": 129, "intens": 129, "unconclus": 129, "intuit": [129, 132, 138], "direct": [129, 130], "thread": 129, "extrem": 129, "choic": 129, "fun": 129, "begin": [129, 141], "variant": 129, "solv": [129, 135], "shed": 129, "light": 129, "poorli": 129, "stratifiedkfold": [129, 139], "rescu": 129, "matter": [129, 135, 138], "quantiz": 129, "divid": 129, "histplot": 129, "train_set": 129, "test_set": 129, "shrink": 129, "suptitl": 129, "gaussian": 129, "discrete_i": 129, "digit": 129, "kdeplot": 129, "layer": 129, "dash": 129, "repeatedcontinuousstratifiedkfold": [129, 141], "repeatedcontinuousstratifiedgroupkfold": 129, "jmlr": 129, "decemb": 129, "2004": 129, "1089": 129, "1105": 129, "stackexchang": 129, "61783": 129, "kohavi": 129, "ijcai": 129, "1137": 129, "1145": 129, "662": 129, "flower": 130, "pprint": [130, 132, 139], "pretti": 130, "tolist": [130, 138], "093": 130, "who": 130, "common": [130, 135], "094": 130, "095": 130, "8099999999999999": 130, "etc": 130, "optimist": 130, "loop": 130, "179": [130, 138], "scores_tun": 130, "model_tun": 130, "180": [130, 138], "181": 130, "182": [130, 132], "183": [130, 132], "9100000000000001": 130, "tri": 130, "conclud": 130, "142": [130, 132], "791": 130, "0001": 130, "792": 130, "217": 130, "select_k__k": 130, "concept": [130, 135], "receiv": 130, "veri": [130, 132, 133, 135, 136], "construct": 130, "_grid_": 130, "diment": 130, "lot": [130, 132], "consum": 130, "constraint": 130, "framework": 130, "33": [130, 132, 138, 140], "544": 130, "545": 130, "546": 130, "547": 130, "9099999999999999": 130, "36": [130, 133], "501": 130, "502": 130, "503": 130, "504": 130, "507": 130, "9400000000000001": 130, "459261223720629": 130, "002423264987567721": 130, "accept": 130, "39": [130, 133], "459": 130, "460": 130, "461": 130, "462": 130, "465": 130, "466": 130, "182640993861633": 130, "049965805178076736": 130, "shown": 130, "modifi": [130, 140], "exemplarili": 130, "class_weight": 130, "balanc": 130, "svm__class_weight": [130, 132], "trial": 130, "create_studi": 130, "maxim": 130, "study_nam": 130, "load_if_exist": 130, "0x7fb8a1b5e260": 130, "1079": 130, "experimentalwarn": 130, "v0": 130, "125": 130, "new_object": 130, "new_object_param": 130, "74": [130, 132], "2130076206318274": 130, "022634008501212083": 130, "toolbox": 130, "with_mean": [130, 140], "053": 130, "054": 130, "zscore__with_mean": [130, 132], "055": 130, "056": 130, "categoricaldistribut": 130, "floatdistribut": 130, "intdistribut": 130, "057": 130, "pca__n_compon": 130, "058": 130, "059": 130, "those": [130, 135], "unnecessari": 130, "model1": 130, "060": 130, "061": 130, "062": 130, "063": 130, "064": 130, "066": 130, "067": 130, "93": 130, "forc": 130, "repat": 130, "model2": 130, "729": 130, "730": 130, "731": 130, "732": 130, "733": 130, "734": 130, "735": 130, "736": 130, "737": 130, "inde": [130, 139], "equival": 130, "param_grid": [130, 132], "stop": 130, "creator3": [130, 138], "max_depth": [130, 133], "creator4": 130, "penalti": 130, "l1": 130, "dual": 130, "solver": 130, "liblinear": 130, "model3": 130, "441": 130, "443": 130, "444": 130, "model__c": 130, "model__gamma": 130, "445": 130, "446": 130, "model__max_depth": 130, "447": 130, "model__penalti": 130, "448": 130, "451": 130, "452": 130, "9200000000000002": 130, "beat": 130, "270": [130, 132, 141], "gain": 132, "insight": 132, "impact": 132, "abil": 132, "critic": 132, "influenc": 132, "deploy": 132, "focu": [132, 136], "anomali": 132, "toi": [132, 133], "plai": 132, "penguin": 132, "penguins_df": 132, "island": 132, "queri": 132, "chinstrap": 132, "dropna": 132, "adeli": 132, "gentoo": 132, "99_doc": 132, "run_model_inspection_doc": 132, "downcast": 132, "old": 132, "infer_object": 132, "set_opt": 132, "no_silent_downcast": 132, "fairli": 132, "geomspac": [132, 133], "1e2": [132, 133], "968": 132, "969": 132, "notic": [132, 140], "970": 132, "bill_length_mm": 132, "bill_depth_mm": 132, "flipper_length_mm": 132, "body_mass_g": 132, "971": 132, "972": 132, "274": [132, 141], "151": [132, 141], "123": 132, "quick": 132, "error_scor": 132, "estimator__memori": 132, "estimator__set_column_typ": 132, "estimator__set_column_types__x_typ": 132, "estimator__set_column_types__row_select_col_typ": 132, "estimator__set_column_types__row_select_v": 132, "estimator__step": 132, "estimator__svm": 132, "estimator__svm__c": 132, "estimator__svm__break_ti": 132, "estimator__svm__cache_s": 132, "estimator__svm__class_weight": 132, "estimator__svm__coef0": 132, "estimator__svm__decision_function_shap": 132, "ovr": 132, "estimator__svm__degre": 132, "estimator__svm__gamma": 132, "estimator__svm__kernel": 132, "estimator__svm__max_it": 132, "estimator__svm__prob": 132, "estimator__svm__random_st": 132, "estimator__svm__shrink": 132, "estimator__svm__tol": 132, "estimator__svm__verbos": 132, "estimator__verbos": 132, "estimator__zscor": 132, "estimator__zscore__copi": 132, "estimator__zscore__with_mean": 132, "estimator__zscore__with_std": 132, "pre_dispatch": 132, "refit": 132, "get_fitted_param": 132, "set_column_types__x_typ": 132, "set_column_types__column_mapper_": 132, "bill_depth_mm__": 132, "bill_length_mm__": 132, "body_mass_g__": 132, "flipper_length_mm__": 132, "set_column_types__feature_names_in_": 132, "set_column_types__row_select_col_typ": 132, "set_column_types__row_select_v": 132, "svm__break_ti": 132, "svm__cache_s": 132, "svm__class_weight_": 132, "svm__classes_": 132, "svm__coef0": 132, "svm__decision_function_shap": 132, "svm__degre": 132, "svm__dual_coef_": 132, "00262819": 132, "00212021": 132, "00050798": 132, "svm__feature_names_in_": 132, "svm__fit_status_": 132, "svm__intercept_": 132, "14861904": 132, "svm__max_it": 132, "svm__n_features_in_": 132, "svm__n_iter_": 132, "int32": 132, "svm__random_st": 132, "svm__shape_fit_": 132, "svm__shrink": 132, "svm__support_": 132, "65": 132, "68": 132, "72": 132, "92": [132, 140], "94": [132, 141], "114": 132, "122": [132, 138, 141], "126": 132, "128": 132, "132": [132, 138], "134": 132, "157": 132, "167": 132, "169": 132, "173": 132, "177": [132, 138], "191": [132, 133], "197": [132, 133], "203": 132, "225": 132, "243": 132, "245": [132, 139, 141], "249": [132, 139, 141], "253": 132, "256": 132, "257": [132, 133], "259": 132, "263": 132, "273": 132, "svm__support_vectors_": 132, "17599741e": 132, "80569048e": 132, "07712013e": 132, "20879423e": 132, "21535409e": 132, "15375421e": 132, "77937129e": 132, "19014647e": 132, "66928561e": 132, "78147812e": 132, "01033730e": 132, "69390589e": 132, "42500021e": 132, "11361240e": 132, "81947379e": 132, "09081365e": 132, "78632059e": 132, "77664795e": 132, "21265189e": 132, "12669373e": 132, "79116307e": 132, "41110883e": 132, "38889568e": 132, "16525470e": 132, "16018504e": 132, "74104576e": 132, "27572658e": 132, "78209462e": 132, "58117585e": 132, "98317342e": 132, "81053295e": 132, "20493657e": 132, "97191363e": 132, "02693719e": 132, "44785351e": 132, "01419496e": 132, "87194087e": 132, "27905689e": 132, "15738023e": 132, "47646162e": 132, "79782108e": 132, "44240684e": 132, "40725117e": 132, "25391889e": 132, "66283346e": 132, "01054424e": 132, "80018072e": 132, "80084801e": 132, "57731819e": 132, "28874183e": 132, "87821759e": 132, "16509556e": 132, "87549426e": 132, "63340553e": 132, "82718912e": 132, "58490026e": 132, "61342343e": 132, "28363764e": 132, "57427384e": 132, "46699817e": 132, "87693242e": 132, "91141327e": 132, "11633573e": 132, "80802270e": 132, "07669507e": 132, "47616089e": 132, "87553319e": 132, "67251840e": 132, "90918000e": 132, "62989736e": 132, "28389936e": 132, "91303766e": 132, "51234170e": 132, "19059071e": 132, "30995153e": 132, "31951771e": 132, "20701203e": 132, "81188036e": 132, "00324771e": 132, "88079008e": 132, "30326924e": 132, "10816573e": 132, "79034944e": 132, "29358430e": 132, "11088906e": 132, "82622951e": 132, "31295419e": 132, "10026220e": 132, "05493358e": 132, "01037793e": 132, "86210959e": 132, "10763693e": 132, "84817959e": 132, "20061769e": 132, "11265149e": 132, "87277092e": 132, "77577512e": 132, "15131401e": 132, "70974601e": 132, "54125314e": 132, "56047238e": 132, "87004758e": 132, "97808972e": 132, "41496649e": 132, "35539779e": 132, "65998813e": 132, "74320957e": 132, "16240937e": 132, "32168152e": 132, "20428870e": 132, "93603355e": 132, "15556975e": 132, "53580647e": 132, "77191746e": 132, "46520183e": 132, "26192512e": 132, "20156536e": 132, "31168300e": 132, "62214573e": 132, "20973537e": 132, "27237784e": 132, "30811171e": 132, "11988420e": 132, "11688313e": 132, "50108190e": 132, "61023026e": 132, "15638092e": 132, "65314852e": 132, "23672883e": 132, "39344167e": 132, "46095663e": 132, "81496972e": 132, "17680598e": 132, "21216725e": 132, "42932175e": 132, "14588481e": 132, "18646009e": 132, "11543393e": 132, "00779370e": 132, "51071450e": 132, "12885753e": 132, "13619987e": 132, "34413800e": 132, "05330831e": 132, "37886125e": 132, "53852981e": 132, "17654665e": 132, "06289362e": 132, "37500359e": 132, "29135771e": 132, "27384629e": 132, "09853372e": 132, "67847548e": 132, "67144941e": 132, "64830605e": 132, "87307476e": 132, "90015347e": 132, "41649737e": 132, "93386974e": 132, "41119875e": 132, "07924702e": 132, "53696198e": 132, "14104234e": 132, "86732425e": 132, "67461782e": 132, "38776970e": 132, "29665167e": 132, "svm__tol": 132, "svm__verbos": 132, "zscore__copi": 132, "zscore__feature_names_in_": 132, "zscore__mean_": 132, "70291971": 132, "83613139": 132, "202": 132, "17883212": 132, "4318": 132, "06569343": 132, "zscore__n_features_in_": 132, "zscore__n_samples_seen_": 132, "zscore__scale_": 132, "18607683": 132, "00973207": 132, "02045287": 132, "40628575": 132, "zscore__var_": 132, "68953929e": 132, "03902299e": 132, "25614004e": 132, "96233850e": 132, "zscore__with_std": 132, "somewhat": [132, 133], "structur": [132, 136], "made": [132, 137, 138], "handi": [132, 136, 140], "fold_predict": 132, "repeat8_p0": 132, "repeat9_p0": 132, "269": 132, "271": [132, 141], "272": 132, "c_valu": 132, "fold_inspector": 132, "fold_model": 132, "realiz": 132, "ever": 132, "address": 132, "aris": 132, "serv": 132, "asset": 132, "transpar": [132, 135], "reliabl": 132, "capabl": [132, 133, 141], "navig": 132, "har": 132, "196": [132, 133], "customiz": 133, "cours": 133, "005": 133, "006": 133, "mind": 133, "arbitrari": [133, 139], "model_1": [133, 138], "008": 133, "00000000e": 133, "78255940e": 133, "74263683e": 133, "15443469e": 133, "99484250e": 133, "66810054e": 133, "64158883e": 133, "29154967e": 133, "59381366e": 133, "0x7fb8a9a72800": 133, "min_samples_leaf": 133, "min_samples_split": 133, "009": 133, "0x7fb8a9a71720": 133, "0x7fb8a9a70e20": 133, "010": 133, "rf__max_depth": 133, "rf__min_samples_leaf": 133, "rf__min_samples_split": 133, "039": [133, 140], "ma": 133, "2820": 133, "invalid": 133, "encount": 133, "cast": 133, "_data": 133, "desir": [133, 140], "type1": 133, "type2": 133, "type1_": 133, "type2_": 133, "__type1": 133, "0x7fb8a9aa4b50": 133, "__type2": 133, "0x7fb8a9ecbe80": 133, "192": 133, "type1_1": 133, "type1_2": 133, "type1_3": 133, "type1_4": 133, "type1_5": 133, "type1_6": 133, "type1_7": 133, "type1_8": 133, "type1_9": 133, "type1_10": 133, "type2_1": 133, "type2_2": 133, "type2_3": 133, "type2_4": 133, "type2_5": 133, "type2_6": 133, "type2_7": 133, "type2_8": 133, "type2_9": 133, "type2_10": 133, "193": 133, "194": 133, "195": 133, "flexibli": 133, "Of": 133, "127": 133, "cover": [134, 136, 140], "far": [134, 136, 139, 140], "conist": 134, "manner": [134, 135, 136, 138, 140], "clear": 134, "430": 134, "target_jutargetpipelin": 134, "0x7fb8a9c79de0": 134, "431": 134, "432": 134, "433": 134, "008701": 134, "002792": 134, "007608": 134, "002679": 134, "008007": 134, "002653": 134, "007804": 134, "002636": 134, "007796": 134, "overal": 134, "082": 134, "goal": 135, "beyond": 135, "exact": 135, "domingo": 135, "2012": 135, "effici": 135, "disadvantag": 135, "small": 135, "unstabl": 135, "overcom": 135, "accident": 135, "quickli": 135, "obviou": 135, "straightforward": [135, 140], "mistak": 135, "www": 135, "sciencedirect": 135, "articl": 135, "pii": 135, "s105381191630595x": 135, "natur": 135, "s41746": 135, "022": 135, "00592": 135, "s1053811917305311": 135, "cross_valid": 135, "commun": 136, "known": [136, 140], "capac": 136, "colum": 136, "manipul": 136, "anyth": [136, 139], "meaning": 136, "hundr": 136, "thousand": 136, "saw": [136, 138, 139, 140], "advanc": 136, "004": 136, "backbon": 137, "magic": 137, "goe": 137, "utmost": 137, "glanc": [137, 139], "chapter": 137, "familiar": 137, "along": 137, "fundament": 137, "essenc": 137, "click": 137, "fanci": 137, "stuff": 137, "decent": 138, "benchmark": 138, "enough": 138, "tediou": 138, "sound": 138, "switch": 138, "breast": 138, "cancer": 138, "malign": 138, "benign": 138, "load_breast_canc": 138, "radiu": 138, "textur": 138, "perimet": 138, "area": 138, "worst": 138, "concav": 138, "symmetri": 138, "fractal": 138, "dimens": 138, "38": 138, "2654": 138, "4601": 138, "11890": 138, "1326": 138, "1860": 138, "2750": 138, "08902": 138, "69": 138, "130": 138, "1203": 138, "2430": 138, "3613": 138, "08758": 138, "386": 138, "2575": 138, "6638": 138, "17300": 138, "135": [138, 141], "1297": 138, "1625": 138, "2364": 138, "07678": 138, "cv_splitter": [138, 139], "smooth": 138, "compact": 138, "321": 138, "322": 138, "569": 138, "357": 138, "212": 138, "481": 138, "482": 138, "483": 138, "484": 138, "485": 138, "176": 138, "175": 138, "384": 138, "pairwis": 138, "neither": 138, "nor": 138, "946304": 138, "083461": 138, "250382": 138, "140882": 138, "891066": 138, "285373": 138, "048138": 138, "144413": 138, "361847": 138, "206356": 138, "619069": 138, "029499": 138, "977110": 138, "084010": 138, "306544": 138, "919632": 138, "dive": 138, "curiou": 138, "32": [139, 140], "246": 139, "005299": 139, "002532": 139, "004636": 139, "004538": 139, "002483": 139, "004482": 139, "002488": 139, "004473": 139, "933": 139, "overfit": 139, "295": 139, "004734": 139, "002497": 139, "004476": 139, "002481": 139, "004456": 139, "004497": 139, "002486": 139, "004565": 139, "002498": 139, "train_scor": 139, "cryptic": 139, "worri": 139, "doesn": 139, "358": 139, "359": 139, "360": 139, "361": 139, "004590": 139, "002476": 139, "004598": 139, "002471": 139, "004524": 139, "002468": 139, "002478": 139, "x27": 139, "rerun": 139, "cell": 139, "represent": 139, "trust": 139, "unabl": 139, "nbviewer": 139, "nbsp": 139, "pipelineifittedpipelin": 139, "setcolumntypessetcolumntyp": 139, "standardscalerstandardscal": 139, "svcsvc": 139, "didn": 139, "got": 139, "five": 139, "ourselv": 139, "fourth": 139, "434": 139, "436": 139, "437": 139, "004827": 139, "002450": 139, "7449876d309382acfef94df9d102aa76": 139, "004520": 139, "002475": 139, "004589": 139, "002427": 139, "004551": 139, "002485": 139, "004541": 139, "002482": 139, "004534": 139, "002447": 139, "004548": 139, "002518": 139, "004522": 139, "004558": 139, "002511": 139, "assumpt": 139, "list_scor": 139, "adjusted_mutual_info_scor": 139, "adjusted_rand_scor": 139, "average_precis": 139, "completeness_scor": 139, "d2_absolute_error_scor": 139, "explained_vari": 139, "f1": 139, "f1_macro": 139, "f1_micro": 139, "f1_sampl": 139, "f1_weight": 139, "fowlkes_mallows_scor": 139, "homogeneity_scor": 139, "jaccard": 139, "jaccard_macro": 139, "jaccard_micro": 139, "jaccard_sampl": 139, "jaccard_weight": 139, "matthews_corrcoef": 139, "max_error": 139, "mutual_info_scor": 139, "neg_brier_scor": 139, "neg_log_loss": 139, "neg_mean_absolute_percentage_error": 139, "neg_mean_gamma_devi": 139, "neg_mean_poisson_devi": 139, "neg_mean_squared_error": 139, "neg_mean_squared_log_error": 139, "neg_median_absolute_error": 139, "neg_negative_likelihood_ratio": 139, "neg_root_mean_squared_error": 139, "neg_root_mean_squared_log_error": 139, "normalized_mutual_info_scor": 139, "positive_likelihood_ratio": 139, "precision_macro": 139, "precision_micro": 139, "precision_sampl": 139, "precision_weight": 139, "rand_scor": 139, "recal": 139, "recall_macro": 139, "recall_micro": 139, "recall_sampl": 139, "recall_weight": 139, "roc_auc_ovo": 139, "roc_auc_ovo_weight": 139, "roc_auc_ovr": 139, "roc_auc_ovr_weight": 139, "top_k_accuraci": 139, "v_measure_scor": 139, "r_corr": 139, "550": 139, "551": 139, "552": 139, "553": 139, "004852": 139, "004182": 139, "004556": 139, "004085": 139, "004604": 139, "004120": 139, "004572": 139, "004069": 139, "004557": 139, "004114": 139, "004552": 139, "004149": 139, "004543": 139, "004132": 139, "004082": 139, "004529": 139, "004061": 139, "004509": 139, "004042": 139, "458": 139, "autom": 140, "pipe": 140, "fed": 140, "safe": 140, "827": 140, "828": 140, "829": 140, "830": 140, "831": 140, "003156": 140, "001756": 140, "002928": 140, "001910": 140, "002787": 140, "001698": 140, "002777": 140, "001695": 140, "002839": 140, "001666": 140, "voil\u00e0": 140, "resembl": 140, "scaler": 140, "864": 140, "865": 140, "866": 140, "867": 140, "004768": 140, "002507": 140, "004618": 140, "002515": 140, "004718": 140, "002493": 140, "004573": 140, "002480": 140, "004506": 140, "002448": 140, "decomposit": 140, "previous": 140, "913": 140, "005938": 140, "003275": 140, "005654": 140, "003245": 140, "005635": 140, "003231": 140, "005649": 140, "003260": 140, "005638": 140, "003253": 140, "opaqu": 140, "simplifi": 140, "neat": 140, "005891": 140, "003296": 140, "005663": 140, "003274": 140, "005632": 140, "003250": 140, "005596": 140, "005636": 140, "003242": 140, "awesom": 140, "prepreprocess": 140, "jump": 140, "aren": 140, "shouldn": 140, "ye": 140, "turn": 140, "learnt": 140, "experi": 140, "heurist": 140, "rate": 140, "sigma": 140, "sai": 140, "032": 140, "033": 140, "basi": 140, "comma": 140, "034": 140, "035": 140, "wonder": 140, "besid": 140, "definit": 140, "037": 140, "038": 140, "pca_1": 140, "040": 140, "041": 140, "016226": 140, "007023": 140, "014956": 140, "006916": 140, "014850": 140, "006914": 140, "014702": 140, "006924": 140, "015010": 140, "006969": 140, "boser": 140, "guyon": 140, "vapnik": 140, "margin": 140, "colt": 140, "fifth": 140, "annual": 140, "workshop": 140, "theori": 140, "1992": 140, "jul": 140, "144": 140, "348": 140, "fede": 141, "277": 141, "older": 141, "268": 141, "run_fit": 141, "optimis": 141, "275": 141, "logic": 141, "293": 141, "integr": 141, "118": 141, "265": 141, "dant": 141, "culaciati": 141, "258": 141, "hyperparemt": 141, "255": 141, "260": 141, "hyperparmet": 141, "action": 141, "mark": 141, "stale": 141, "synchon": 141, "mandal": 141, "224": 141, "244": 141, "lazi": 141, "fixtur": 141, "251": 141, "skip": 141, "168": 141, "header": 141, "languag": 141, "snippet": 141, "170": 141, "adopt": 141, "ruff": 141, "linter": 141, "codebas": 141, "codespel": 141, "surround": 141, "146": 141, "instruct": 141, "multiprocess": 141, "nos": 141, "extendeddataframepipelin": 141, "tranform_until": 141, "63": 141, "minimum": 141, "face": 141, "create_pipelin": 141, "register_model": 141}, "objects": {"julearn": [[2, 0, 1, "", "PipelineCreator"], [3, 0, 1, "", "TargetPipelineCreator"], [77, 3, 0, "-", "api"], [0, 3, 0, "-", "base"], [1, 3, 0, "-", "config"], [76, 3, 0, "-", "inspect"], [78, 3, 0, "-", "model_selection"], [79, 3, 0, "-", "models"], [80, 3, 0, "-", "pipeline"], [81, 3, 0, "-", "prepare"], [36, 5, 1, "", "run_cross_validation"], [37, 5, 1, "", "run_fit"], [82, 3, 0, "-", "scoring"], [83, 3, 0, "-", "stats"], [84, 3, 0, "-", "transformers"], [85, 3, 0, "-", "utils"], [86, 3, 0, "-", "viz"]], "julearn.PipelineCreator": [[2, 1, 1, "", "__init__"], [2, 1, 1, "", "add"], [2, 1, 1, "", "copy"], [2, 1, 1, "", "from_list"], [2, 1, 1, "", "has_model"], [2, 1, 1, "", "split"], [2, 2, 1, "", "steps"], [2, 1, 1, "", "to_pipeline"]], "julearn.TargetPipelineCreator": [[3, 1, 1, "", "__init__"], [3, 1, 1, "", "add"], [3, 1, 1, "", "to_pipeline"]], "julearn.base": [[4, 0, 1, "", "ColumnTypes"], [5, 4, 1, "", "ColumnTypesLike"], [6, 0, 1, "", "JuBaseEstimator"], [7, 0, 1, "", "JuTransformer"], [8, 0, 1, "", "WrapModel"], [9, 5, 1, "", "change_column_type"], [10, 5, 1, "", "ensure_column_types"], [11, 5, 1, "", "get_column_type"], [12, 5, 1, "", "make_type_selector"]], "julearn.base.ColumnTypes": [[4, 1, 1, "", "__init__"], [4, 1, 1, "", "add"], [4, 1, 1, "", "copy"], [4, 2, 1, "", "pattern"], [4, 1, 1, "", "to_type_selector"]], "julearn.base.JuBaseEstimator": [[6, 1, 1, "", "__init__"], [6, 1, 1, "", "filter_columns"], [6, 1, 1, "", "get_apply_to"], [6, 1, 1, "", "get_metadata_routing"], [6, 1, 1, "", "get_needed_types"], [6, 1, 1, "", "get_params"], [6, 1, 1, "", "set_params"]], "julearn.base.JuTransformer": [[7, 1, 1, "", "__init__"], [7, 1, 1, "", "filter_columns"], [7, 1, 1, "", "fit"], [7, 1, 1, "", "fit_transform"], [7, 1, 1, "", "get_apply_to"], [7, 1, 1, "", "get_metadata_routing"], [7, 1, 1, "", "get_needed_types"], [7, 1, 1, "", "get_params"], [7, 1, 1, "", "set_output"], [7, 1, 1, "", "set_params"]], "julearn.base.WrapModel": [[8, 1, 1, "", "__init__"], [8, 2, 1, "", "classes_"], [8, 1, 1, "", "decision_function"], [8, 1, 1, "", "filter_columns"], [8, 1, 1, "", "fit"], [8, 1, 1, "", "get_apply_to"], [8, 1, 1, "", "get_metadata_routing"], [8, 1, 1, "", "get_needed_types"], [8, 1, 1, "", "get_params"], [8, 1, 1, "", "predict"], [8, 1, 1, "", "predict_log_proba"], [8, 1, 1, "", "predict_proba"], [8, 1, 1, "", "score"], [8, 1, 1, "", "set_params"]], "julearn.config": [[13, 5, 1, "", "get_config"], [14, 5, 1, "", "set_config"]], "julearn.inspect": [[15, 0, 1, "", "FoldsInspector"], [16, 0, 1, "", "Inspector"], [17, 5, 1, "", "preprocess"]], "julearn.inspect.FoldsInspector": [[15, 1, 1, "", "__init__"], [15, 1, 1, "", "decision_function"], [15, 1, 1, "", "predict"], [15, 1, 1, "", "predict_log_proba"], [15, 1, 1, "", "predict_proba"]], "julearn.inspect.Inspector": [[16, 1, 1, "", "__init__"], [16, 2, 1, "", "folds"], [16, 2, 1, "", "model"]], "julearn.model_selection": [[18, 0, 1, "", "ContinuousStratifiedGroupKFold"], [19, 0, 1, "", "ContinuousStratifiedKFold"], [20, 0, 1, "", "RepeatedContinuousStratifiedGroupKFold"], [21, 0, 1, "", "RepeatedContinuousStratifiedKFold"], [22, 0, 1, "", "StratifiedBootstrap"], [23, 5, 1, "", "get_searcher"], [24, 5, 1, "", "list_searchers"], [25, 5, 1, "", "register_searcher"], [26, 5, 1, "", "reset_searcher_register"]], "julearn.model_selection.ContinuousStratifiedGroupKFold": [[18, 1, 1, "", "__init__"], [18, 1, 1, "", "get_metadata_routing"], [18, 1, 1, "", "get_n_splits"], [18, 1, 1, "", "set_split_request"], [18, 1, 1, "", "split"]], "julearn.model_selection.ContinuousStratifiedKFold": [[19, 1, 1, "", "__init__"], [19, 1, 1, "", "get_metadata_routing"], [19, 1, 1, "", "get_n_splits"], [19, 1, 1, "", "split"]], "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold": [[20, 1, 1, "", "__init__"], [20, 1, 1, "", "get_metadata_routing"], [20, 1, 1, "", "get_n_splits"], [20, 1, 1, "", "split"]], "julearn.model_selection.RepeatedContinuousStratifiedKFold": [[21, 1, 1, "", "__init__"], [21, 1, 1, "", "get_metadata_routing"], [21, 1, 1, "", "get_n_splits"], [21, 1, 1, "", "split"]], "julearn.model_selection.StratifiedBootstrap": [[22, 1, 1, "", "__init__"], [22, 1, 1, "", "get_metadata_routing"], [22, 1, 1, "", "get_n_splits"], [22, 1, 1, "", "split"]], "julearn.models": [[79, 3, 0, "-", "dynamic"], [28, 5, 1, "", "get_model"], [29, 5, 1, "", "list_models"], [30, 5, 1, "", "register_model"], [31, 5, 1, "", "reset_model_register"]], "julearn.models.dynamic": [[27, 0, 1, "", "DynamicSelection"]], "julearn.models.dynamic.DynamicSelection": [[27, 1, 1, "", "__init__"], [27, 1, 1, "", "fit"], [27, 1, 1, "", "get_metadata_routing"], [27, 1, 1, "", "get_params"], [27, 1, 1, "", "predict"], [27, 1, 1, "", "predict_proba"], [27, 1, 1, "", "score"], [27, 1, 1, "", "set_params"], [27, 1, 1, "", "set_score_request"]], "julearn.pipeline": [[32, 0, 1, "", "JuTargetPipeline"]], "julearn.pipeline.JuTargetPipeline": [[32, 1, 1, "", "__init__"], [32, 1, 1, "", "can_inverse_transform"], [32, 1, 1, "", "fit"], [32, 1, 1, "", "fit_transform"], [32, 1, 1, "", "inverse_transform"], [32, 2, 1, "", "needed_types"], [32, 1, 1, "", "transform"]], "julearn.pipeline.pipeline_creator": [[33, 0, 1, "", "Step"]], "julearn.pipeline.pipeline_creator.Step": [[33, 1, 1, "", "__init__"], [33, 4, 1, "", "apply_to"], [33, 4, 1, "", "estimator"], [33, 4, 1, "", "name"], [33, 4, 1, "", "needed_types"], [33, 4, 1, "", "params_to_tune"], [33, 4, 1, "", "row_select_col_type"], [33, 4, 1, "", "row_select_vals"]], "julearn.prepare": [[34, 5, 1, "", "check_consistency"], [35, 5, 1, "", "prepare_input_data"]], "julearn.scoring": [[38, 5, 1, "", "check_scoring"], [39, 5, 1, "", "get_scorer"], [40, 5, 1, "", "list_scorers"], [82, 3, 0, "-", "metrics"], [43, 5, 1, "", "register_scorer"], [44, 5, 1, "", "reset_scorer_register"]], "julearn.scoring.metrics": [[41, 5, 1, "", "r2_corr"], [42, 5, 1, "", "r_corr"]], "julearn.stats": [[45, 5, 1, "", "corrected_ttest"]], "julearn.transformers": [[46, 0, 1, "", "CBPM"], [47, 0, 1, "", "ChangeColumnTypes"], [48, 0, 1, "", "DropColumns"], [49, 0, 1, "", "FilterColumns"], [50, 0, 1, "", "JuColumnTransformer"], [51, 0, 1, "", "SetColumnTypes"], [53, 5, 1, "", "get_transformer"], [54, 5, 1, "", "list_transformers"], [55, 5, 1, "", "register_transformer"], [56, 5, 1, "", "reset_transformer_register"], [84, 3, 0, "-", "target"]], "julearn.transformers.CBPM": [[46, 1, 1, "", "__init__"], [46, 1, 1, "", "aggregate"], [46, 1, 1, "", "fit"], [46, 1, 1, "", "fit_transform"], [46, 1, 1, "", "get_feature_names_out"], [46, 1, 1, "", "get_metadata_routing"], [46, 1, 1, "", "get_params"], [46, 1, 1, "", "set_output"], [46, 1, 1, "", "set_params"], [46, 1, 1, "", "transform"]], "julearn.transformers.ChangeColumnTypes": [[47, 1, 1, "", "__init__"], [47, 1, 1, "", "filter_columns"], [47, 1, 1, "", "fit"], [47, 1, 1, "", "fit_transform"], [47, 1, 1, "", "get_apply_to"], [47, 1, 1, "", "get_feature_names_out"], [47, 1, 1, "", "get_metadata_routing"], [47, 1, 1, "", "get_needed_types"], [47, 1, 1, "", "get_params"], [47, 1, 1, "", "set_output"], [47, 1, 1, "", "set_params"], [47, 1, 1, "", "transform"]], "julearn.transformers.DropColumns": [[48, 1, 1, "", "__init__"], [48, 1, 1, "", "filter_columns"], [48, 1, 1, "", "fit"], [48, 1, 1, "", "fit_transform"], [48, 1, 1, "", "get_apply_to"], [48, 1, 1, "", "get_metadata_routing"], [48, 1, 1, "", "get_needed_types"], [48, 1, 1, "", "get_params"], [48, 1, 1, "", "get_support"], [48, 1, 1, "", "set_output"], [48, 1, 1, "", "set_params"], [48, 1, 1, "", "transform"]], "julearn.transformers.FilterColumns": [[49, 1, 1, "", "__init__"], [49, 1, 1, "", "filter_columns"], [49, 1, 1, "", "fit"], [49, 1, 1, "", "fit_transform"], [49, 1, 1, "", "get_apply_to"], [49, 1, 1, "", "get_feature_names_out"], [49, 1, 1, "", "get_metadata_routing"], [49, 1, 1, "", "get_needed_types"], [49, 1, 1, "", "get_params"], [49, 1, 1, "", "set_output"], [49, 1, 1, "", "set_params"], [49, 1, 1, "", "transform"]], "julearn.transformers.JuColumnTransformer": [[50, 1, 1, "", "__init__"], [50, 1, 1, "", "filter_columns"], [50, 1, 1, "", "fit"], [50, 1, 1, "", "fit_transform"], [50, 1, 1, "", "get_apply_to"], [50, 1, 1, "", "get_feature_names_out"], [50, 1, 1, "", "get_metadata_routing"], [50, 1, 1, "", "get_needed_types"], [50, 1, 1, "", "get_params"], [50, 1, 1, "", "set_output"], [50, 1, 1, "", "set_params"], [50, 1, 1, "", "transform"]], "julearn.transformers.SetColumnTypes": [[51, 1, 1, "", "__init__"], [51, 1, 1, "", "filter_columns"], [51, 1, 1, "", "fit"], [51, 1, 1, "", "fit_transform"], [51, 1, 1, "", "get_apply_to"], [51, 1, 1, "", "get_feature_names_out"], [51, 1, 1, "", "get_metadata_routing"], [51, 1, 1, "", "get_needed_types"], [51, 1, 1, "", "get_params"], [51, 1, 1, "", "set_output"], [51, 1, 1, "", "set_params"], [51, 1, 1, "", "transform"]], "julearn.transformers.confound_remover": [[52, 0, 1, "", "ConfoundRemover"]], "julearn.transformers.confound_remover.ConfoundRemover": [[52, 1, 1, "", "__init__"], [52, 1, 1, "", "filter_columns"], [52, 1, 1, "", "fit"], [52, 1, 1, "", "fit_transform"], [52, 1, 1, "", "get_apply_to"], [52, 1, 1, "", "get_feature_names_out"], [52, 1, 1, "", "get_metadata_routing"], [52, 1, 1, "", "get_needed_types"], [52, 1, 1, "", "get_params"], [52, 1, 1, "", "get_support"], [52, 1, 1, "", "set_output"], [52, 1, 1, "", "set_params"], [52, 1, 1, "", "transform"]], "julearn.transformers.target": [[57, 0, 1, "", "JuTargetTransformer"], [58, 0, 1, "", "JuTransformedTargetModel"], [59, 0, 1, "", "TargetConfoundRemover"], [60, 0, 1, "", "TransformedTargetWarning"], [61, 5, 1, "", "get_target_transformer"], [62, 5, 1, "", "list_target_transformers"], [63, 5, 1, "", "register_target_transformer"], [64, 5, 1, "", "reset_target_transformer_register"]], "julearn.transformers.target.JuTargetTransformer": [[57, 1, 1, "", "__init__"], [57, 1, 1, "", "fit"], [57, 1, 1, "", "fit_transform"], [57, 1, 1, "", "transform"]], "julearn.transformers.target.JuTransformedTargetModel": [[58, 1, 1, "", "__init__"], [58, 1, 1, "", "can_inverse_transform"], [58, 2, 1, "", "classes_"], [58, 1, 1, "", "decision_function"], [58, 1, 1, "", "filter_columns"], [58, 1, 1, "", "fit"], [58, 1, 1, "", "get_apply_to"], [58, 1, 1, "", "get_metadata_routing"], [58, 1, 1, "", "get_needed_types"], [58, 1, 1, "", "get_params"], [58, 1, 1, "", "predict"], [58, 1, 1, "", "predict_proba"], [58, 1, 1, "", "score"], [58, 1, 1, "", "set_params"], [58, 1, 1, "", "transform_target"]], "julearn.transformers.target.TargetConfoundRemover": [[59, 1, 1, "", "__init__"], [59, 1, 1, "", "fit"], [59, 1, 1, "", "fit_transform"], [59, 2, 1, "", "needed_types"], [59, 1, 1, "", "transform"]], "julearn.transformers.target.TransformedTargetWarning": [[60, 1, 1, "", "__init__"], [60, 4, 1, "", "args"], [60, 1, 1, "", "with_traceback"]], "julearn.utils": [[65, 5, 1, "", "configure_logging"], [66, 4, 1, "", "logger"], [67, 5, 1, "", "raise_error"], [85, 3, 0, "-", "typing"], [73, 5, 1, "", "warn_with_log"]], "julearn.utils.typing": [[68, 4, 1, "", "EstimatorLike"], [69, 0, 1, "", "EstimatorLikeFit1"], [70, 0, 1, "", "EstimatorLikeFit2"], [71, 0, 1, "", "EstimatorLikeFity"], [72, 0, 1, "", "JuEstimatorLike"]], "julearn.utils.typing.EstimatorLikeFit1": [[69, 1, 1, "", "__init__"], [69, 1, 1, "", "fit"], [69, 1, 1, "", "get_params"], [69, 1, 1, "", "set_params"]], "julearn.utils.typing.EstimatorLikeFit2": [[70, 1, 1, "", "__init__"], [70, 1, 1, "", "fit"], [70, 1, 1, "", "get_params"], [70, 1, 1, "", "set_params"]], "julearn.utils.typing.EstimatorLikeFity": [[71, 1, 1, "", "__init__"], [71, 1, 1, "", "fit"], [71, 1, 1, "", "get_params"], [71, 1, 1, "", "set_params"]], "julearn.utils.typing.JuEstimatorLike": [[72, 1, 1, "", "__init__"], [72, 1, 1, "", "fit"], [72, 1, 1, "", "get_apply_to"], [72, 1, 1, "", "get_needed_types"], [72, 1, 1, "", "get_params"], [72, 1, 1, "", "set_params"]], "julearn.viz": [[74, 5, 1, "", "plot_scores"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:module", "4": "py:attribute", "5": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "module", "Python module"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "titleterms": {"base": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 127], "class": [0, 76, 78, 79, 80, 84, 85], "function": [0, 1, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 117], "config": [1, 13, 14], "julearn": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 87, 120, 125, 127, 128, 141], "pipelinecr": [2, 140], "exampl": [2, 3, 16, 17, 19, 22, 36, 40, 43, 45, 65, 74, 121, 122], "us": [2, 3, 16, 17, 19, 22, 36, 40, 43, 45, 65, 74, 109, 114, 123, 128, 140], "targetpipelinecr": 3, "columntyp": 4, "columntypeslik": 5, "jubaseestim": 6, "jutransform": 7, "wrapmodel": 8, "change_column_typ": 9, "ensure_column_typ": 10, "get_column_typ": 11, "make_type_selector": 12, "get_config": 13, "set_config": 14, "inspect": [15, 16, 17, 76, 98, 99, 100, 102, 132], "foldsinspector": 15, "inspector": 16, "preprocess": [17, 101, 134, 140], "model_select": [18, 19, 20, 21, 22, 23, 24, 25, 26], "continuousstratifiedgroupkfold": 18, "continuousstratifiedkfold": 19, "repeatedcontinuousstratifiedgroupkfold": 20, "repeatedcontinuousstratifiedkfold": 21, "stratifiedbootstrap": 22, "get_search": 23, "list_search": 24, "register_search": 25, "reset_searcher_regist": 26, "model": [27, 28, 29, 30, 31, 78, 79, 95, 96, 99, 100, 104, 113, 119, 127, 130, 132, 133, 138, 139, 140], "dynam": [27, 79, 119], "dynamicselect": 27, "get_model": 28, "list_model": 29, "register_model": 30, "reset_model_regist": 31, "pipelin": [32, 33, 80, 119, 140], "jutargetpipelin": 32, "pipeline_cr": 33, "step": [33, 119], "prepar": [34, 35, 81], "check_consist": 34, "prepare_input_data": 35, "run_cross_valid": [36, 135, 136, 139, 140], "run_fit": 37, "score": [38, 39, 40, 41, 42, 43, 44, 82, 105, 117, 138, 139], "check_scor": 38, "get_scor": 39, "list_scor": 40, "metric": [41, 42, 82, 139], "r2_corr": 41, "r_corr": 42, "register_scor": 43, "reset_scorer_regist": 44, "stat": [45, 83], "corrected_ttest": 45, "transform": [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 84, 105, 119], "cbpm": [46, 127], "changecolumntyp": 47, "dropcolumn": 48, "filtercolumn": 49, "jucolumntransform": 50, "setcolumntyp": 51, "confound_remov": 52, "confoundremov": 52, "get_transform": 53, "list_transform": 54, "register_transform": 55, "reset_transformer_regist": 56, "target": [57, 58, 59, 60, 61, 62, 63, 64, 84, 105, 128, 134], "jutargettransform": 57, "jutransformedtargetmodel": 58, "targetconfoundremov": 59, "transformedtargetwarn": 60, "get_target_transform": 61, "list_target_transform": 62, "register_target_transform": 63, "reset_target_transformer_regist": 64, "util": [65, 66, 67, 68, 69, 70, 71, 72, 73, 85], "configure_log": 65, "logger": 66, "raise_error": 67, "type": [68, 69, 70, 71, 72, 85, 133, 136, 140], "estimatorlik": 68, "estimatorlikefit1": 69, "estimatorlikefit2": 70, "estimatorlikef": 71, "juestimatorlik": 72, "warn_with_log": 73, "viz": [74, 123], "plot_scor": 74, "api": [75, 77, 141], "refer": [75, 91, 92, 99, 107, 108, 109, 127, 128, 129, 135, 140], "main": 77, "select": [78, 79, 119, 131, 140], "deslib": 79, "visual": [86, 138], "start": [87, 124], "multiclass": 88, "classif": [88, 93, 110], "regress": [89, 90, 106, 117, 128], "analysi": [89, 90, 106], "stratifi": 90, "k": 90, "fold": [90, 102], "cv": [90, 92], "work": 91, "panda": 91, "merg": 91, "join": 91, "datafram": [91, 119], "group": [92, 129], "deal": [92, 99], "cross": [92, 99, 128, 129, 135, 139], "valid": [92, 99, 128, 129, 135, 139], "techniqu": [92, 99], "simpl": [93, 96], "binari": 93, "comput": [94, 97, 103, 111, 115, 118], "time": [94, 97, 103, 111, 115, 118], "comparison": [95, 96, 113, 138], "svm": 99, "random": 100, "forest": 100, "variabl": [100, 105], "import": 100, "varianc": 101, "threshold": 101, "zscore": 101, "pca": 101, "wise": 102, "predict": [102, 127], "complex": 104, "z": 105, "tune": [107, 108, 109, 130], "multipl": 107, "hyperparamet": [107, 108, 109, 130, 140], "grid": [107, 130], "bayesian": 109, "search": 109, "stack": [110, 133], "confound": [112, 113, 114, 128], "remov": [113, 114, 128], "return": [114, 139], "typic": 114, "case": 114, "custom": [116, 117, 119], "overview": 119, "avail": 119, "scaler": 119, "featur": [119, 128, 133, 136, 140, 141], "oper": 119, "decomposit": 119, "estim": [119, 133, 139], "support": 119, "vector": 119, "machin": 119, "ensembl": 119, "gaussian": 119, "process": 119, "linear": 119, "naiv": 119, "bay": 119, "dummi": 119, "configur": 120, "contribut": 121, "set": [121, 140], "up": 121, "local": 121, "develop": 121, "environ": 121, "github": 121, "pull": 121, "request": 121, "guidelin": 121, "run": 121, "unit": 121, "test": 121, "ad": 121, "build": [121, 140], "document": [121, 125, 141], "write": 121, "content": [122, 125, 131], "faq": 123, "i": [123, 125, 128], "have": 123, "issu": 123, "depend": [123, 124], "modul": 123, "how": 123, "do": 123, "interact": 123, "plot": 123, "get": 124, "requir": 124, "setup": 124, "suggest": 124, "instal": 124, "option": 124, "welcom": 125, "": [125, 141], "what": [125, 137, 141], "why": [125, 135], "tabl": [125, 131], "indic": 125, "maintain": 126, "version": 126, "releas": 126, "new": [126, 141], "connectom": 127, "consist": 128, "from": 128, "should": 128, "splitter": [129, 139], "stratif": 129, "paramet": 130, "v": 130, "searcher": 130, "specifi": 130, "distribut": 130, "more": 130, "than": 130, "one": 130, "deeper": 131, "topic": 131, "fit": 133, "each": 133, "all": 133, "specif": [133, 140], "appli": 134, "The": [135, 139], "fundament": 135, "essenc": 135, "data": 136, "input": 136, "give": 136, "you": 137, "realli": 137, "need": 137, "know": 137, "statist": 138, "evalu": 139, "output": 139, "made": 140, "easi": 140, "0": 141, "3": 141, "5": 141, "dev5": 141, "2024": 141, "10": 141, "21": 141, "enhanc": 141, "4": 141, "17": 141, "bugfix": 141, "05": 141, "16": 141, "improv": 141, "2": 141, "03": 141, "misc": 141, "1": 141, "01": 141, "23": 141, "2023": 141, "07": 141, "19": 141, "2022": 141, "chang": 141}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"Base": [[0, "module-julearn.base"]], "Classes": [[0, "classes"], [76, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [84, "classes"], [84, "id1"], [85, "classes"], [85, "id1"]], "Functions": [[0, "functions"], [1, "functions"], [76, "functions"], [77, "functions"], [78, "functions"], [79, "functions"], [81, "functions"], [82, "functions"], [82, "id1"], [83, "functions"], [84, "functions"], [84, "id2"], [85, "functions"], [86, "functions"]], "Config": [[1, "module-julearn.config"]], "julearn.PipelineCreator": [[2, "julearn-pipelinecreator"]], "Examples using julearn.PipelineCreator": [[2, "examples-using-julearn-pipelinecreator"]], "julearn.TargetPipelineCreator": [[3, "julearn-targetpipelinecreator"]], "Examples using julearn.TargetPipelineCreator": [[3, "examples-using-julearn-targetpipelinecreator"]], "julearn.base.ColumnTypes": [[4, "julearn-base-columntypes"]], "julearn.base.ColumnTypesLike": [[5, "julearn-base-columntypeslike"]], "julearn.base.JuBaseEstimator": [[6, "julearn-base-jubaseestimator"]], "julearn.base.JuTransformer": [[7, "julearn-base-jutransformer"]], "julearn.base.WrapModel": [[8, "julearn-base-wrapmodel"]], "julearn.base.change_column_type": [[9, "julearn-base-change-column-type"]], "julearn.base.ensure_column_types": [[10, "julearn-base-ensure-column-types"]], "julearn.base.get_column_type": [[11, "julearn-base-get-column-type"]], "julearn.base.make_type_selector": [[12, "julearn-base-make-type-selector"]], "julearn.config.get_config": [[13, "julearn-config-get-config"]], "julearn.config.set_config": [[14, "julearn-config-set-config"]], "julearn.inspect.FoldsInspector": [[15, "julearn-inspect-foldsinspector"]], "julearn.inspect.Inspector": [[16, "julearn-inspect-inspector"]], "Examples using julearn.inspect.Inspector": [[16, "examples-using-julearn-inspect-inspector"]], "julearn.inspect.preprocess": [[17, "julearn-inspect-preprocess"]], "Examples using julearn.inspect.preprocess": [[17, "examples-using-julearn-inspect-preprocess"]], "julearn.model_selection.ContinuousStratifiedGroupKFold": [[18, "julearn-model-selection-continuousstratifiedgroupkfold"]], "julearn.model_selection.ContinuousStratifiedKFold": [[19, "julearn-model-selection-continuousstratifiedkfold"]], "Examples using julearn.model_selection.ContinuousStratifiedKFold": [[19, "examples-using-julearn-model-selection-continuousstratifiedkfold"]], "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold": [[20, "julearn-model-selection-repeatedcontinuousstratifiedgroupkfold"]], "julearn.model_selection.RepeatedContinuousStratifiedKFold": [[21, "julearn-model-selection-repeatedcontinuousstratifiedkfold"]], "julearn.model_selection.StratifiedBootstrap": [[22, "julearn-model-selection-stratifiedbootstrap"]], "Examples using julearn.model_selection.StratifiedBootstrap": [[22, "examples-using-julearn-model-selection-stratifiedbootstrap"]], "julearn.model_selection.get_searcher": [[23, "julearn-model-selection-get-searcher"]], "julearn.model_selection.list_searchers": [[24, "julearn-model-selection-list-searchers"]], "julearn.model_selection.register_searcher": [[25, "julearn-model-selection-register-searcher"]], "julearn.model_selection.reset_searcher_register": [[26, "julearn-model-selection-reset-searcher-register"]], "julearn.models.dynamic.DynamicSelection": [[27, "julearn-models-dynamic-dynamicselection"]], "julearn.models.get_model": [[28, "julearn-models-get-model"]], "julearn.models.list_models": [[29, "julearn-models-list-models"]], "julearn.models.register_model": [[30, "julearn-models-register-model"]], "julearn.models.reset_model_register": [[31, "julearn-models-reset-model-register"]], "julearn.pipeline.JuTargetPipeline": [[32, "julearn-pipeline-jutargetpipeline"]], "julearn.pipeline.pipeline_creator.Step": [[33, "julearn-pipeline-pipeline-creator-step"]], "julearn.prepare.check_consistency": [[34, "julearn-prepare-check-consistency"]], "julearn.prepare.prepare_input_data": [[35, "julearn-prepare-prepare-input-data"]], "julearn.run_cross_validation": [[36, "julearn-run-cross-validation"]], "Examples using julearn.run_cross_validation": [[36, "examples-using-julearn-run-cross-validation"]], "julearn.run_fit": [[37, "julearn-run-fit"]], "julearn.scoring.check_scoring": [[38, "julearn-scoring-check-scoring"]], "julearn.scoring.get_scorer": [[39, "julearn-scoring-get-scorer"]], "julearn.scoring.list_scorers": [[40, "julearn-scoring-list-scorers"]], "Examples using julearn.scoring.list_scorers": [[40, "examples-using-julearn-scoring-list-scorers"]], "julearn.scoring.metrics.r2_corr": [[41, "julearn-scoring-metrics-r2-corr"]], "julearn.scoring.metrics.r_corr": [[42, "julearn-scoring-metrics-r-corr"]], "julearn.scoring.register_scorer": [[43, "julearn-scoring-register-scorer"]], "Examples using julearn.scoring.register_scorer": [[43, "examples-using-julearn-scoring-register-scorer"]], "julearn.scoring.reset_scorer_register": [[44, "julearn-scoring-reset-scorer-register"]], "julearn.stats.corrected_ttest": [[45, "julearn-stats-corrected-ttest"]], "Examples using julearn.stats.corrected_ttest": [[45, "examples-using-julearn-stats-corrected-ttest"]], "julearn.transformers.CBPM": [[46, "julearn-transformers-cbpm"]], "julearn.transformers.ChangeColumnTypes": [[47, "julearn-transformers-changecolumntypes"]], "julearn.transformers.DropColumns": [[48, "julearn-transformers-dropcolumns"]], "julearn.transformers.FilterColumns": [[49, "julearn-transformers-filtercolumns"]], "julearn.transformers.JuColumnTransformer": [[50, "julearn-transformers-jucolumntransformer"]], "julearn.transformers.SetColumnTypes": [[51, "julearn-transformers-setcolumntypes"]], "julearn.transformers.confound_remover.ConfoundRemover": [[52, "julearn-transformers-confound-remover-confoundremover"]], "julearn.transformers.get_transformer": [[53, "julearn-transformers-get-transformer"]], "julearn.transformers.list_transformers": [[54, "julearn-transformers-list-transformers"]], "julearn.transformers.register_transformer": [[55, "julearn-transformers-register-transformer"]], "julearn.transformers.reset_transformer_register": [[56, "julearn-transformers-reset-transformer-register"]], "julearn.transformers.target.JuTargetTransformer": [[57, "julearn-transformers-target-jutargettransformer"]], "julearn.transformers.target.JuTransformedTargetModel": [[58, "julearn-transformers-target-jutransformedtargetmodel"]], "julearn.transformers.target.TargetConfoundRemover": [[59, "julearn-transformers-target-targetconfoundremover"]], "julearn.transformers.target.TransformedTargetWarning": [[60, "julearn-transformers-target-transformedtargetwarning"]], "julearn.transformers.target.get_target_transformer": [[61, "julearn-transformers-target-get-target-transformer"]], "julearn.transformers.target.list_target_transformers": [[62, "julearn-transformers-target-list-target-transformers"]], "julearn.transformers.target.register_target_transformer": [[63, "julearn-transformers-target-register-target-transformer"]], "julearn.transformers.target.reset_target_transformer_register": [[64, "julearn-transformers-target-reset-target-transformer-register"]], "julearn.utils.configure_logging": [[65, "julearn-utils-configure-logging"]], "Examples using julearn.utils.configure_logging": [[65, "examples-using-julearn-utils-configure-logging"]], "julearn.utils.logger": [[66, "julearn-utils-logger"]], "julearn.utils.raise_error": [[67, "julearn-utils-raise-error"]], "julearn.utils.typing.EstimatorLike": [[68, "julearn-utils-typing-estimatorlike"]], "julearn.utils.typing.EstimatorLikeFit1": [[69, "julearn-utils-typing-estimatorlikefit1"]], "julearn.utils.typing.EstimatorLikeFit2": [[70, "julearn-utils-typing-estimatorlikefit2"]], "julearn.utils.typing.EstimatorLikeFity": [[71, "julearn-utils-typing-estimatorlikefity"]], "julearn.utils.typing.JuEstimatorLike": [[72, "julearn-utils-typing-juestimatorlike"]], "julearn.utils.warn_with_log": [[73, "julearn-utils-warn-with-log"]], "julearn.viz.plot_scores": [[74, "julearn-viz-plot-scores"]], "Examples using julearn.viz.plot_scores": [[74, "examples-using-julearn-viz-plot-scores"]], "API Reference": [[75, "api-reference"]], "Inspect": [[76, "module-julearn.inspect"]], "Main API": [[77, "module-julearn.api"]], "Model Selection": [[78, "module-julearn.model_selection"]], "Models": [[79, "module-julearn.models"]], "Dynamic Selection (DESLib)": [[79, "dynamic-selection-deslib"]], "Pipeline": [[80, "module-julearn.pipeline"]], "Prepare": [[81, "module-julearn.prepare"]], "Scoring": [[82, "module-julearn.scoring"]], "Scoring Metrics": [[82, "module-julearn.scoring.metrics"]], "Stats": [[83, "module-julearn.stats"]], "Transformers": [[84, "module-julearn.transformers"], [119, "transformers"]], "Target Transformers": [[84, "module-julearn.transformers.target"]], "Utils": [[85, "module-julearn.utils"]], "Typing": [[85, "module-julearn.utils.typing"]], "Visualization": [[86, "visualization"]], "Starting with julearn": [[87, "starting-with-julearn"]], "Multiclass Classification": [[88, "multiclass-classification"]], "Regression Analysis": [[89, "regression-analysis"], [106, "regression-analysis"]], "Stratified K-fold CV for regression analysis": [[90, "stratified-k-fold-cv-for-regression-analysis"]], "Working with pandas": [[91, "working-with-pandas"]], "References": [[91, "references"], [92, "references"], [99, "references"], [107, "references"], [108, "references"], [109, "references"]], "Merging or joining DataFrame": [[91, "merging-or-joining-dataframe"]], "Grouped CV": [[92, "grouped-cv"]], "Dealing with Cross-Validation techniques": [[92, "dealing-with-cross-validation-techniques"], [99, "dealing-with-cross-validation-techniques"]], "Simple Binary Classification": [[93, "simple-binary-classification"]], "Computation times": [[94, "computation-times"], [97, "computation-times"], [103, "computation-times"], [111, "computation-times"], [115, "computation-times"], [118, "computation-times"]], "Model Comparison": [[95, "model-comparison"], [138, "model-comparison"]], "Simple Model Comparison": [[96, "simple-model-comparison"]], "Inspection": [[98, "inspection"]], "Inspecting SVM models": [[99, "inspecting-svm-models"]], "Inspecting Random Forest models": [[100, "inspecting-random-forest-models"]], "Random Forest variable importance": [[100, "random-forest-variable-importance"]], "Preprocessing with variance threshold, zscore and PCA": [[101, "preprocessing-with-variance-threshold-zscore-and-pca"]], "Inspecting the fold-wise predictions": [[102, "inspecting-the-fold-wise-predictions"]], "Complex Models": [[104, "complex-models"]], "Transforming target variable with z-score": [[105, "transforming-target-variable-with-z-score"]], "Tuning Multiple Hyperparameters Grids": [[107, "tuning-multiple-hyperparameters-grids"]], "Tuning Hyperparameters": [[108, "tuning-hyperparameters"]], "Tuning Hyperparameters using Bayesian Search": [[109, "tuning-hyperparameters-using-bayesian-search"]], "Stacking Classification": [[110, "stacking-classification"]], "Confounds": [[112, "confounds"]], "Confound Removal (model comparison)": [[113, "confound-removal-model-comparison"]], "Return Confounds in Confound Removal": [[114, "return-confounds-in-confound-removal"]], "Confound Removal Typical Use Case": [[114, "confound-removal-typical-use-case"]], "Customization": [[116, "customization"]], "Custom Scoring Function for Regression": [[117, "custom-scoring-function-for-regression"]], "Overview of available Pipeline Steps": [[119, "overview-of-available-pipeline-steps"]], "Scalers": [[119, "scalers"]], "Feature Selection": [[119, "feature-selection"]], "DataFrame operations": [[119, "dataframe-operations"]], "Decomposition": [[119, "decomposition"]], "Custom": [[119, "custom"]], "Models (Estimators)": [[119, "models-estimators"]], "Support Vector Machines": [[119, "support-vector-machines"]], "Ensemble": [[119, "ensemble"]], "Gaussian Processes": [[119, "gaussian-processes"]], "Linear Models": [[119, "linear-models"]], "Naive Bayes": [[119, "naive-bayes"]], "Dynamic Selection": [[119, "dynamic-selection"]], "Dummy": [[119, "dummy"]], "Configuring julearn": [[120, "configuring-julearn"]], "Contributing": [[121, "contributing"]], "Setting up the local development environment": [[121, "setting-up-the-local-development-environment"]], "GitHub Pull Request guidelines": [[121, "github-pull-request-guidelines"]], "Running unit tests": [[121, "running-unit-tests"]], "Adding and building documentation": [[121, "adding-and-building-documentation"]], "Writing Examples": [[121, "writing-examples"]], "Examples": [[122, "examples"]], "Contents:": [[122, null]], "FAQs": [[123, "faqs"]], "I have issues with the dependencies for the viz module.": [[123, "i-have-issues-with-the-dependencies-for-the-viz-module"]], "How do I use the viz interactive plots?": [[123, "how-do-i-use-the-viz-interactive-plots"]], "Getting started": [[124, "getting-started"]], "Requirements": [[124, "requirements"]], "Setup suggestion": [[124, "setup-suggestion"]], "Installing": [[124, "installing"]], "Optional Dependencies": [[124, "optional-dependencies"]], "Welcome to julearn\u2019s documentation!": [[125, "welcome-to-julearn-s-documentation"]], "What is julearn?": [[125, "what-is-julearn"]], "Why julearn?": [[125, "why-julearn"]], "Table of Contents": [[125, "table-of-contents"], [131, null]], "Indices and tables": [[125, "indices-and-tables"], [125, "id1"]], "Maintaining": [[126, "maintaining"]], "Versioning": [[126, "versioning"]], "Releasing a new version": [[126, "releasing-a-new-version"]], "Connectome-based Predictive Modeling (CBPM)": [[127, "connectome-based-predictive-modeling-cbpm"]], "CBPM in julearn": [[127, "cbpm-in-julearn"]], "References:": [[127, null], [128, null], [129, null], [135, null], [140, null]], "Cross-validation consistent Confound Removal": [[128, "cross-validation-consistent-confound-removal"]], "Confound Removal in julearn": [[128, "confound-removal-in-julearn"]], "Removing Confounds from the Features": [[128, "removing-confounds-from-the-features"]], "Removing Confounds from the Target": [[128, "removing-confounds-from-the-target"]], "Should I use Confound Regression?": [[128, "should-i-use-confound-regression"]], "Cross-validation splitters": [[129, "cross-validation-splitters"], [139, "cross-validation-splitters"]], "Stratification": [[129, "stratification"]], "Grouping": [[129, "grouping"]], "Hyperparameter Tuning": [[130, "hyperparameter-tuning"], [130, "id1"]], "Parameters vs Hyperparameters": [[130, "parameters-vs-hyperparameters"]], "Searchers": [[130, "searchers"]], "Specifying distributions": [[130, "specifying-distributions"]], "Tuning more than one grid": [[130, "tuning-more-than-one-grid"]], "Models as hyperparameters": [[130, "models-as-hyperparameters"]], "Selected deeper topics": [[131, "selected-deeper-topics"]], "Inspecting Models": [[132, "inspecting-models"]], "Stacking Models": [[133, "stacking-models"]], "Fitting each estimator on all of the features": [[133, "fitting-each-estimator-on-all-of-the-features"]], "Fitting each estimator on a specific feature type": [[133, "fitting-each-estimator-on-a-specific-feature-type"]], "Applying preprocessing to the target": [[134, "applying-preprocessing-to-the-target"]], "Why cross validation?": [[135, "why-cross-validation"]], "Cross-validation - The fundamentals": [[135, "cross-validation-the-fundamentals"]], "The essence of run_cross_validation()": [[135, "the-essence-of-run-cross-validation"]], "Data": [[136, "data"]], "Data input to run_cross_validation()": [[136, "data-input-to-run-cross-validation"]], "Giving types to features": [[136, "giving-types-to-features"]], "What you really need to know": [[137, "what-you-really-need-to-know"]], "Statistical comparisons": [[138, "statistical-comparisons"]], "Score visualizations": [[138, "score-visualizations"]], "Model Evaluation": [[139, "model-evaluation"]], "The output of run_cross_validation()": [[139, "the-output-of-run-cross-validation"]], "Cross-validation scores": [[139, "cross-validation-scores"]], "Returning a model (estimator)": [[139, "returning-a-model-estimator"]], "Scoring metrics": [[139, "scoring-metrics"]], "Model Building": [[140, "model-building"]], "Pipeline specification in run_cross_validation()": [[140, "pipeline-specification-in-run-cross-validation"]], "Feature preprocessing": [[140, "feature-preprocessing"]], "Pipeline specification made easy with the PipelineCreator": [[140, "pipeline-specification-made-easy-with-the-pipelinecreator"]], "Setting hyperparameters": [[140, "setting-hyperparameters"]], "Selective preprocessing using feature types": [[140, "selective-preprocessing-using-feature-types"]], "What\u2019s new": [[141, "what-s-new"]], "Julearn 0.3.5.dev5 (2024-10-21)": [[141, "julearn-0-3-5-dev5-2024-10-21"]], "Enhancements": [[141, "enhancements"], [141, "id1"], [141, "id5"], [141, "id8"], [141, "id13"]], "Julearn 0.3.4 (2024-10-17)": [[141, "julearn-0-3-4-2024-10-17"]], "Bugfixes": [[141, "bugfixes"], [141, "id2"], [141, "id3"], [141, "id6"], [141, "id11"]], "Julearn 0.3.3 (2024-05-16)": [[141, "julearn-0-3-3-2024-05-16"]], "Improved Documentation": [[141, "improved-documentation"], [141, "id4"], [141, "id7"], [141, "id12"]], "Julearn 0.3.2 (2024-05-03)": [[141, "julearn-0-3-2-2024-05-03"]], "Features": [[141, "features"], [141, "id9"], [141, "id14"]], "Misc": [[141, "misc"], [141, "id10"]], "Julearn 0.3.1 (2024-01-23)": [[141, "julearn-0-3-1-2024-01-23"]], "Julearn 0.3.0 (2023-07-19)": [[141, "julearn-0-3-0-2023-07-19"]], "Julearn 0.2.5 (2022-07-21)": [[141, "julearn-0-2-5-2022-07-21"]], "API Changes": [[141, "api-changes"]]}, "indexentries": {"julearn.base": [[0, "module-julearn.base"]], "module": [[0, "module-julearn.base"], [1, "module-julearn.config"], [76, "module-julearn.inspect"], [77, "module-julearn.api"], [78, "module-julearn.model_selection"], [79, "module-julearn.models"], [79, "module-julearn.models.dynamic"], [80, "module-julearn.pipeline"], [81, "module-julearn.prepare"], [82, "module-julearn.scoring"], [82, "module-julearn.scoring.metrics"], [83, "module-julearn.stats"], [84, "module-julearn.transformers"], [84, "module-julearn.transformers.target"], [85, "module-julearn.utils"], [85, "module-julearn.utils.typing"], [86, "module-julearn.viz"]], "julearn.config": [[1, "module-julearn.config"]], "pipelinecreator (class in julearn)": [[2, "julearn.PipelineCreator"]], "__init__() (julearn.pipelinecreator method)": [[2, "julearn.PipelineCreator.__init__"]], "add() (julearn.pipelinecreator method)": [[2, "julearn.PipelineCreator.add"]], "copy() (julearn.pipelinecreator method)": [[2, "julearn.PipelineCreator.copy"]], "from_list() (julearn.pipelinecreator class method)": [[2, "julearn.PipelineCreator.from_list"]], "has_model() (julearn.pipelinecreator method)": [[2, "julearn.PipelineCreator.has_model"]], "split() (julearn.pipelinecreator method)": [[2, "julearn.PipelineCreator.split"]], "steps (julearn.pipelinecreator property)": [[2, "julearn.PipelineCreator.steps"]], "to_pipeline() (julearn.pipelinecreator method)": [[2, "julearn.PipelineCreator.to_pipeline"]], "targetpipelinecreator (class in julearn)": [[3, "julearn.TargetPipelineCreator"]], "__init__() (julearn.targetpipelinecreator method)": [[3, "julearn.TargetPipelineCreator.__init__"]], "add() (julearn.targetpipelinecreator method)": [[3, "julearn.TargetPipelineCreator.add"]], "to_pipeline() (julearn.targetpipelinecreator method)": [[3, "julearn.TargetPipelineCreator.to_pipeline"]], "columntypes (class in julearn.base)": [[4, "julearn.base.ColumnTypes"]], "__init__() (julearn.base.columntypes method)": [[4, "julearn.base.ColumnTypes.__init__"]], "add() (julearn.base.columntypes method)": [[4, "julearn.base.ColumnTypes.add"]], "copy() (julearn.base.columntypes method)": [[4, "julearn.base.ColumnTypes.copy"]], "pattern (julearn.base.columntypes property)": [[4, "julearn.base.ColumnTypes.pattern"]], "to_type_selector() (julearn.base.columntypes method)": [[4, "julearn.base.ColumnTypes.to_type_selector"]], "columntypeslike (in module julearn.base)": [[5, "julearn.base.ColumnTypesLike"]], "jubaseestimator (class in julearn.base)": [[6, "julearn.base.JuBaseEstimator"]], "__init__() (julearn.base.jubaseestimator method)": [[6, "julearn.base.JuBaseEstimator.__init__"]], "filter_columns() (julearn.base.jubaseestimator method)": [[6, "julearn.base.JuBaseEstimator.filter_columns"]], "get_apply_to() (julearn.base.jubaseestimator method)": [[6, "julearn.base.JuBaseEstimator.get_apply_to"]], "get_metadata_routing() (julearn.base.jubaseestimator method)": [[6, "julearn.base.JuBaseEstimator.get_metadata_routing"]], "get_needed_types() (julearn.base.jubaseestimator method)": [[6, "julearn.base.JuBaseEstimator.get_needed_types"]], "get_params() (julearn.base.jubaseestimator method)": [[6, "julearn.base.JuBaseEstimator.get_params"]], "set_params() (julearn.base.jubaseestimator method)": [[6, "julearn.base.JuBaseEstimator.set_params"]], "jutransformer (class in julearn.base)": [[7, "julearn.base.JuTransformer"]], "__init__() (julearn.base.jutransformer method)": [[7, "julearn.base.JuTransformer.__init__"]], "filter_columns() (julearn.base.jutransformer method)": [[7, "julearn.base.JuTransformer.filter_columns"]], "fit() (julearn.base.jutransformer method)": [[7, "julearn.base.JuTransformer.fit"]], "fit_transform() (julearn.base.jutransformer method)": [[7, "julearn.base.JuTransformer.fit_transform"]], "get_apply_to() (julearn.base.jutransformer method)": [[7, "julearn.base.JuTransformer.get_apply_to"]], "get_metadata_routing() (julearn.base.jutransformer method)": [[7, "julearn.base.JuTransformer.get_metadata_routing"]], "get_needed_types() (julearn.base.jutransformer method)": [[7, "julearn.base.JuTransformer.get_needed_types"]], "get_params() (julearn.base.jutransformer method)": [[7, "julearn.base.JuTransformer.get_params"]], "set_output() (julearn.base.jutransformer method)": [[7, "julearn.base.JuTransformer.set_output"]], "set_params() (julearn.base.jutransformer method)": [[7, "julearn.base.JuTransformer.set_params"]], "wrapmodel (class in julearn.base)": [[8, "julearn.base.WrapModel"]], "__init__() (julearn.base.wrapmodel method)": [[8, "julearn.base.WrapModel.__init__"]], "classes_ (julearn.base.wrapmodel property)": [[8, "julearn.base.WrapModel.classes_"]], "decision_function() (julearn.base.wrapmodel method)": [[8, "julearn.base.WrapModel.decision_function"]], "filter_columns() (julearn.base.wrapmodel method)": [[8, "julearn.base.WrapModel.filter_columns"]], "fit() (julearn.base.wrapmodel method)": [[8, "julearn.base.WrapModel.fit"]], "get_apply_to() (julearn.base.wrapmodel method)": [[8, "julearn.base.WrapModel.get_apply_to"]], "get_metadata_routing() (julearn.base.wrapmodel method)": [[8, "julearn.base.WrapModel.get_metadata_routing"]], "get_needed_types() (julearn.base.wrapmodel method)": [[8, "julearn.base.WrapModel.get_needed_types"]], "get_params() (julearn.base.wrapmodel method)": [[8, "julearn.base.WrapModel.get_params"]], "predict() (julearn.base.wrapmodel method)": [[8, "julearn.base.WrapModel.predict"]], "predict_log_proba() (julearn.base.wrapmodel method)": [[8, "julearn.base.WrapModel.predict_log_proba"]], "predict_proba() (julearn.base.wrapmodel method)": [[8, "julearn.base.WrapModel.predict_proba"]], "score() (julearn.base.wrapmodel method)": [[8, "julearn.base.WrapModel.score"]], "set_params() (julearn.base.wrapmodel method)": [[8, "julearn.base.WrapModel.set_params"]], "change_column_type() (in module julearn.base)": [[9, "julearn.base.change_column_type"]], "ensure_column_types() (in module julearn.base)": [[10, "julearn.base.ensure_column_types"]], "get_column_type() (in module julearn.base)": [[11, "julearn.base.get_column_type"]], "make_type_selector() (in module julearn.base)": [[12, "julearn.base.make_type_selector"]], "get_config() (in module julearn.config)": [[13, "julearn.config.get_config"]], "set_config() (in module julearn.config)": [[14, "julearn.config.set_config"]], "foldsinspector (class in julearn.inspect)": [[15, "julearn.inspect.FoldsInspector"]], "__init__() (julearn.inspect.foldsinspector method)": [[15, "julearn.inspect.FoldsInspector.__init__"]], "decision_function() (julearn.inspect.foldsinspector method)": [[15, "julearn.inspect.FoldsInspector.decision_function"]], "predict() (julearn.inspect.foldsinspector method)": [[15, "julearn.inspect.FoldsInspector.predict"]], "predict_log_proba() (julearn.inspect.foldsinspector method)": [[15, "julearn.inspect.FoldsInspector.predict_log_proba"]], "predict_proba() (julearn.inspect.foldsinspector method)": [[15, "julearn.inspect.FoldsInspector.predict_proba"]], "inspector (class in julearn.inspect)": [[16, "julearn.inspect.Inspector"]], "__init__() (julearn.inspect.inspector method)": [[16, "julearn.inspect.Inspector.__init__"]], "folds (julearn.inspect.inspector property)": [[16, "julearn.inspect.Inspector.folds"]], "model (julearn.inspect.inspector property)": [[16, "julearn.inspect.Inspector.model"]], "preprocess() (in module julearn.inspect)": [[17, "julearn.inspect.preprocess"]], "continuousstratifiedgroupkfold (class in julearn.model_selection)": [[18, "julearn.model_selection.ContinuousStratifiedGroupKFold"]], "__init__() (julearn.model_selection.continuousstratifiedgroupkfold method)": [[18, "julearn.model_selection.ContinuousStratifiedGroupKFold.__init__"]], "get_metadata_routing() (julearn.model_selection.continuousstratifiedgroupkfold method)": [[18, "julearn.model_selection.ContinuousStratifiedGroupKFold.get_metadata_routing"]], "get_n_splits() (julearn.model_selection.continuousstratifiedgroupkfold method)": [[18, "julearn.model_selection.ContinuousStratifiedGroupKFold.get_n_splits"]], "set_split_request() (julearn.model_selection.continuousstratifiedgroupkfold method)": [[18, "julearn.model_selection.ContinuousStratifiedGroupKFold.set_split_request"]], "split() (julearn.model_selection.continuousstratifiedgroupkfold method)": [[18, "julearn.model_selection.ContinuousStratifiedGroupKFold.split"]], "continuousstratifiedkfold (class in julearn.model_selection)": [[19, "julearn.model_selection.ContinuousStratifiedKFold"]], "__init__() (julearn.model_selection.continuousstratifiedkfold method)": [[19, "julearn.model_selection.ContinuousStratifiedKFold.__init__"]], "get_metadata_routing() (julearn.model_selection.continuousstratifiedkfold method)": [[19, "julearn.model_selection.ContinuousStratifiedKFold.get_metadata_routing"]], "get_n_splits() (julearn.model_selection.continuousstratifiedkfold method)": [[19, "julearn.model_selection.ContinuousStratifiedKFold.get_n_splits"]], "split() (julearn.model_selection.continuousstratifiedkfold method)": [[19, "julearn.model_selection.ContinuousStratifiedKFold.split"]], "repeatedcontinuousstratifiedgroupkfold (class in julearn.model_selection)": [[20, "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold"]], "__init__() (julearn.model_selection.repeatedcontinuousstratifiedgroupkfold method)": [[20, "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold.__init__"]], "get_metadata_routing() (julearn.model_selection.repeatedcontinuousstratifiedgroupkfold method)": [[20, "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold.get_metadata_routing"]], "get_n_splits() (julearn.model_selection.repeatedcontinuousstratifiedgroupkfold method)": [[20, "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold.get_n_splits"]], "split() (julearn.model_selection.repeatedcontinuousstratifiedgroupkfold method)": [[20, "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold.split"]], "repeatedcontinuousstratifiedkfold (class in julearn.model_selection)": [[21, "julearn.model_selection.RepeatedContinuousStratifiedKFold"]], "__init__() (julearn.model_selection.repeatedcontinuousstratifiedkfold method)": [[21, "julearn.model_selection.RepeatedContinuousStratifiedKFold.__init__"]], "get_metadata_routing() (julearn.model_selection.repeatedcontinuousstratifiedkfold method)": [[21, "julearn.model_selection.RepeatedContinuousStratifiedKFold.get_metadata_routing"]], "get_n_splits() (julearn.model_selection.repeatedcontinuousstratifiedkfold method)": [[21, "julearn.model_selection.RepeatedContinuousStratifiedKFold.get_n_splits"]], "split() (julearn.model_selection.repeatedcontinuousstratifiedkfold method)": [[21, "julearn.model_selection.RepeatedContinuousStratifiedKFold.split"]], "stratifiedbootstrap (class in julearn.model_selection)": [[22, "julearn.model_selection.StratifiedBootstrap"]], "__init__() (julearn.model_selection.stratifiedbootstrap method)": [[22, "julearn.model_selection.StratifiedBootstrap.__init__"]], "get_metadata_routing() (julearn.model_selection.stratifiedbootstrap method)": [[22, "julearn.model_selection.StratifiedBootstrap.get_metadata_routing"]], "get_n_splits() (julearn.model_selection.stratifiedbootstrap method)": [[22, "julearn.model_selection.StratifiedBootstrap.get_n_splits"]], "split() (julearn.model_selection.stratifiedbootstrap method)": [[22, "julearn.model_selection.StratifiedBootstrap.split"]], "get_searcher() (in module julearn.model_selection)": [[23, "julearn.model_selection.get_searcher"]], "list_searchers() (in module julearn.model_selection)": [[24, "julearn.model_selection.list_searchers"]], "register_searcher() (in module julearn.model_selection)": [[25, "julearn.model_selection.register_searcher"]], "reset_searcher_register() (in module julearn.model_selection)": [[26, "julearn.model_selection.reset_searcher_register"]], "dynamicselection (class in julearn.models.dynamic)": [[27, "julearn.models.dynamic.DynamicSelection"]], "__init__() (julearn.models.dynamic.dynamicselection method)": [[27, "julearn.models.dynamic.DynamicSelection.__init__"]], "fit() (julearn.models.dynamic.dynamicselection method)": [[27, "julearn.models.dynamic.DynamicSelection.fit"]], "get_metadata_routing() (julearn.models.dynamic.dynamicselection method)": [[27, "julearn.models.dynamic.DynamicSelection.get_metadata_routing"]], "get_params() (julearn.models.dynamic.dynamicselection method)": [[27, "julearn.models.dynamic.DynamicSelection.get_params"]], "predict() (julearn.models.dynamic.dynamicselection method)": [[27, "julearn.models.dynamic.DynamicSelection.predict"]], "predict_proba() (julearn.models.dynamic.dynamicselection method)": [[27, "julearn.models.dynamic.DynamicSelection.predict_proba"]], "score() (julearn.models.dynamic.dynamicselection method)": [[27, "julearn.models.dynamic.DynamicSelection.score"]], "set_params() (julearn.models.dynamic.dynamicselection method)": [[27, "julearn.models.dynamic.DynamicSelection.set_params"]], "set_score_request() (julearn.models.dynamic.dynamicselection method)": [[27, "julearn.models.dynamic.DynamicSelection.set_score_request"]], "get_model() (in module julearn.models)": [[28, "julearn.models.get_model"]], "list_models() (in module julearn.models)": [[29, "julearn.models.list_models"]], "register_model() (in module julearn.models)": [[30, "julearn.models.register_model"]], "reset_model_register() (in module julearn.models)": [[31, "julearn.models.reset_model_register"]], "jutargetpipeline (class in julearn.pipeline)": [[32, "julearn.pipeline.JuTargetPipeline"]], "__init__() (julearn.pipeline.jutargetpipeline method)": [[32, "julearn.pipeline.JuTargetPipeline.__init__"]], "can_inverse_transform() (julearn.pipeline.jutargetpipeline method)": [[32, "julearn.pipeline.JuTargetPipeline.can_inverse_transform"]], "fit() (julearn.pipeline.jutargetpipeline method)": [[32, "julearn.pipeline.JuTargetPipeline.fit"]], "fit_transform() (julearn.pipeline.jutargetpipeline method)": [[32, "julearn.pipeline.JuTargetPipeline.fit_transform"]], "inverse_transform() (julearn.pipeline.jutargetpipeline method)": [[32, "julearn.pipeline.JuTargetPipeline.inverse_transform"]], "needed_types (julearn.pipeline.jutargetpipeline property)": [[32, "julearn.pipeline.JuTargetPipeline.needed_types"]], "transform() (julearn.pipeline.jutargetpipeline method)": [[32, "julearn.pipeline.JuTargetPipeline.transform"]], "step (class in julearn.pipeline.pipeline_creator)": [[33, "julearn.pipeline.pipeline_creator.Step"]], "__init__() (julearn.pipeline.pipeline_creator.step method)": [[33, "julearn.pipeline.pipeline_creator.Step.__init__"]], "apply_to (julearn.pipeline.pipeline_creator.step attribute)": [[33, "julearn.pipeline.pipeline_creator.Step.apply_to"]], "estimator (julearn.pipeline.pipeline_creator.step attribute)": [[33, "julearn.pipeline.pipeline_creator.Step.estimator"]], "name (julearn.pipeline.pipeline_creator.step attribute)": [[33, "julearn.pipeline.pipeline_creator.Step.name"]], "needed_types (julearn.pipeline.pipeline_creator.step attribute)": [[33, "julearn.pipeline.pipeline_creator.Step.needed_types"]], "params_to_tune (julearn.pipeline.pipeline_creator.step attribute)": [[33, "julearn.pipeline.pipeline_creator.Step.params_to_tune"]], "row_select_col_type (julearn.pipeline.pipeline_creator.step attribute)": [[33, "julearn.pipeline.pipeline_creator.Step.row_select_col_type"]], "row_select_vals (julearn.pipeline.pipeline_creator.step attribute)": [[33, "julearn.pipeline.pipeline_creator.Step.row_select_vals"]], "check_consistency() (in module julearn.prepare)": [[34, "julearn.prepare.check_consistency"]], "prepare_input_data() (in module julearn.prepare)": [[35, "julearn.prepare.prepare_input_data"]], "run_cross_validation() (in module julearn)": [[36, "julearn.run_cross_validation"]], "run_fit() (in module julearn)": [[37, "julearn.run_fit"]], "check_scoring() (in module julearn.scoring)": [[38, "julearn.scoring.check_scoring"]], "get_scorer() (in module julearn.scoring)": [[39, "julearn.scoring.get_scorer"]], "list_scorers() (in module julearn.scoring)": [[40, "julearn.scoring.list_scorers"]], "r2_corr() (in module julearn.scoring.metrics)": [[41, "julearn.scoring.metrics.r2_corr"]], "r_corr() (in module julearn.scoring.metrics)": [[42, "julearn.scoring.metrics.r_corr"]], "register_scorer() (in module julearn.scoring)": [[43, "julearn.scoring.register_scorer"]], "reset_scorer_register() (in module julearn.scoring)": [[44, "julearn.scoring.reset_scorer_register"]], "corrected_ttest() (in module julearn.stats)": [[45, "julearn.stats.corrected_ttest"]], "cbpm (class in julearn.transformers)": [[46, "julearn.transformers.CBPM"]], "__init__() (julearn.transformers.cbpm method)": [[46, "julearn.transformers.CBPM.__init__"]], "aggregate() (julearn.transformers.cbpm method)": [[46, "julearn.transformers.CBPM.aggregate"]], "fit() (julearn.transformers.cbpm method)": [[46, "julearn.transformers.CBPM.fit"]], "fit_transform() (julearn.transformers.cbpm method)": [[46, "julearn.transformers.CBPM.fit_transform"]], "get_feature_names_out() (julearn.transformers.cbpm method)": [[46, "julearn.transformers.CBPM.get_feature_names_out"]], "get_metadata_routing() (julearn.transformers.cbpm method)": [[46, "julearn.transformers.CBPM.get_metadata_routing"]], "get_params() (julearn.transformers.cbpm method)": [[46, "julearn.transformers.CBPM.get_params"]], "set_output() (julearn.transformers.cbpm method)": [[46, "julearn.transformers.CBPM.set_output"]], "set_params() (julearn.transformers.cbpm method)": [[46, "julearn.transformers.CBPM.set_params"]], "transform() (julearn.transformers.cbpm method)": [[46, "julearn.transformers.CBPM.transform"]], "changecolumntypes (class in julearn.transformers)": [[47, "julearn.transformers.ChangeColumnTypes"]], "__init__() (julearn.transformers.changecolumntypes method)": [[47, "julearn.transformers.ChangeColumnTypes.__init__"]], "filter_columns() (julearn.transformers.changecolumntypes method)": [[47, "julearn.transformers.ChangeColumnTypes.filter_columns"]], "fit() (julearn.transformers.changecolumntypes method)": [[47, "julearn.transformers.ChangeColumnTypes.fit"]], "fit_transform() (julearn.transformers.changecolumntypes method)": [[47, "julearn.transformers.ChangeColumnTypes.fit_transform"]], "get_apply_to() (julearn.transformers.changecolumntypes method)": [[47, "julearn.transformers.ChangeColumnTypes.get_apply_to"]], "get_feature_names_out() (julearn.transformers.changecolumntypes method)": [[47, "julearn.transformers.ChangeColumnTypes.get_feature_names_out"]], "get_metadata_routing() (julearn.transformers.changecolumntypes method)": [[47, "julearn.transformers.ChangeColumnTypes.get_metadata_routing"]], "get_needed_types() (julearn.transformers.changecolumntypes method)": [[47, "julearn.transformers.ChangeColumnTypes.get_needed_types"]], "get_params() (julearn.transformers.changecolumntypes method)": [[47, "julearn.transformers.ChangeColumnTypes.get_params"]], "set_output() (julearn.transformers.changecolumntypes method)": [[47, "julearn.transformers.ChangeColumnTypes.set_output"]], "set_params() (julearn.transformers.changecolumntypes method)": [[47, "julearn.transformers.ChangeColumnTypes.set_params"]], "transform() (julearn.transformers.changecolumntypes method)": [[47, "julearn.transformers.ChangeColumnTypes.transform"]], "dropcolumns (class in julearn.transformers)": [[48, "julearn.transformers.DropColumns"]], "__init__() (julearn.transformers.dropcolumns method)": [[48, "julearn.transformers.DropColumns.__init__"]], "filter_columns() (julearn.transformers.dropcolumns method)": [[48, "julearn.transformers.DropColumns.filter_columns"]], "fit() (julearn.transformers.dropcolumns method)": [[48, "julearn.transformers.DropColumns.fit"]], "fit_transform() (julearn.transformers.dropcolumns method)": [[48, "julearn.transformers.DropColumns.fit_transform"]], "get_apply_to() (julearn.transformers.dropcolumns method)": [[48, "julearn.transformers.DropColumns.get_apply_to"]], "get_metadata_routing() (julearn.transformers.dropcolumns method)": [[48, "julearn.transformers.DropColumns.get_metadata_routing"]], "get_needed_types() (julearn.transformers.dropcolumns method)": [[48, "julearn.transformers.DropColumns.get_needed_types"]], "get_params() (julearn.transformers.dropcolumns method)": [[48, "julearn.transformers.DropColumns.get_params"]], "get_support() (julearn.transformers.dropcolumns method)": [[48, "julearn.transformers.DropColumns.get_support"]], "set_output() (julearn.transformers.dropcolumns method)": [[48, "julearn.transformers.DropColumns.set_output"]], "set_params() (julearn.transformers.dropcolumns method)": [[48, "julearn.transformers.DropColumns.set_params"]], "transform() (julearn.transformers.dropcolumns method)": [[48, "julearn.transformers.DropColumns.transform"]], "filtercolumns (class in julearn.transformers)": [[49, "julearn.transformers.FilterColumns"]], "__init__() (julearn.transformers.filtercolumns method)": [[49, "julearn.transformers.FilterColumns.__init__"]], "filter_columns() (julearn.transformers.filtercolumns method)": [[49, "julearn.transformers.FilterColumns.filter_columns"]], "fit() (julearn.transformers.filtercolumns method)": [[49, "julearn.transformers.FilterColumns.fit"]], "fit_transform() (julearn.transformers.filtercolumns method)": [[49, "julearn.transformers.FilterColumns.fit_transform"]], "get_apply_to() (julearn.transformers.filtercolumns method)": [[49, "julearn.transformers.FilterColumns.get_apply_to"]], "get_feature_names_out() (julearn.transformers.filtercolumns method)": [[49, "julearn.transformers.FilterColumns.get_feature_names_out"]], "get_metadata_routing() (julearn.transformers.filtercolumns method)": [[49, "julearn.transformers.FilterColumns.get_metadata_routing"]], "get_needed_types() (julearn.transformers.filtercolumns method)": [[49, "julearn.transformers.FilterColumns.get_needed_types"]], "get_params() (julearn.transformers.filtercolumns method)": [[49, "julearn.transformers.FilterColumns.get_params"]], "set_output() (julearn.transformers.filtercolumns method)": [[49, "julearn.transformers.FilterColumns.set_output"]], "set_params() (julearn.transformers.filtercolumns method)": [[49, "julearn.transformers.FilterColumns.set_params"]], "transform() (julearn.transformers.filtercolumns method)": [[49, "julearn.transformers.FilterColumns.transform"]], "jucolumntransformer (class in julearn.transformers)": [[50, "julearn.transformers.JuColumnTransformer"]], "__init__() (julearn.transformers.jucolumntransformer method)": [[50, "julearn.transformers.JuColumnTransformer.__init__"]], "filter_columns() (julearn.transformers.jucolumntransformer method)": [[50, "julearn.transformers.JuColumnTransformer.filter_columns"]], "fit() (julearn.transformers.jucolumntransformer method)": [[50, "julearn.transformers.JuColumnTransformer.fit"]], "fit_transform() (julearn.transformers.jucolumntransformer method)": [[50, "julearn.transformers.JuColumnTransformer.fit_transform"]], "get_apply_to() (julearn.transformers.jucolumntransformer method)": [[50, "julearn.transformers.JuColumnTransformer.get_apply_to"]], "get_feature_names_out() (julearn.transformers.jucolumntransformer method)": [[50, "julearn.transformers.JuColumnTransformer.get_feature_names_out"]], "get_metadata_routing() (julearn.transformers.jucolumntransformer method)": [[50, "julearn.transformers.JuColumnTransformer.get_metadata_routing"]], "get_needed_types() (julearn.transformers.jucolumntransformer method)": [[50, "julearn.transformers.JuColumnTransformer.get_needed_types"]], "get_params() (julearn.transformers.jucolumntransformer method)": [[50, "julearn.transformers.JuColumnTransformer.get_params"]], "set_output() (julearn.transformers.jucolumntransformer method)": [[50, "julearn.transformers.JuColumnTransformer.set_output"]], "set_params() (julearn.transformers.jucolumntransformer method)": [[50, "julearn.transformers.JuColumnTransformer.set_params"]], "transform() (julearn.transformers.jucolumntransformer method)": [[50, "julearn.transformers.JuColumnTransformer.transform"]], "setcolumntypes (class in julearn.transformers)": [[51, "julearn.transformers.SetColumnTypes"]], "__init__() (julearn.transformers.setcolumntypes method)": [[51, "julearn.transformers.SetColumnTypes.__init__"]], "filter_columns() (julearn.transformers.setcolumntypes method)": [[51, "julearn.transformers.SetColumnTypes.filter_columns"]], "fit() (julearn.transformers.setcolumntypes method)": [[51, "julearn.transformers.SetColumnTypes.fit"]], "fit_transform() (julearn.transformers.setcolumntypes method)": [[51, "julearn.transformers.SetColumnTypes.fit_transform"]], "get_apply_to() (julearn.transformers.setcolumntypes method)": [[51, "julearn.transformers.SetColumnTypes.get_apply_to"]], "get_feature_names_out() (julearn.transformers.setcolumntypes method)": [[51, "julearn.transformers.SetColumnTypes.get_feature_names_out"]], "get_metadata_routing() (julearn.transformers.setcolumntypes method)": [[51, "julearn.transformers.SetColumnTypes.get_metadata_routing"]], "get_needed_types() (julearn.transformers.setcolumntypes method)": [[51, "julearn.transformers.SetColumnTypes.get_needed_types"]], "get_params() (julearn.transformers.setcolumntypes method)": [[51, "julearn.transformers.SetColumnTypes.get_params"]], "set_output() (julearn.transformers.setcolumntypes method)": [[51, "julearn.transformers.SetColumnTypes.set_output"]], "set_params() (julearn.transformers.setcolumntypes method)": [[51, "julearn.transformers.SetColumnTypes.set_params"]], "transform() (julearn.transformers.setcolumntypes method)": [[51, "julearn.transformers.SetColumnTypes.transform"]], "confoundremover (class in julearn.transformers.confound_remover)": [[52, "julearn.transformers.confound_remover.ConfoundRemover"]], "__init__() (julearn.transformers.confound_remover.confoundremover method)": [[52, "julearn.transformers.confound_remover.ConfoundRemover.__init__"]], "filter_columns() (julearn.transformers.confound_remover.confoundremover method)": [[52, "julearn.transformers.confound_remover.ConfoundRemover.filter_columns"]], "fit() (julearn.transformers.confound_remover.confoundremover method)": [[52, "julearn.transformers.confound_remover.ConfoundRemover.fit"]], "fit_transform() (julearn.transformers.confound_remover.confoundremover method)": [[52, "julearn.transformers.confound_remover.ConfoundRemover.fit_transform"]], "get_apply_to() (julearn.transformers.confound_remover.confoundremover method)": [[52, "julearn.transformers.confound_remover.ConfoundRemover.get_apply_to"]], "get_feature_names_out() (julearn.transformers.confound_remover.confoundremover method)": [[52, "julearn.transformers.confound_remover.ConfoundRemover.get_feature_names_out"]], "get_metadata_routing() (julearn.transformers.confound_remover.confoundremover method)": [[52, "julearn.transformers.confound_remover.ConfoundRemover.get_metadata_routing"]], "get_needed_types() (julearn.transformers.confound_remover.confoundremover method)": [[52, "julearn.transformers.confound_remover.ConfoundRemover.get_needed_types"]], "get_params() (julearn.transformers.confound_remover.confoundremover method)": [[52, "julearn.transformers.confound_remover.ConfoundRemover.get_params"]], "get_support() (julearn.transformers.confound_remover.confoundremover method)": [[52, "julearn.transformers.confound_remover.ConfoundRemover.get_support"]], "set_output() (julearn.transformers.confound_remover.confoundremover method)": [[52, "julearn.transformers.confound_remover.ConfoundRemover.set_output"]], "set_params() (julearn.transformers.confound_remover.confoundremover method)": [[52, "julearn.transformers.confound_remover.ConfoundRemover.set_params"]], "transform() (julearn.transformers.confound_remover.confoundremover method)": [[52, "julearn.transformers.confound_remover.ConfoundRemover.transform"]], "get_transformer() (in module julearn.transformers)": [[53, "julearn.transformers.get_transformer"]], "list_transformers() (in module julearn.transformers)": [[54, "julearn.transformers.list_transformers"]], "register_transformer() (in module julearn.transformers)": [[55, "julearn.transformers.register_transformer"]], "reset_transformer_register() (in module julearn.transformers)": [[56, "julearn.transformers.reset_transformer_register"]], "jutargettransformer (class in julearn.transformers.target)": [[57, "julearn.transformers.target.JuTargetTransformer"]], "__init__() (julearn.transformers.target.jutargettransformer method)": [[57, "julearn.transformers.target.JuTargetTransformer.__init__"]], "fit() (julearn.transformers.target.jutargettransformer method)": [[57, "julearn.transformers.target.JuTargetTransformer.fit"]], "fit_transform() (julearn.transformers.target.jutargettransformer method)": [[57, "julearn.transformers.target.JuTargetTransformer.fit_transform"]], "transform() (julearn.transformers.target.jutargettransformer method)": [[57, "julearn.transformers.target.JuTargetTransformer.transform"]], "jutransformedtargetmodel (class in julearn.transformers.target)": [[58, "julearn.transformers.target.JuTransformedTargetModel"]], "__init__() (julearn.transformers.target.jutransformedtargetmodel method)": [[58, "julearn.transformers.target.JuTransformedTargetModel.__init__"]], "can_inverse_transform() (julearn.transformers.target.jutransformedtargetmodel method)": [[58, "julearn.transformers.target.JuTransformedTargetModel.can_inverse_transform"]], "classes_ (julearn.transformers.target.jutransformedtargetmodel property)": [[58, "julearn.transformers.target.JuTransformedTargetModel.classes_"]], "decision_function() (julearn.transformers.target.jutransformedtargetmodel method)": [[58, "julearn.transformers.target.JuTransformedTargetModel.decision_function"]], "filter_columns() (julearn.transformers.target.jutransformedtargetmodel method)": [[58, "julearn.transformers.target.JuTransformedTargetModel.filter_columns"]], "fit() (julearn.transformers.target.jutransformedtargetmodel method)": [[58, "julearn.transformers.target.JuTransformedTargetModel.fit"]], "get_apply_to() (julearn.transformers.target.jutransformedtargetmodel method)": [[58, "julearn.transformers.target.JuTransformedTargetModel.get_apply_to"]], "get_metadata_routing() (julearn.transformers.target.jutransformedtargetmodel method)": [[58, "julearn.transformers.target.JuTransformedTargetModel.get_metadata_routing"]], "get_needed_types() (julearn.transformers.target.jutransformedtargetmodel method)": [[58, "julearn.transformers.target.JuTransformedTargetModel.get_needed_types"]], "get_params() (julearn.transformers.target.jutransformedtargetmodel method)": [[58, "julearn.transformers.target.JuTransformedTargetModel.get_params"]], "predict() (julearn.transformers.target.jutransformedtargetmodel method)": [[58, "julearn.transformers.target.JuTransformedTargetModel.predict"]], "predict_proba() (julearn.transformers.target.jutransformedtargetmodel method)": [[58, "julearn.transformers.target.JuTransformedTargetModel.predict_proba"]], "score() (julearn.transformers.target.jutransformedtargetmodel method)": [[58, "julearn.transformers.target.JuTransformedTargetModel.score"]], "set_params() (julearn.transformers.target.jutransformedtargetmodel method)": [[58, "julearn.transformers.target.JuTransformedTargetModel.set_params"]], "transform_target() (julearn.transformers.target.jutransformedtargetmodel method)": [[58, "julearn.transformers.target.JuTransformedTargetModel.transform_target"]], "targetconfoundremover (class in julearn.transformers.target)": [[59, "julearn.transformers.target.TargetConfoundRemover"]], "__init__() (julearn.transformers.target.targetconfoundremover method)": [[59, "julearn.transformers.target.TargetConfoundRemover.__init__"]], "fit() (julearn.transformers.target.targetconfoundremover method)": [[59, "julearn.transformers.target.TargetConfoundRemover.fit"]], "fit_transform() (julearn.transformers.target.targetconfoundremover method)": [[59, "julearn.transformers.target.TargetConfoundRemover.fit_transform"]], "needed_types (julearn.transformers.target.targetconfoundremover property)": [[59, "julearn.transformers.target.TargetConfoundRemover.needed_types"]], "transform() (julearn.transformers.target.targetconfoundremover method)": [[59, "julearn.transformers.target.TargetConfoundRemover.transform"]], "transformedtargetwarning (class in julearn.transformers.target)": [[60, "julearn.transformers.target.TransformedTargetWarning"]], "__init__() (julearn.transformers.target.transformedtargetwarning method)": [[60, "julearn.transformers.target.TransformedTargetWarning.__init__"]], "args (julearn.transformers.target.transformedtargetwarning attribute)": [[60, "julearn.transformers.target.TransformedTargetWarning.args"]], "with_traceback() (julearn.transformers.target.transformedtargetwarning method)": [[60, "julearn.transformers.target.TransformedTargetWarning.with_traceback"]], "get_target_transformer() (in module julearn.transformers.target)": [[61, "julearn.transformers.target.get_target_transformer"]], "list_target_transformers() (in module julearn.transformers.target)": [[62, "julearn.transformers.target.list_target_transformers"]], "register_target_transformer() (in module julearn.transformers.target)": [[63, "julearn.transformers.target.register_target_transformer"]], "reset_target_transformer_register() (in module julearn.transformers.target)": [[64, "julearn.transformers.target.reset_target_transformer_register"]], "configure_logging() (in module julearn.utils)": [[65, "julearn.utils.configure_logging"]], "logger (in module julearn.utils)": [[66, "julearn.utils.logger"]], "raise_error() (in module julearn.utils)": [[67, "julearn.utils.raise_error"]], "estimatorlike (in module julearn.utils.typing)": [[68, "julearn.utils.typing.EstimatorLike"]], "estimatorlikefit1 (class in julearn.utils.typing)": [[69, "julearn.utils.typing.EstimatorLikeFit1"]], "__init__() (julearn.utils.typing.estimatorlikefit1 method)": [[69, "julearn.utils.typing.EstimatorLikeFit1.__init__"]], "fit() (julearn.utils.typing.estimatorlikefit1 method)": [[69, "julearn.utils.typing.EstimatorLikeFit1.fit"]], "get_params() (julearn.utils.typing.estimatorlikefit1 method)": [[69, "julearn.utils.typing.EstimatorLikeFit1.get_params"]], "set_params() (julearn.utils.typing.estimatorlikefit1 method)": [[69, "julearn.utils.typing.EstimatorLikeFit1.set_params"]], "estimatorlikefit2 (class in julearn.utils.typing)": [[70, "julearn.utils.typing.EstimatorLikeFit2"]], "__init__() (julearn.utils.typing.estimatorlikefit2 method)": [[70, "julearn.utils.typing.EstimatorLikeFit2.__init__"]], "fit() (julearn.utils.typing.estimatorlikefit2 method)": [[70, "julearn.utils.typing.EstimatorLikeFit2.fit"]], "get_params() (julearn.utils.typing.estimatorlikefit2 method)": [[70, "julearn.utils.typing.EstimatorLikeFit2.get_params"]], "set_params() (julearn.utils.typing.estimatorlikefit2 method)": [[70, "julearn.utils.typing.EstimatorLikeFit2.set_params"]], "estimatorlikefity (class in julearn.utils.typing)": [[71, "julearn.utils.typing.EstimatorLikeFity"]], "__init__() (julearn.utils.typing.estimatorlikefity method)": [[71, "julearn.utils.typing.EstimatorLikeFity.__init__"]], "fit() (julearn.utils.typing.estimatorlikefity method)": [[71, "julearn.utils.typing.EstimatorLikeFity.fit"]], "get_params() (julearn.utils.typing.estimatorlikefity method)": [[71, "julearn.utils.typing.EstimatorLikeFity.get_params"]], "set_params() (julearn.utils.typing.estimatorlikefity method)": [[71, "julearn.utils.typing.EstimatorLikeFity.set_params"]], "juestimatorlike (class in julearn.utils.typing)": [[72, "julearn.utils.typing.JuEstimatorLike"]], "__init__() (julearn.utils.typing.juestimatorlike method)": [[72, "julearn.utils.typing.JuEstimatorLike.__init__"]], "fit() (julearn.utils.typing.juestimatorlike method)": [[72, "julearn.utils.typing.JuEstimatorLike.fit"]], "get_apply_to() (julearn.utils.typing.juestimatorlike method)": [[72, "julearn.utils.typing.JuEstimatorLike.get_apply_to"]], "get_needed_types() (julearn.utils.typing.juestimatorlike method)": [[72, "julearn.utils.typing.JuEstimatorLike.get_needed_types"]], "get_params() (julearn.utils.typing.juestimatorlike method)": [[72, "julearn.utils.typing.JuEstimatorLike.get_params"]], "set_params() (julearn.utils.typing.juestimatorlike method)": [[72, "julearn.utils.typing.JuEstimatorLike.set_params"]], "warn_with_log() (in module julearn.utils)": [[73, "julearn.utils.warn_with_log"]], "plot_scores() (in module julearn.viz)": [[74, "julearn.viz.plot_scores"]], "julearn.inspect": [[76, "module-julearn.inspect"]], "julearn.api": [[77, "module-julearn.api"]], "julearn.model_selection": [[78, "module-julearn.model_selection"]], "julearn.models": [[79, "module-julearn.models"]], "julearn.models.dynamic": [[79, "module-julearn.models.dynamic"]], "julearn.pipeline": [[80, "module-julearn.pipeline"]], "julearn.prepare": [[81, "module-julearn.prepare"]], "julearn.scoring": [[82, "module-julearn.scoring"]], "julearn.scoring.metrics": [[82, "module-julearn.scoring.metrics"]], "julearn.stats": [[83, "module-julearn.stats"]], "julearn.transformers": [[84, "module-julearn.transformers"]], "julearn.transformers.target": [[84, "module-julearn.transformers.target"]], "julearn.utils": [[85, "module-julearn.utils"]], "julearn.utils.typing": [[85, "module-julearn.utils.typing"]], "julearn.viz": [[86, "module-julearn.viz"]]}})